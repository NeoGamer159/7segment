
7segment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006748  08006748  00007748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800678c  0800678c  0000778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006794  08006794  00007794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006798  08006798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800679c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080067ac  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800680c  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  0800686c  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  0800686c  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c4a  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287b  00000000  00000000  0001fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000225c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bde  00000000  00000000  00023520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037311  00000000  00000000  000240fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146bb  00000000  00000000  0005b40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e22e  00000000  00000000  0006faca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cdcf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004144  00000000  00000000  001cdd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001d1e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006730 	.word	0x08006730

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006730 	.word	0x08006730

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <displayNumber>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayNumber(uint8_t number) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    if (number > 9) return;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b09      	cmp	r3, #9
 80005d6:	d84f      	bhi.n	8000678 <displayNumber+0xb0>

    uint8_t segments = segmentMap[number];
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <displayNumber+0xb8>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_A_PIN, (segments & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	2140      	movs	r1, #64	@ 0x40
 80005ec:	4825      	ldr	r0, [pc, #148]	@ (8000684 <displayNumber+0xbc>)
 80005ee:	f001 fce9 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_B_PIN, (segments & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	105b      	asrs	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	2108      	movs	r1, #8
 8000602:	4820      	ldr	r0, [pc, #128]	@ (8000684 <displayNumber+0xbc>)
 8000604:	f001 fcde 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_C_PIN, (segments & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	109b      	asrs	r3, r3, #2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	2110      	movs	r1, #16
 8000618:	481a      	ldr	r0, [pc, #104]	@ (8000684 <displayNumber+0xbc>)
 800061a:	f001 fcd3 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_D_PIN, (segments & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	10db      	asrs	r3, r3, #3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	2104      	movs	r1, #4
 800062e:	4815      	ldr	r0, [pc, #84]	@ (8000684 <displayNumber+0xbc>)
 8000630:	f001 fcc8 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_D, SEG_E_PIN, (segments & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	111b      	asrs	r3, r3, #4
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	2108      	movs	r1, #8
 8000644:	4810      	ldr	r0, [pc, #64]	@ (8000688 <displayNumber+0xc0>)
 8000646:	f001 fcbd 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_D, SEG_F_PIN, (segments & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	115b      	asrs	r3, r3, #5
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	2110      	movs	r1, #16
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <displayNumber+0xc0>)
 800065c:	f001 fcb2 	bl	8001fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_D, SEG_G_PIN, (segments & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	119b      	asrs	r3, r3, #6
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	2120      	movs	r1, #32
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <displayNumber+0xc0>)
 8000672:	f001 fca7 	bl	8001fc4 <HAL_GPIO_WritePin>
 8000676:	e000      	b.n	800067a <displayNumber+0xb2>
    if (number > 9) return;
 8000678:	bf00      	nop
}
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08006748 	.word	0x08006748
 8000684:	58021000 	.word	0x58021000
 8000688:	58020c00 	.word	0x58020c00

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fcf9 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f81b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f963 	bl	8000964 <MX_GPIO_Init>
  MX_ETH_Init();
 800069e:	f000 f897 	bl	80007d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006a2:	f000 f8e1 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a6:	f000 f92b 	bl	8000900 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (uint8_t i = 0; i < 10; i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e00a      	b.n	80006c6 <main+0x3a>
	  {
		  displayNumber(i);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff88 	bl	80005c8 <displayNumber>
		  HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006bc:	f000 fd76 	bl	80011ac <HAL_Delay>
	  for (uint8_t i = 0; i < 10; i++)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	3301      	adds	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b09      	cmp	r3, #9
 80006ca:	d9f1      	bls.n	80006b0 <main+0x24>
 80006cc:	e7ed      	b.n	80006aa <main+0x1e>
	...

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09c      	sub	sp, #112	@ 0x70
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006da:	224c      	movs	r2, #76	@ 0x4c
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fff9 	bl	80066d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2220      	movs	r2, #32
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fff3 	bl	80066d6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f001 fdb1 	bl	8002258 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b33      	ldr	r3, [pc, #204]	@ (80007c8 <SystemClock_Config+0xf8>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fe:	4a32      	ldr	r2, [pc, #200]	@ (80007c8 <SystemClock_Config+0xf8>)
 8000700:	f023 0301 	bic.w	r3, r3, #1
 8000704:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000706:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <SystemClock_Config+0xf8>)
 8000708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b2e      	ldr	r3, [pc, #184]	@ (80007cc <SystemClock_Config+0xfc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000718:	4a2c      	ldr	r2, [pc, #176]	@ (80007cc <SystemClock_Config+0xfc>)
 800071a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <SystemClock_Config+0xfc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072c:	bf00      	nop
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <SystemClock_Config+0xfc>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800073a:	d1f8      	bne.n	800072e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800073c:	2303      	movs	r3, #3
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000740:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000746:	2301      	movs	r3, #1
 8000748:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2340      	movs	r3, #64	@ 0x40
 800074c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	2302      	movs	r3, #2
 8000754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800075a:	2318      	movs	r3, #24
 800075c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000762:	2304      	movs	r3, #4
 8000764:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800076a:	230c      	movs	r3, #12
 800076c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076e:	2300      	movs	r3, #0
 8000770:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fdb6 	bl	80022ec <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000786:	f000 f9c9 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	233f      	movs	r3, #63	@ 0x3f
 800078c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2101      	movs	r1, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 f9f6 	bl	8002ba0 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007ba:	f000 f9af 	bl	8000b1c <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3770      	adds	r7, #112	@ 0x70
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58000400 	.word	0x58000400
 80007cc:	58024800 	.word	0x58024800

080007d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_ETH_Init+0x80>)
 80007d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000854 <MX_ETH_Init+0x84>)
 80007d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007da:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <MX_ETH_Init+0x88>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_ETH_Init+0x88>)
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <MX_ETH_Init+0x88>)
 80007e8:	22e1      	movs	r2, #225	@ 0xe1
 80007ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_ETH_Init+0x88>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_ETH_Init+0x88>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_ETH_Init+0x88>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_ETH_Init+0x80>)
 8000800:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_ETH_Init+0x88>)
 8000802:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_ETH_Init+0x80>)
 8000806:	2201      	movs	r2, #1
 8000808:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_ETH_Init+0x80>)
 800080c:	4a13      	ldr	r2, [pc, #76]	@ (800085c <MX_ETH_Init+0x8c>)
 800080e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_ETH_Init+0x80>)
 8000812:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <MX_ETH_Init+0x90>)
 8000814:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_ETH_Init+0x80>)
 8000818:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800081c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800081e:	480c      	ldr	r0, [pc, #48]	@ (8000850 <MX_ETH_Init+0x80>)
 8000820:	f000 fdec 	bl	80013fc <HAL_ETH_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800082a:	f000 f977 	bl	8000b1c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800082e:	2238      	movs	r2, #56	@ 0x38
 8000830:	2100      	movs	r1, #0
 8000832:	480c      	ldr	r0, [pc, #48]	@ (8000864 <MX_ETH_Init+0x94>)
 8000834:	f005 ff4f 	bl	80066d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_ETH_Init+0x94>)
 800083a:	2221      	movs	r2, #33	@ 0x21
 800083c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_ETH_Init+0x94>)
 8000840:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000844:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <MX_ETH_Init+0x94>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	24000124 	.word	0x24000124
 8000854:	40028000 	.word	0x40028000
 8000858:	2400074c 	.word	0x2400074c
 800085c:	24000070 	.word	0x24000070
 8000860:	24000010 	.word	0x24000010
 8000864:	240000ec 	.word	0x240000ec

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800086e:	4a23      	ldr	r2, [pc, #140]	@ (80008fc <MX_USART3_UART_Init+0x94>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b0:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008b2:	f004 fb2d 	bl	8004f10 <HAL_UART_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008bc:	f000 f92e 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008c4:	f005 fb35 	bl	8005f32 <HAL_UARTEx_SetTxFifoThreshold>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f000 f925 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008d6:	f005 fb6a 	bl	8005fae <HAL_UARTEx_SetRxFifoThreshold>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f91c 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_USART3_UART_Init+0x90>)
 80008e6:	f005 faeb 	bl	8005ec0 <HAL_UARTEx_DisableFifoMode>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008f0:	f000 f914 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	240001d4 	.word	0x240001d4
 80008fc:	40004800 	.word	0x40004800

08000900 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	4a16      	ldr	r2, [pc, #88]	@ (8000960 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000908:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	2209      	movs	r2, #9
 800090e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000912:	2202      	movs	r2, #2
 8000914:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091e:	2202      	movs	r2, #2
 8000920:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000924:	2201      	movs	r2, #1
 8000926:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000936:	2201      	movs	r2, #1
 8000938:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093c:	2201      	movs	r2, #1
 800093e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000948:	f001 fb55 	bl	8001ff6 <HAL_PCD_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000952:	f000 f8e3 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24000268 	.word	0x24000268
 8000960:	40080000 	.word	0x40080000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	@ 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097a:	4b62      	ldr	r3, [pc, #392]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	4a60      	ldr	r2, [pc, #384]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	f003 0310 	and.w	r3, r3, #16
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b5a      	ldr	r3, [pc, #360]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	4a59      	ldr	r2, [pc, #356]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a8:	4b56      	ldr	r3, [pc, #344]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	4b53      	ldr	r3, [pc, #332]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009bc:	4a51      	ldr	r2, [pc, #324]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	4a4a      	ldr	r2, [pc, #296]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e4:	4b47      	ldr	r3, [pc, #284]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b44      	ldr	r3, [pc, #272]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	4a42      	ldr	r2, [pc, #264]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a02:	4b40      	ldr	r3, [pc, #256]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a10:	4b3c      	ldr	r3, [pc, #240]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	4a3b      	ldr	r2, [pc, #236]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a20:	4b38      	ldr	r3, [pc, #224]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2e:	4b35      	ldr	r3, [pc, #212]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	4a33      	ldr	r2, [pc, #204]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3e:	4b31      	ldr	r3, [pc, #196]	@ (8000b04 <MX_GPIO_Init+0x1a0>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PIN_D_Pin|PIN_B_Pin|PIN_C_Pin|PIN_DP_Pin
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	217e      	movs	r1, #126	@ 0x7e
 8000a50:	482d      	ldr	r0, [pc, #180]	@ (8000b08 <MX_GPIO_Init+0x1a4>)
 8000a52:	f001 fab7 	bl	8001fc4 <HAL_GPIO_WritePin>
                          |PIN_A_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a5c:	482b      	ldr	r0, [pc, #172]	@ (8000b0c <MX_GPIO_Init+0x1a8>)
 8000a5e:	f001 fab1 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PIN_E_Pin|PIN_F_Pin|PIN_G_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000a68:	4829      	ldr	r0, [pc, #164]	@ (8000b10 <MX_GPIO_Init+0x1ac>)
 8000a6a:	f001 faab 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_D_Pin PIN_B_Pin PIN_C_Pin PIN_DP_Pin
                           PIN_A_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PIN_D_Pin|PIN_B_Pin|PIN_C_Pin|PIN_DP_Pin
 8000a6e:	237e      	movs	r3, #126	@ 0x7e
 8000a70:	61fb      	str	r3, [r7, #28]
                          |PIN_A_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4820      	ldr	r0, [pc, #128]	@ (8000b08 <MX_GPIO_Init+0x1a4>)
 8000a86:	f001 f8ed 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481d      	ldr	r0, [pc, #116]	@ (8000b14 <MX_GPIO_Init+0x1b0>)
 8000aa0:	f001 f8e0 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <MX_GPIO_Init+0x1a8>)
 8000abe:	f001 f8d1 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PIN_E_Pin PIN_F_Pin PIN_G_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|PIN_E_Pin|PIN_F_Pin|PIN_G_Pin;
 8000ac2:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <MX_GPIO_Init+0x1ac>)
 8000adc:	f001 f8c2 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ae0:	2380      	movs	r3, #128	@ 0x80
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4808      	ldr	r0, [pc, #32]	@ (8000b18 <MX_GPIO_Init+0x1b4>)
 8000af6:	f001 f8b5 	bl	8001c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	@ 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58021000 	.word	0x58021000
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	58020c00 	.word	0x58020c00
 8000b14:	58020800 	.word	0x58020800
 8000b18:	58021800 	.word	0x58021800

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b34:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_MspInit+0x30>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_MspInit+0x30>)
 8000b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	58024400 	.word	0x58024400

08000b5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	@ 0x38
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a59      	ldr	r2, [pc, #356]	@ (8000ce0 <HAL_ETH_MspInit+0x184>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	f040 80ab 	bne.w	8000cd6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b80:	4b58      	ldr	r3, [pc, #352]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b86:	4a57      	ldr	r2, [pc, #348]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b8c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b90:	4b54      	ldr	r3, [pc, #336]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000b92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b9e:	4b51      	ldr	r3, [pc, #324]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000baa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bbc:	4b49      	ldr	r3, [pc, #292]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000bbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bc2:	4a48      	ldr	r2, [pc, #288]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bcc:	4b45      	ldr	r3, [pc, #276]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000bce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	4b42      	ldr	r3, [pc, #264]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	4a40      	ldr	r2, [pc, #256]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	4a39      	ldr	r2, [pc, #228]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c08:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1c:	4a31      	ldr	r2, [pc, #196]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c52:	2332      	movs	r3, #50	@ 0x32
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c62:	230b      	movs	r3, #11
 8000c64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481e      	ldr	r0, [pc, #120]	@ (8000ce8 <HAL_ETH_MspInit+0x18c>)
 8000c6e:	f000 fff9 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c72:	2386      	movs	r3, #134	@ 0x86
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c82:	230b      	movs	r3, #11
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4817      	ldr	r0, [pc, #92]	@ (8000cec <HAL_ETH_MspInit+0x190>)
 8000c8e:	f000 ffe9 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4810      	ldr	r0, [pc, #64]	@ (8000cf0 <HAL_ETH_MspInit+0x194>)
 8000cb0:	f000 ffd8 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cb4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc6:	230b      	movs	r3, #11
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <HAL_ETH_MspInit+0x198>)
 8000cd2:	f000 ffc7 	bl	8001c64 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	@ 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40028000 	.word	0x40028000
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	58020800 	.word	0x58020800
 8000cec:	58020000 	.word	0x58020000
 8000cf0:	58020400 	.word	0x58020400
 8000cf4:	58021800 	.word	0x58021800

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	22c0      	movs	r2, #192	@ 0xc0
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f005 fcdc 	bl	80066d6 <memset>
  if(huart->Instance==USART3)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a27      	ldr	r2, [pc, #156]	@ (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d146      	bne.n	8000db6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d28:	f04f 0202 	mov.w	r2, #2
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 faba 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d4a:	f7ff fee7 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d54:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da4:	2307      	movs	r3, #7
 8000da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_UART_MspInit+0xd0>)
 8000db2:	f000 ff57 	bl	8001c64 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000db6:	bf00      	nop
 8000db8:	37e8      	adds	r7, #232	@ 0xe8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58020c00 	.word	0x58020c00

08000dcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0ba      	sub	sp, #232	@ 0xe8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	22c0      	movs	r2, #192	@ 0xc0
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 fc72 	bl	80066d6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a30      	ldr	r2, [pc, #192]	@ (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d159      	bne.n	8000eb0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dfc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fa4f 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e20:	f7ff fe7c 	bl	8000b1c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e24:	f001 fa52 	bl	80022cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a23      	ldr	r2, [pc, #140]	@ (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e46:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e60:	230a      	movs	r3, #10
 8000e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4814      	ldr	r0, [pc, #80]	@ (8000ec0 <HAL_PCD_MspInit+0xf4>)
 8000e6e:	f000 fef9 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <HAL_PCD_MspInit+0xf4>)
 8000e8e:	f000 fee9 	bl	8001c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e98:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000e9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000eb0:	bf00      	nop
 8000eb2:	37e8      	adds	r7, #232	@ 0xe8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40080000 	.word	0x40080000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020000 	.word	0x58020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f927 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f28:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <SystemInit+0xe4>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a36      	ldr	r2, [pc, #216]	@ (8001008 <SystemInit+0xe4>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f38:	4b34      	ldr	r3, [pc, #208]	@ (800100c <SystemInit+0xe8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d807      	bhi.n	8000f54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f44:	4b31      	ldr	r3, [pc, #196]	@ (800100c <SystemInit+0xe8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f023 030f 	bic.w	r3, r3, #15
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800100c <SystemInit+0xe8>)
 8000f4e:	f043 0307 	orr.w	r3, r3, #7
 8000f52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <SystemInit+0xec>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <SystemInit+0xec>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <SystemInit+0xec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <SystemInit+0xec>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4929      	ldr	r1, [pc, #164]	@ (8001010 <SystemInit+0xec>)
 8000f6c:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <SystemInit+0xf0>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f72:	4b26      	ldr	r3, [pc, #152]	@ (800100c <SystemInit+0xe8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <SystemInit+0xe8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 030f 	bic.w	r3, r3, #15
 8000f86:	4a21      	ldr	r2, [pc, #132]	@ (800100c <SystemInit+0xe8>)
 8000f88:	f043 0307 	orr.w	r3, r3, #7
 8000f8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <SystemInit+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <SystemInit+0xec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <SystemInit+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <SystemInit+0xec>)
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <SystemInit+0xf4>)
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <SystemInit+0xec>)
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800101c <SystemInit+0xf8>)
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <SystemInit+0xec>)
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <SystemInit+0xfc>)
 8000fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <SystemInit+0xec>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <SystemInit+0xec>)
 8000fba:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <SystemInit+0xfc>)
 8000fbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <SystemInit+0xec>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <SystemInit+0xec>)
 8000fc6:	4a16      	ldr	r2, [pc, #88]	@ (8001020 <SystemInit+0xfc>)
 8000fc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <SystemInit+0xec>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <SystemInit+0xec>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <SystemInit+0xec>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <SystemInit+0xec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <SystemInit+0x100>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <SystemInit+0x104>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fee:	d202      	bcs.n	8000ff6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <SystemInit+0x108>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <SystemInit+0x10c>)
 8000ff8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ffc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	52002000 	.word	0x52002000
 8001010:	58024400 	.word	0x58024400
 8001014:	eaf6ed7f 	.word	0xeaf6ed7f
 8001018:	02020200 	.word	0x02020200
 800101c:	01ff0000 	.word	0x01ff0000
 8001020:	01010280 	.word	0x01010280
 8001024:	5c001000 	.word	0x5c001000
 8001028:	ffff0000 	.word	0xffff0000
 800102c:	51008108 	.word	0x51008108
 8001030:	52004000 	.word	0x52004000

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800106c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001038:	f7ff ff74 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103e:	490d      	ldr	r1, [pc, #52]	@ (8001074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001054:	4c0a      	ldr	r4, [pc, #40]	@ (8001080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f005 fb41 	bl	80066e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fb11 	bl	800068c <main>
  bx  lr
 800106a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001070:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001074:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001078:	0800679c 	.word	0x0800679c
  ldr r2, =_sbss
 800107c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001080:	24000758 	.word	0x24000758

08001084 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC3_IRQHandler>
	...

08001088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108e:	2003      	movs	r0, #3
 8001090:	f000 f982 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001094:	f001 ff3a 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8001098:	4602      	mov	r2, r0
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_Init+0x68>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	4913      	ldr	r1, [pc, #76]	@ (80010f4 <HAL_Init+0x6c>)
 80010a6:	5ccb      	ldrb	r3, [r1, r3]
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	fa22 f303 	lsr.w	r3, r2, r3
 80010b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_Init+0x68>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <HAL_Init+0x6c>)
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	4a0b      	ldr	r2, [pc, #44]	@ (80010f8 <HAL_Init+0x70>)
 80010ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010cc:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_Init+0x74>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f814 	bl	8001100 <HAL_InitTick>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e002      	b.n	80010e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010e2:	f7ff fd21 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58024400 	.word	0x58024400
 80010f4:	08006754 	.word	0x08006754
 80010f8:	24000004 	.word	0x24000004
 80010fc:	24000000 	.word	0x24000000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_InitTick+0x60>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e021      	b.n	8001158 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <HAL_InitTick+0x64>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_InitTick+0x60>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f959 	bl	80013e2 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f931 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_InitTick+0x68>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2400000c 	.word	0x2400000c
 8001164:	24000000 	.word	0x24000000
 8001168:	24000008 	.word	0x24000008

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2400000c 	.word	0x2400000c
 8001190:	24000754 	.word	0x24000754

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	24000754 	.word	0x24000754

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2400000c 	.word	0x2400000c

080011f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_GetREVID+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0c1b      	lsrs	r3, r3, #16
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	5c001000 	.word	0x5c001000

0800120c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800121c:	4904      	ldr	r1, [pc, #16]	@ (8001230 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	58000400 	.word	0x58000400

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <__NVIC_SetPriorityGrouping+0x40>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	4313      	orrs	r3, r2
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <__NVIC_SetPriorityGrouping+0x40>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	05fa0000 	.word	0x05fa0000

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	@ (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff47 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff5e 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffb2 	bl	8001354 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0e3      	b.n	80015d6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2223      	movs	r2, #35	@ 0x23
 800141c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fb9b 	bl	8000b5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b6e      	ldr	r3, [pc, #440]	@ (80015e0 <HAL_ETH_Init+0x1e4>)
 8001428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800142c:	4a6c      	ldr	r2, [pc, #432]	@ (80015e0 <HAL_ETH_Init+0x1e4>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001436:	4b6a      	ldr	r3, [pc, #424]	@ (80015e0 <HAL_ETH_Init+0x1e4>)
 8001438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7a1b      	ldrb	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fedd 	bl	800120c <HAL_SYSCFG_ETHInterfaceSelect>
 8001452:	e003      	b.n	800145c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001454:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001458:	f7ff fed8 	bl	800120c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800145c:	4b61      	ldr	r3, [pc, #388]	@ (80015e4 <HAL_ETH_Init+0x1e8>)
 800145e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff fe8c 	bl	8001194 <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800147e:	e011      	b.n	80014a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001480:	f7ff fe88 	bl	8001194 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800148e:	d909      	bls.n	80014a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2204      	movs	r2, #4
 8001494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	22e0      	movs	r2, #224	@ 0xe0
 800149c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e098      	b.n	80015d6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e4      	bne.n	8001480 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f89e 	bl	80015f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014bc:	f001 fea0 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a49      	ldr	r2, [pc, #292]	@ (80015e8 <HAL_ETH_Init+0x1ec>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	0c9a      	lsrs	r2, r3, #18
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3a01      	subs	r2, #1
 80014d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fa81 	bl	80019dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80014e6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014f6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	22e0      	movs	r2, #224	@ 0xe0
 8001512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e05d      	b.n	80015d6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001522:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001526:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <HAL_ETH_Init+0x1f0>)
 8001528:	4013      	ands	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6952      	ldr	r2, [r2, #20]
 800152e:	0051      	lsls	r1, r2, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	430b      	orrs	r3, r1
 8001536:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800153a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fae9 	bl	8001b16 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fb2f 	bl	8001ba8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	3305      	adds	r3, #5
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021a      	lsls	r2, r3, #8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	3303      	adds	r3, #3
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	061a      	lsls	r2, r3, #24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	3302      	adds	r3, #2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	3301      	adds	r3, #1
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001588:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001596:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001598:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_ETH_Init+0x1f4>)
 80015aa:	430b      	orrs	r3, r1
 80015ac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HAL_ETH_Init+0x1f8>)
 80015be:	430b      	orrs	r3, r1
 80015c0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2210      	movs	r2, #16
 80015d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58000400 	.word	0x58000400
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	ffff8001 	.word	0xffff8001
 80015f0:	0c020060 	.word	0x0c020060
 80015f4:	0c20c000 	.word	0x0c20c000

080015f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001608:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001610:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001612:	f001 fdf5 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8001616:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4a1a      	ldr	r2, [pc, #104]	@ (8001684 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d804      	bhi.n	800162a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e022      	b.n	8001670 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4a16      	ldr	r2, [pc, #88]	@ (8001688 <HAL_ETH_SetMDIOClockRange+0x90>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d204      	bcs.n	800163c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e019      	b.n	8001670 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d915      	bls.n	8001670 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d804      	bhi.n	8001656 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e00c      	b.n	8001670 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4a0e      	ldr	r2, [pc, #56]	@ (8001694 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d804      	bhi.n	8001668 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e003      	b.n	8001670 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800166e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	02160ebf 	.word	0x02160ebf
 8001688:	03938700 	.word	0x03938700
 800168c:	05f5e0ff 	.word	0x05f5e0ff
 8001690:	08f0d17f 	.word	0x08f0d17f
 8001694:	0ee6b27f 	.word	0x0ee6b27f

08001698 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80016aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	7b1b      	ldrb	r3, [r3, #12]
 80016b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	7b5b      	ldrb	r3, [r3, #13]
 80016c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	7b9b      	ldrb	r3, [r3, #14]
 80016c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	7bdb      	ldrb	r3, [r3, #15]
 80016d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	7c12      	ldrb	r2, [r2, #16]
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d102      	bne.n	80016e2 <ETH_SetMACConfig+0x4a>
 80016dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016e0:	e000      	b.n	80016e4 <ETH_SetMACConfig+0x4c>
 80016e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	7c52      	ldrb	r2, [r2, #17]
 80016ea:	2a00      	cmp	r2, #0
 80016ec:	d102      	bne.n	80016f4 <ETH_SetMACConfig+0x5c>
 80016ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016f2:	e000      	b.n	80016f6 <ETH_SetMACConfig+0x5e>
 80016f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7c9b      	ldrb	r3, [r3, #18]
 80016fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001704:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800170a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7f1b      	ldrb	r3, [r3, #28]
 8001710:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001712:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	7f5b      	ldrb	r3, [r3, #29]
 8001718:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800171a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	7f92      	ldrb	r2, [r2, #30]
 8001720:	2a00      	cmp	r2, #0
 8001722:	d102      	bne.n	800172a <ETH_SetMACConfig+0x92>
 8001724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001728:	e000      	b.n	800172c <ETH_SetMACConfig+0x94>
 800172a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800172c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	7fdb      	ldrb	r3, [r3, #31]
 8001732:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001734:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	f892 2020 	ldrb.w	r2, [r2, #32]
 800173c:	2a00      	cmp	r2, #0
 800173e:	d102      	bne.n	8001746 <ETH_SetMACConfig+0xae>
 8001740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001744:	e000      	b.n	8001748 <ETH_SetMACConfig+0xb0>
 8001746:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001748:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800174e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001756:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001758:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800175e:	4313      	orrs	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b56      	ldr	r3, [pc, #344]	@ (80018c4 <ETH_SetMACConfig+0x22c>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	430b      	orrs	r3, r1
 8001774:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001782:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001784:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800178c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800178e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001796:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001798:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d102      	bne.n	80017aa <ETH_SetMACConfig+0x112>
 80017a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a8:	e000      	b.n	80017ac <ETH_SetMACConfig+0x114>
 80017aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4b42      	ldr	r3, [pc, #264]	@ (80018c8 <ETH_SetMACConfig+0x230>)
 80017be:	4013      	ands	r3, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	430b      	orrs	r3, r1
 80017c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <ETH_SetMACConfig+0x234>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	430b      	orrs	r3, r1
 80017ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001802:	2a00      	cmp	r2, #0
 8001804:	d101      	bne.n	800180a <ETH_SetMACConfig+0x172>
 8001806:	2280      	movs	r2, #128	@ 0x80
 8001808:	e000      	b.n	800180c <ETH_SetMACConfig+0x174>
 800180a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800180c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001812:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001814:	4313      	orrs	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800181e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	430b      	orrs	r3, r1
 800182c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001834:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800183c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184a:	f023 0103 	bic.w	r1, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	430a      	orrs	r2, r1
 8001856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001862:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800187e:	2a00      	cmp	r2, #0
 8001880:	d101      	bne.n	8001886 <ETH_SetMACConfig+0x1ee>
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	e000      	b.n	8001888 <ETH_SetMACConfig+0x1f0>
 8001886:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001888:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001890:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001892:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800189a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80018a8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	00048083 	.word	0x00048083
 80018c8:	c0f88000 	.word	0xc0f88000
 80018cc:	fffffef0 	.word	0xfffffef0

080018d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <ETH_SetDMAConfig+0xf8>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	6811      	ldr	r1, [r2, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001902:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	7b1b      	ldrb	r3, [r3, #12]
 8001908:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <ETH_SetDMAConfig+0xfc>)
 800191a:	4013      	ands	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	68f9      	ldr	r1, [r7, #12]
 8001922:	430b      	orrs	r3, r1
 8001924:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001928:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	7b5b      	ldrb	r3, [r3, #13]
 800192e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001934:	4313      	orrs	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001940:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001944:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <ETH_SetDMAConfig+0x100>)
 8001946:	4013      	ands	r3, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	430b      	orrs	r3, r1
 8001950:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001954:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	7d1b      	ldrb	r3, [r3, #20]
 8001960:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001962:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	7f5b      	ldrb	r3, [r3, #29]
 8001968:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001976:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <ETH_SetDMAConfig+0x104>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	430b      	orrs	r3, r1
 8001986:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800198a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	7f1b      	ldrb	r3, [r3, #28]
 8001992:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001998:	4313      	orrs	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <ETH_SetDMAConfig+0x108>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	430b      	orrs	r3, r1
 80019b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019b8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	ffff87fd 	.word	0xffff87fd
 80019cc:	ffff2ffe 	.word	0xffff2ffe
 80019d0:	fffec000 	.word	0xfffec000
 80019d4:	ffc0efef 	.word	0xffc0efef
 80019d8:	7fc0ffff 	.word	0x7fc0ffff

080019dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0a4      	sub	sp, #144	@ 0x90
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019ea:	2300      	movs	r3, #0
 80019ec:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001a34:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001a38:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a56:	2300      	movs	r3, #0
 8001a58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a74:	2320      	movs	r3, #32
 8001a76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a86:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a90:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fde6 	bl	8001698 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ae6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001aea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001af0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001af4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001afc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fee1 	bl	80018d0 <ETH_SetDMAConfig>
}
 8001b0e:	bf00      	nop
 8001b10:	3790      	adds	r7, #144	@ 0x90
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e01d      	b.n	8001b60 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68d9      	ldr	r1, [r3, #12]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	3206      	adds	r2, #6
 8001b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d9de      	bls.n	8001b24 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b74:	461a      	mov	r2, r3
 8001b76:	2303      	movs	r3, #3
 8001b78:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b88:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b98:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e023      	b.n	8001bfe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	3212      	adds	r2, #18
 8001bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d9d8      	bls.n	8001bb6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c52:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c72:	4b89      	ldr	r3, [pc, #548]	@ (8001e98 <HAL_GPIO_Init+0x234>)
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c76:	e194      	b.n	8001fa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8186 	beq.w	8001f9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x44>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d017      	beq.n	8001d46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d123      	bne.n	8001d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	69b9      	ldr	r1, [r7, #24]
 8001d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0203 	and.w	r2, r3, #3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80e0 	beq.w	8001f9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <HAL_GPIO_Init+0x238>)
 8001dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001de2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e9c <HAL_GPIO_Init+0x238>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <HAL_GPIO_Init+0x238>)
 8001dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ea0 <HAL_GPIO_Init+0x23c>)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	220f      	movs	r2, #15
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a20      	ldr	r2, [pc, #128]	@ (8001ea4 <HAL_GPIO_Init+0x240>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d052      	beq.n	8001ecc <HAL_GPIO_Init+0x268>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <HAL_GPIO_Init+0x244>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d031      	beq.n	8001e92 <HAL_GPIO_Init+0x22e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a1e      	ldr	r2, [pc, #120]	@ (8001eac <HAL_GPIO_Init+0x248>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02b      	beq.n	8001e8e <HAL_GPIO_Init+0x22a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <HAL_GPIO_Init+0x24c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d025      	beq.n	8001e8a <HAL_GPIO_Init+0x226>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb4 <HAL_GPIO_Init+0x250>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01f      	beq.n	8001e86 <HAL_GPIO_Init+0x222>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_GPIO_Init+0x254>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d019      	beq.n	8001e82 <HAL_GPIO_Init+0x21e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	@ (8001ebc <HAL_GPIO_Init+0x258>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_GPIO_Init+0x21a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_GPIO_Init+0x25c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00d      	beq.n	8001e7a <HAL_GPIO_Init+0x216>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a18      	ldr	r2, [pc, #96]	@ (8001ec4 <HAL_GPIO_Init+0x260>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <HAL_GPIO_Init+0x212>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <HAL_GPIO_Init+0x264>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_GPIO_Init+0x20e>
 8001e6e:	2309      	movs	r3, #9
 8001e70:	e02d      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e72:	230a      	movs	r3, #10
 8001e74:	e02b      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e76:	2308      	movs	r3, #8
 8001e78:	e029      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e027      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e7e:	2306      	movs	r3, #6
 8001e80:	e025      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e023      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e021      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e01f      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e01d      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e01b      	b.n	8001ece <HAL_GPIO_Init+0x26a>
 8001e96:	bf00      	nop
 8001e98:	58000080 	.word	0x58000080
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58000400 	.word	0x58000400
 8001ea4:	58020000 	.word	0x58020000
 8001ea8:	58020400 	.word	0x58020400
 8001eac:	58020800 	.word	0x58020800
 8001eb0:	58020c00 	.word	0x58020c00
 8001eb4:	58021000 	.word	0x58021000
 8001eb8:	58021400 	.word	0x58021400
 8001ebc:	58021800 	.word	0x58021800
 8001ec0:	58021c00 	.word	0x58021c00
 8001ec4:	58022000 	.word	0x58022000
 8001ec8:	58022400 	.word	0x58022400
 8001ecc:	2300      	movs	r3, #0
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ede:	4938      	ldr	r1, [pc, #224]	@ (8001fc0 <HAL_GPIO_Init+0x35c>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f47f ae63 	bne.w	8001c78 <HAL_GPIO_Init+0x14>
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	3724      	adds	r7, #36	@ 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	58000400 	.word	0x58000400

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af02      	add	r7, sp, #8
 8001ffc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0fe      	b.n	8002206 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fed5 	bl	8000dcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f004 f8bc 	bl	80061ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7c1a      	ldrb	r2, [r3, #16]
 800203c:	f88d 2000 	strb.w	r2, [sp]
 8002040:	3304      	adds	r3, #4
 8002042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002044:	f004 f840 	bl	80060c8 <USB_CoreInit>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0d5      	b.n	8002206 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f004 f8b4 	bl	80061ce <USB_SetCurrentMode>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0c6      	b.n	8002206 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e04a      	b.n	8002114 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3315      	adds	r3, #21
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3314      	adds	r3, #20
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	b298      	uxth	r0, r3
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	332e      	adds	r3, #46	@ 0x2e
 80020ba:	4602      	mov	r2, r0
 80020bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3318      	adds	r3, #24
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	331c      	adds	r3, #28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3320      	adds	r3, #32
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3324      	adds	r3, #36	@ 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	3301      	adds	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	791b      	ldrb	r3, [r3, #4]
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	429a      	cmp	r2, r3
 800211c:	d3af      	bcc.n	800207e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	e044      	b.n	80021ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	3301      	adds	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	791b      	ldrb	r3, [r3, #4]
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d3b5      	bcc.n	8002124 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7c1a      	ldrb	r2, [r3, #16]
 80021c0:	f88d 2000 	strb.w	r2, [sp]
 80021c4:	3304      	adds	r3, #4
 80021c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c8:	f004 f84e 	bl	8006268 <USB_DevInit>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e013      	b.n	8002206 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7b1b      	ldrb	r3, [r3, #12]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f80b 	bl	8002210 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fa09 	bl	8006616 <USB_DevDisconnect>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_PCDEx_ActivateLPM+0x44>)
 8002240:	4313      	orrs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	10000003 	.word	0x10000003

08002258 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d00a      	beq.n	8002282 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800226c:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <HAL_PWREx_ConfigSupply+0x70>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e01f      	b.n	80022be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e01d      	b.n	80022be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002282:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f023 0207 	bic.w	r2, r3, #7
 800228a:	490f      	ldr	r1, [pc, #60]	@ (80022c8 <HAL_PWREx_ConfigSupply+0x70>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4313      	orrs	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002292:	f7fe ff7f 	bl	8001194 <HAL_GetTick>
 8002296:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002298:	e009      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800229a:	f7fe ff7b 	bl	8001194 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022a8:	d901      	bls.n	80022ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e007      	b.n	80022be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_PWREx_ConfigSupply+0x70>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ba:	d1ee      	bne.n	800229a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	58024800 	.word	0x58024800

080022cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	58024800 	.word	0x58024800

080022ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	@ 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f000 bc48 	b.w	8002b90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8088 	beq.w	800241e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230e:	4b99      	ldr	r3, [pc, #612]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002318:	4b96      	ldr	r3, [pc, #600]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	2b10      	cmp	r3, #16
 8002322:	d007      	beq.n	8002334 <HAL_RCC_OscConfig+0x48>
 8002324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002326:	2b18      	cmp	r3, #24
 8002328:	d111      	bne.n	800234e <HAL_RCC_OscConfig+0x62>
 800232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b8f      	ldr	r3, [pc, #572]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d06d      	beq.n	800241c <HAL_RCC_OscConfig+0x130>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d169      	bne.n	800241c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	f000 bc21 	b.w	8002b90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x7a>
 8002358:	4b86      	ldr	r3, [pc, #536]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a85      	ldr	r2, [pc, #532]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e02e      	b.n	80023c4 <HAL_RCC_OscConfig+0xd8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x9c>
 800236e:	4b81      	ldr	r3, [pc, #516]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a80      	ldr	r2, [pc, #512]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b7e      	ldr	r3, [pc, #504]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7d      	ldr	r2, [pc, #500]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xd8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0xc0>
 8002392:	4b78      	ldr	r3, [pc, #480]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a77      	ldr	r2, [pc, #476]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b75      	ldr	r3, [pc, #468]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a74      	ldr	r2, [pc, #464]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xd8>
 80023ac:	4b71      	ldr	r3, [pc, #452]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a70      	ldr	r2, [pc, #448]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fee2 	bl	8001194 <HAL_GetTick>
 80023d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7fe fede 	bl	8001194 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e3d4      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e6:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fece 	bl	8001194 <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7fe feca 	bl	8001194 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	@ 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e3c0      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800240e:	4b59      	ldr	r3, [pc, #356]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x110>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80ca 	beq.w	80025c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242c:	4b51      	ldr	r3, [pc, #324]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002434:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002436:	4b4f      	ldr	r3, [pc, #316]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_RCC_OscConfig+0x166>
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2b18      	cmp	r3, #24
 8002446:	d156      	bne.n	80024f6 <HAL_RCC_OscConfig+0x20a>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d151      	bne.n	80024f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002452:	4b48      	ldr	r3, [pc, #288]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e392      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800246a:	4b42      	ldr	r3, [pc, #264]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0219 	bic.w	r2, r3, #25
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	493f      	ldr	r1, [pc, #252]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fe8a 	bl	8001194 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002484:	f7fe fe86 	bl	8001194 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e37c      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002496:	4b37      	ldr	r3, [pc, #220]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	f7fe fea7 	bl	80011f4 <HAL_GetREVID>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d817      	bhi.n	80024e0 <HAL_RCC_OscConfig+0x1f4>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b40      	cmp	r3, #64	@ 0x40
 80024b6:	d108      	bne.n	80024ca <HAL_RCC_OscConfig+0x1de>
 80024b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80024c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c8:	e07a      	b.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	031b      	lsls	r3, r3, #12
 80024d8:	4926      	ldr	r1, [pc, #152]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024de:	e06f      	b.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b24      	ldr	r3, [pc, #144]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	4921      	ldr	r1, [pc, #132]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f4:	e064      	b.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d047      	beq.n	800258e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0219 	bic.w	r2, r3, #25
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	491a      	ldr	r1, [pc, #104]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fe40 	bl	8001194 <HAL_GetTick>
 8002514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe fe3c 	bl	8001194 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e332      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800252a:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	f7fe fe5d 	bl	80011f4 <HAL_GetREVID>
 800253a:	4603      	mov	r3, r0
 800253c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002540:	4293      	cmp	r3, r2
 8002542:	d819      	bhi.n	8002578 <HAL_RCC_OscConfig+0x28c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b40      	cmp	r3, #64	@ 0x40
 800254a:	d108      	bne.n	800255e <HAL_RCC_OscConfig+0x272>
 800254c:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002554:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800255a:	6053      	str	r3, [r2, #4]
 800255c:	e030      	b.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
 800255e:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	031b      	lsls	r3, r3, #12
 800256c:	4901      	ldr	r1, [pc, #4]	@ (8002574 <HAL_RCC_OscConfig+0x288>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
 8002572:	e025      	b.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
 8002574:	58024400 	.word	0x58024400
 8002578:	4b9a      	ldr	r3, [pc, #616]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	4997      	ldr	r1, [pc, #604]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b95      	ldr	r3, [pc, #596]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a94      	ldr	r2, [pc, #592]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fdfb 	bl	8001194 <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fdf7 	bl	8001194 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e2ed      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b4:	4b8b      	ldr	r3, [pc, #556]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a9 	beq.w	8002720 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ce:	4b85      	ldr	r3, [pc, #532]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025d8:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d007      	beq.n	80025f4 <HAL_RCC_OscConfig+0x308>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b18      	cmp	r3, #24
 80025e8:	d13a      	bne.n	8002660 <HAL_RCC_OscConfig+0x374>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d135      	bne.n	8002660 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f4:	4b7b      	ldr	r3, [pc, #492]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_OscConfig+0x320>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b80      	cmp	r3, #128	@ 0x80
 8002606:	d001      	beq.n	800260c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e2c1      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800260c:	f7fe fdf2 	bl	80011f4 <HAL_GetREVID>
 8002610:	4603      	mov	r3, r0
 8002612:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002616:	4293      	cmp	r3, r2
 8002618:	d817      	bhi.n	800264a <HAL_RCC_OscConfig+0x35e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	2b20      	cmp	r3, #32
 8002620:	d108      	bne.n	8002634 <HAL_RCC_OscConfig+0x348>
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800262a:	4a6e      	ldr	r2, [pc, #440]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002630:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002632:	e075      	b.n	8002720 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002634:	4b6b      	ldr	r3, [pc, #428]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	069b      	lsls	r3, r3, #26
 8002642:	4968      	ldr	r1, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002648:	e06a      	b.n	8002720 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800264a:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	061b      	lsls	r3, r3, #24
 8002658:	4962      	ldr	r1, [pc, #392]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800265e:	e05f      	b.n	8002720 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d042      	beq.n	80026ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002668:	4b5e      	ldr	r3, [pc, #376]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5d      	ldr	r2, [pc, #372]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800266e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fd8e 	bl	8001194 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800267c:	f7fe fd8a 	bl	8001194 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e280      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800268e:	4b55      	ldr	r3, [pc, #340]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800269a:	f7fe fdab 	bl	80011f4 <HAL_GetREVID>
 800269e:	4603      	mov	r3, r0
 80026a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d817      	bhi.n	80026d8 <HAL_RCC_OscConfig+0x3ec>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d108      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3d6>
 80026b0:	4b4c      	ldr	r3, [pc, #304]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026b8:	4a4a      	ldr	r2, [pc, #296]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026be:	6053      	str	r3, [r2, #4]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0x434>
 80026c2:	4b48      	ldr	r3, [pc, #288]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	069b      	lsls	r3, r3, #26
 80026d0:	4944      	ldr	r1, [pc, #272]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
 80026d6:	e023      	b.n	8002720 <HAL_RCC_OscConfig+0x434>
 80026d8:	4b42      	ldr	r3, [pc, #264]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	493f      	ldr	r1, [pc, #252]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
 80026ec:	e018      	b.n	8002720 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026ee:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a3c      	ldr	r2, [pc, #240]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fd4b 	bl	8001194 <HAL_GetTick>
 80026fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002702:	f7fe fd47 	bl	8001194 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e23d      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002714:	4b33      	ldr	r3, [pc, #204]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f0      	bne.n	8002702 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d036      	beq.n	800279a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d019      	beq.n	8002768 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002734:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002738:	4a2a      	ldr	r2, [pc, #168]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fd28 	bl	8001194 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fd24 	bl	8001194 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e21a      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800275a:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x45c>
 8002766:	e018      	b.n	800279a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276c:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fd0e 	bl	8001194 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7fe fd0a 	bl	8001194 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e200      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d039      	beq.n	800281a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ae:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fceb 	bl	8001194 <HAL_GetTick>
 80027be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c2:	f7fe fce7 	bl	8001194 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e1dd      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4d6>
 80027e0:	e01b      	b.n	800281a <HAL_RCC_OscConfig+0x52e>
 80027e2:	bf00      	nop
 80027e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a9a      	ldr	r2, [pc, #616]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80027ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027f4:	f7fe fcce 	bl	8001194 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fc:	f7fe fcca 	bl	8001194 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1c0      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800280e:	4b92      	ldr	r3, [pc, #584]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8081 	beq.w	800292a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002828:	4b8c      	ldr	r3, [pc, #560]	@ (8002a5c <HAL_RCC_OscConfig+0x770>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a8b      	ldr	r2, [pc, #556]	@ (8002a5c <HAL_RCC_OscConfig+0x770>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002834:	f7fe fcae 	bl	8001194 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283c:	f7fe fcaa 	bl	8001194 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	@ 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1a0      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800284e:	4b83      	ldr	r3, [pc, #524]	@ (8002a5c <HAL_RCC_OscConfig+0x770>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d106      	bne.n	8002870 <HAL_RCC_OscConfig+0x584>
 8002862:	4b7d      	ldr	r3, [pc, #500]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	4a7c      	ldr	r2, [pc, #496]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6713      	str	r3, [r2, #112]	@ 0x70
 800286e:	e02d      	b.n	80028cc <HAL_RCC_OscConfig+0x5e0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_OscConfig+0x5a6>
 8002878:	4b77      	ldr	r3, [pc, #476]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287c:	4a76      	ldr	r2, [pc, #472]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	@ 0x70
 8002884:	4b74      	ldr	r3, [pc, #464]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	4a73      	ldr	r2, [pc, #460]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 800288a:	f023 0304 	bic.w	r3, r3, #4
 800288e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002890:	e01c      	b.n	80028cc <HAL_RCC_OscConfig+0x5e0>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b05      	cmp	r3, #5
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x5c8>
 800289a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0x5e0>
 80028b4:	4b68      	ldr	r3, [pc, #416]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	4a67      	ldr	r2, [pc, #412]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c0:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	4a64      	ldr	r2, [pc, #400]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	f023 0304 	bic.w	r3, r3, #4
 80028ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fc5e 	bl	8001194 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7fe fc5a 	bl	8001194 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e14e      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028f2:	4b59      	ldr	r3, [pc, #356]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0ee      	beq.n	80028dc <HAL_RCC_OscConfig+0x5f0>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fc48 	bl	8001194 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe fc44 	bl	8001194 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e138      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800291e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ee      	bne.n	8002908 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 812d 	beq.w	8002b8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002934:	4b48      	ldr	r3, [pc, #288]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800293c:	2b18      	cmp	r3, #24
 800293e:	f000 80bd 	beq.w	8002abc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	2b02      	cmp	r3, #2
 8002948:	f040 809e 	bne.w	8002a88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b42      	ldr	r3, [pc, #264]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a41      	ldr	r2, [pc, #260]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fc1c 	bl	8001194 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fc18 	bl	8001194 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e10e      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002972:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002982:	4b37      	ldr	r3, [pc, #220]	@ (8002a60 <HAL_RCC_OscConfig+0x774>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	430a      	orrs	r2, r1
 8002992:	4931      	ldr	r1, [pc, #196]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	628b      	str	r3, [r1, #40]	@ 0x28
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	3b01      	subs	r3, #1
 800299e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a6:	3b01      	subs	r3, #1
 80029a8:	025b      	lsls	r3, r3, #9
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b2:	3b01      	subs	r3, #1
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c0:	3b01      	subs	r3, #1
 80029c2:	061b      	lsls	r3, r3, #24
 80029c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029c8:	4923      	ldr	r1, [pc, #140]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029ce:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	4a21      	ldr	r2, [pc, #132]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029da:	4b1f      	ldr	r3, [pc, #124]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <HAL_RCC_OscConfig+0x778>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029e6:	00d2      	lsls	r2, r2, #3
 80029e8:	491b      	ldr	r1, [pc, #108]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	f023 020c 	bic.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	4917      	ldr	r1, [pc, #92]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a00:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a04:	f023 0202 	bic.w	r2, r3, #2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	4912      	ldr	r1, [pc, #72]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a12:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	4a10      	ldr	r2, [pc, #64]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	4a0d      	ldr	r2, [pc, #52]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a36:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	4a07      	ldr	r2, [pc, #28]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <HAL_RCC_OscConfig+0x76c>)
 8002a48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fba1 	bl	8001194 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a54:	e011      	b.n	8002a7a <HAL_RCC_OscConfig+0x78e>
 8002a56:	bf00      	nop
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	58024800 	.word	0x58024800
 8002a60:	fffffc0c 	.word	0xfffffc0c
 8002a64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fb94 	bl	8001194 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e08a      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x77c>
 8002a86:	e082      	b.n	8002b8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a88:	4b43      	ldr	r3, [pc, #268]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a42      	ldr	r2, [pc, #264]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fb7e 	bl	8001194 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fb7a 	bl	8001194 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e070      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aae:	4b3a      	ldr	r3, [pc, #232]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x7b0>
 8002aba:	e068      	b.n	8002b8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002abc:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ac2:	4b35      	ldr	r3, [pc, #212]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d031      	beq.n	8002b34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f003 0203 	and.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d12a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d122      	bne.n	8002b34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d11a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0a5b      	lsrs	r3, r3, #9
 8002b02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d111      	bne.n	8002b34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d108      	bne.n	8002b34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0e1b      	lsrs	r3, r3, #24
 8002b26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e02b      	b.n	8002b90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b38:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d01f      	beq.n	8002b8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	4a11      	ldr	r2, [pc, #68]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b5a:	f7fe fb1b 	bl	8001194 <HAL_GetTick>
 8002b5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b60:	bf00      	nop
 8002b62:	f7fe fb17 	bl	8001194 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d0f9      	beq.n	8002b62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <HAL_RCC_OscConfig+0x8b0>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b7a:	00d2      	lsls	r2, r2, #3
 8002b7c:	4906      	ldr	r1, [pc, #24]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <HAL_RCC_OscConfig+0x8ac>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3730      	adds	r7, #48	@ 0x30
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	58024400 	.word	0x58024400
 8002b9c:	ffff0007 	.word	0xffff0007

08002ba0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e19c      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b8a      	ldr	r3, [pc, #552]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b87      	ldr	r3, [pc, #540]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	4985      	ldr	r1, [pc, #532]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b83      	ldr	r3, [pc, #524]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e184      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d908      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c00:	4b78      	ldr	r3, [pc, #480]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4975      	ldr	r1, [pc, #468]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	4b70      	ldr	r3, [pc, #448]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d908      	bls.n	8002c40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	496a      	ldr	r1, [pc, #424]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	4b64      	ldr	r3, [pc, #400]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d908      	bls.n	8002c6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c5c:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	495e      	ldr	r1, [pc, #376]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	4b59      	ldr	r3, [pc, #356]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c8a:	4b56      	ldr	r3, [pc, #344]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4953      	ldr	r1, [pc, #332]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b4d      	ldr	r3, [pc, #308]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d908      	bls.n	8002cca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f023 020f 	bic.w	r2, r3, #15
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4947      	ldr	r1, [pc, #284]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d055      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cd6:	4b43      	ldr	r3, [pc, #268]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4940      	ldr	r1, [pc, #256]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d121      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0f6      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d08:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0ea      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d20:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0de      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d30:	4b2c      	ldr	r3, [pc, #176]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0d6      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d40:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f023 0207 	bic.w	r2, r3, #7
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4925      	ldr	r1, [pc, #148]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d52:	f7fe fa1f 	bl	8001194 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fe fa1b 	bl	8001194 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0be      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d70:	4b1c      	ldr	r3, [pc, #112]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d1eb      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d208      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f023 020f 	bic.w	r2, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	490e      	ldr	r1, [pc, #56]	@ (8002de4 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d214      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 020f 	bic.w	r2, r3, #15
 8002dc6:	4906      	ldr	r1, [pc, #24]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e086      	b.n	8002eee <HAL_RCC_ClockConfig+0x34e>
 8002de0:	52002000 	.word	0x52002000
 8002de4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d208      	bcs.n	8002e16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e04:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	4939      	ldr	r1, [pc, #228]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d208      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e32:	4b31      	ldr	r3, [pc, #196]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	492e      	ldr	r1, [pc, #184]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d208      	bcs.n	8002e72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e60:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	4922      	ldr	r1, [pc, #136]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d208      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4917      	ldr	r1, [pc, #92]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ea0:	f000 f834 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	4912      	ldr	r1, [pc, #72]	@ (8002efc <HAL_RCC_ClockConfig+0x35c>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8002efc <HAL_RCC_ClockConfig+0x35c>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <HAL_RCC_ClockConfig+0x360>)
 8002ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <HAL_RCC_ClockConfig+0x364>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_RCC_ClockConfig+0x368>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe f90c 	bl	8001100 <HAL_InitTick>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	08006754 	.word	0x08006754
 8002f00:	24000004 	.word	0x24000004
 8002f04:	24000000 	.word	0x24000000
 8002f08:	24000008 	.word	0x24000008

08002f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f12:	4bb3      	ldr	r3, [pc, #716]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f1a:	2b18      	cmp	r3, #24
 8002f1c:	f200 8155 	bhi.w	80031ca <HAL_RCC_GetSysClockFreq+0x2be>
 8002f20:	a201      	add	r2, pc, #4	@ (adr r2, 8002f28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f8d 	.word	0x08002f8d
 8002f2c:	080031cb 	.word	0x080031cb
 8002f30:	080031cb 	.word	0x080031cb
 8002f34:	080031cb 	.word	0x080031cb
 8002f38:	080031cb 	.word	0x080031cb
 8002f3c:	080031cb 	.word	0x080031cb
 8002f40:	080031cb 	.word	0x080031cb
 8002f44:	080031cb 	.word	0x080031cb
 8002f48:	08002fb3 	.word	0x08002fb3
 8002f4c:	080031cb 	.word	0x080031cb
 8002f50:	080031cb 	.word	0x080031cb
 8002f54:	080031cb 	.word	0x080031cb
 8002f58:	080031cb 	.word	0x080031cb
 8002f5c:	080031cb 	.word	0x080031cb
 8002f60:	080031cb 	.word	0x080031cb
 8002f64:	080031cb 	.word	0x080031cb
 8002f68:	08002fb9 	.word	0x08002fb9
 8002f6c:	080031cb 	.word	0x080031cb
 8002f70:	080031cb 	.word	0x080031cb
 8002f74:	080031cb 	.word	0x080031cb
 8002f78:	080031cb 	.word	0x080031cb
 8002f7c:	080031cb 	.word	0x080031cb
 8002f80:	080031cb 	.word	0x080031cb
 8002f84:	080031cb 	.word	0x080031cb
 8002f88:	08002fbf 	.word	0x08002fbf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f8c:	4b94      	ldr	r3, [pc, #592]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f98:	4b91      	ldr	r3, [pc, #580]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	4a90      	ldr	r2, [pc, #576]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002faa:	e111      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fac:	4b8d      	ldr	r3, [pc, #564]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fae:	61bb      	str	r3, [r7, #24]
      break;
 8002fb0:	e10e      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fb4:	61bb      	str	r3, [r7, #24]
      break;
 8002fb6:	e10b      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fba:	61bb      	str	r3, [r7, #24]
      break;
 8002fbc:	e108      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fbe:	4b88      	ldr	r3, [pc, #544]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fc8:	4b85      	ldr	r3, [pc, #532]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fd2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fd4:	4b82      	ldr	r3, [pc, #520]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fde:	4b80      	ldr	r3, [pc, #512]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80e1 	beq.w	80031c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b02      	cmp	r3, #2
 8003006:	f000 8083 	beq.w	8003110 <HAL_RCC_GetSysClockFreq+0x204>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b02      	cmp	r3, #2
 800300e:	f200 80a1 	bhi.w	8003154 <HAL_RCC_GetSysClockFreq+0x248>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x114>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d056      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800301e:	e099      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003020:	4b6f      	ldr	r3, [pc, #444]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d02d      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800302c:	4b6c      	ldr	r3, [pc, #432]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	08db      	lsrs	r3, r3, #3
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	4a6b      	ldr	r2, [pc, #428]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003056:	4b62      	ldr	r3, [pc, #392]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003066:	ed97 6a02 	vldr	s12, [r7, #8]
 800306a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800306e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800307a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003082:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003086:	e087      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309a:	4b51      	ldr	r3, [pc, #324]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ca:	e065      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030de:	4b40      	ldr	r3, [pc, #256]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800310e:	e043      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800311e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003122:	4b2f      	ldr	r3, [pc, #188]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003132:	ed97 6a02 	vldr	s12, [r7, #8]
 8003136:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003152:	e021      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003166:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003176:	ed97 6a02 	vldr	s12, [r7, #8]
 800317a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800317e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800318a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003196:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	0a5b      	lsrs	r3, r3, #9
 800319e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031a2:	3301      	adds	r3, #1
 80031a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031c2:	e005      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
      break;
 80031c8:	e002      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031ca:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031cc:	61bb      	str	r3, [r7, #24]
      break;
 80031ce:	bf00      	nop
  }

  return sysclockfreq;
 80031d0:	69bb      	ldr	r3, [r7, #24]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	@ 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	03d09000 	.word	0x03d09000
 80031e8:	003d0900 	.word	0x003d0900
 80031ec:	007a1200 	.word	0x007a1200
 80031f0:	46000000 	.word	0x46000000
 80031f4:	4c742400 	.word	0x4c742400
 80031f8:	4a742400 	.word	0x4a742400
 80031fc:	4af42400 	.word	0x4af42400

08003200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003206:	f7ff fe81 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 800320a:	4602      	mov	r2, r0
 800320c:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x50>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	490f      	ldr	r1, [pc, #60]	@ (8003254 <HAL_RCC_GetHCLKFreq+0x54>)
 8003218:	5ccb      	ldrb	r3, [r1, r3]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x50>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <HAL_RCC_GetHCLKFreq+0x54>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	4a07      	ldr	r2, [pc, #28]	@ (8003258 <HAL_RCC_GetHCLKFreq+0x58>)
 800323c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800323e:	4a07      	ldr	r2, [pc, #28]	@ (800325c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003244:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <HAL_RCC_GetHCLKFreq+0x58>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	58024400 	.word	0x58024400
 8003254:	08006754 	.word	0x08006754
 8003258:	24000004 	.word	0x24000004
 800325c:	24000000 	.word	0x24000000

08003260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003264:	f7ff ffcc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4904      	ldr	r1, [pc, #16]	@ (8003288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	58024400 	.word	0x58024400
 8003288:	08006754 	.word	0x08006754

0800328c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003290:	f7ff ffb6 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	58024400 	.word	0x58024400
 80032b4:	08006754 	.word	0x08006754

080032b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b0ca      	sub	sp, #296	@ 0x128
 80032be:	af00      	add	r7, sp, #0
 80032c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032dc:	2500      	movs	r5, #0
 80032de:	ea54 0305 	orrs.w	r3, r4, r5
 80032e2:	d049      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032ee:	d02f      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032f4:	d828      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032fa:	d01a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003300:	d822      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800330a:	d007      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800330c:	e01c      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330e:	4bb8      	ldr	r3, [pc, #736]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	4ab7      	ldr	r2, [pc, #732]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800331a:	e01a      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	3308      	adds	r3, #8
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fc8f 	bl	8004c48 <RCCEx_PLL2_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003330:	e00f      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003336:	3328      	adds	r3, #40	@ 0x28
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fd36 	bl	8004dac <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003346:	e004      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800335a:	4ba5      	ldr	r3, [pc, #660]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003368:	4aa1      	ldr	r2, [pc, #644]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336a:	430b      	orrs	r3, r1
 800336c:	6513      	str	r3, [r2, #80]	@ 0x50
 800336e:	e003      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003384:	f04f 0900 	mov.w	r9, #0
 8003388:	ea58 0309 	orrs.w	r3, r8, r9
 800338c:	d047      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	2b04      	cmp	r3, #4
 8003396:	d82a      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003398:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033b5 	.word	0x080033b5
 80033a4:	080033c3 	.word	0x080033c3
 80033a8:	080033d9 	.word	0x080033d9
 80033ac:	080033f7 	.word	0x080033f7
 80033b0:	080033f7 	.word	0x080033f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b4:	4b8e      	ldr	r3, [pc, #568]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	4a8d      	ldr	r2, [pc, #564]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033c0:	e01a      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	3308      	adds	r3, #8
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fc3c 	bl	8004c48 <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033d6:	e00f      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	3328      	adds	r3, #40	@ 0x28
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fce3 	bl	8004dac <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ec:	e004      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033f4:	e000      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003400:	4b7b      	ldr	r3, [pc, #492]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003404:	f023 0107 	bic.w	r1, r3, #7
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	4a78      	ldr	r2, [pc, #480]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003410:	430b      	orrs	r3, r1
 8003412:	6513      	str	r3, [r2, #80]	@ 0x50
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800342a:	f04f 0b00 	mov.w	fp, #0
 800342e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003432:	d04c      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343e:	d030      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003444:	d829      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003446:	2bc0      	cmp	r3, #192	@ 0xc0
 8003448:	d02d      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800344a:	2bc0      	cmp	r3, #192	@ 0xc0
 800344c:	d825      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800344e:	2b80      	cmp	r3, #128	@ 0x80
 8003450:	d018      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003452:	2b80      	cmp	r3, #128	@ 0x80
 8003454:	d821      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800345a:	2b40      	cmp	r3, #64	@ 0x40
 800345c:	d007      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800345e:	e01c      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003460:	4b63      	ldr	r3, [pc, #396]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	4a62      	ldr	r2, [pc, #392]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800346c:	e01c      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003472:	3308      	adds	r3, #8
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fbe6 	bl	8004c48 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003488:	3328      	adds	r3, #40	@ 0x28
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fc8d 	bl	8004dac <RCCEx_PLL3_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034b0:	4b4f      	ldr	r3, [pc, #316]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	4a4c      	ldr	r2, [pc, #304]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80034e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d053      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034fa:	d035      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003500:	d82e      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003502:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003506:	d031      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003508:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800350c:	d828      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800350e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003512:	d01a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003518:	d822      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003522:	d007      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003524:	e01c      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003526:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352a:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003532:	e01c      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	3308      	adds	r3, #8
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fb83 	bl	8004c48 <RCCEx_PLL2_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003548:	e011      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	3328      	adds	r3, #40	@ 0x28
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fc2a 	bl	8004dac <RCCEx_PLL3_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800355e:	e006      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003566:	e002      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800356c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003576:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003586:	4a1a      	ldr	r2, [pc, #104]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003588:	430b      	orrs	r3, r1
 800358a:	6593      	str	r3, [r2, #88]	@ 0x58
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d056      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c2:	d038      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c8:	d831      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035ce:	d034      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035d4:	d82b      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035da:	d01d      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035e0:	d825      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035ec:	e01f      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ee:	bf00      	nop
 80035f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4ba2      	ldr	r3, [pc, #648]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003600:	e01c      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	3308      	adds	r3, #8
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fb1c 	bl	8004c48 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003616:	e011      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	3328      	adds	r3, #40	@ 0x28
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fbc3 	bl	8004dac <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800362c:	e006      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800363a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003644:	4b8e      	ldr	r3, [pc, #568]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003648:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003654:	4a8a      	ldr	r2, [pc, #552]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003656:	430b      	orrs	r3, r1
 8003658:	6593      	str	r3, [r2, #88]	@ 0x58
 800365a:	e003      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003670:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800367a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800367e:	460b      	mov	r3, r1
 8003680:	4313      	orrs	r3, r2
 8003682:	d03a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	2b30      	cmp	r3, #48	@ 0x30
 800368c:	d01f      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800368e:	2b30      	cmp	r3, #48	@ 0x30
 8003690:	d819      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003692:	2b20      	cmp	r3, #32
 8003694:	d00c      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003696:	2b20      	cmp	r3, #32
 8003698:	d815      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d111      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a2:	4b77      	ldr	r3, [pc, #476]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	4a76      	ldr	r2, [pc, #472]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036ae:	e011      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	3308      	adds	r3, #8
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fac5 	bl	8004c48 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036cc:	e002      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036dc:	4b68      	ldr	r3, [pc, #416]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	4a65      	ldr	r2, [pc, #404]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036f0:	e003      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003706:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800370a:	2300      	movs	r3, #0
 800370c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003710:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d051      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003724:	d035      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003726:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800372a:	d82e      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800372c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003730:	d031      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003732:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003736:	d828      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373c:	d01a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003742:	d822      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374c:	d007      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800374e:	e01c      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	4a4a      	ldr	r2, [pc, #296]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800375c:	e01c      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	3308      	adds	r3, #8
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fa6e 	bl	8004c48 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	3328      	adds	r3, #40	@ 0x28
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fb15 	bl	8004dac <RCCEx_PLL3_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003788:	e006      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003790:	e002      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	4a34      	ldr	r2, [pc, #208]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d056      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e8:	d033      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ee:	d82c      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037f4:	d02f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037fa:	d826      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003800:	d02b      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003802:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003806:	d820      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800380c:	d012      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800380e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003812:	d81a      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d022      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381c:	d115      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	3308      	adds	r3, #8
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fa0e 	bl	8004c48 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	3328      	adds	r3, #40	@ 0x28
 800383a:	2101      	movs	r1, #1
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fab5 	bl	8004dac <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003848:	e00a      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003852:	bf00      	nop
 8003854:	e004      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10d      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003868:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003876:	4a02      	ldr	r2, [pc, #8]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003878:	430b      	orrs	r3, r1
 800387a:	6513      	str	r3, [r2, #80]	@ 0x50
 800387c:	e006      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800387e:	bf00      	nop
 8003880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	d055      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b8:	d033      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038be:	d82c      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c4:	d02f      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ca:	d826      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038d0:	d02b      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038d6:	d820      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d012      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e2:	d81a      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d022      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ec:	d115      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	3308      	adds	r3, #8
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f9a6 	bl	8004c48 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003902:	e015      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003908:	3328      	adds	r3, #40	@ 0x28
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fa4d 	bl	8004dac <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003918:	e00a      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003922:	bf00      	nop
 8003924:	e004      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800392e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003938:	4ba3      	ldr	r3, [pc, #652]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003948:	4a9f      	ldr	r2, [pc, #636]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800394a:	430b      	orrs	r3, r1
 800394c:	6593      	str	r3, [r2, #88]	@ 0x58
 800394e:	e003      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800396e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d037      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003982:	d00e      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003988:	d816      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d018      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003992:	d111      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003994:	4b8c      	ldr	r3, [pc, #560]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	4a8b      	ldr	r2, [pc, #556]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039a0:	e00f      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a6:	3308      	adds	r3, #8
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 f94c 	bl	8004c48 <RCCEx_PLL2_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ca:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d8:	4a7b      	ldr	r2, [pc, #492]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80039de:	e003      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	d039      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d81c      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a12:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a55 	.word	0x08003a55
 8003a1c:	08003a29 	.word	0x08003a29
 8003a20:	08003a37 	.word	0x08003a37
 8003a24:	08003a55 	.word	0x08003a55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a28:	4b67      	ldr	r3, [pc, #412]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	4a66      	ldr	r2, [pc, #408]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a34:	e00f      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f902 	bl	8004c48 <RCCEx_PLL2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a4a:	e004      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a62:	f023 0103 	bic.w	r1, r3, #3
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6c:	4a56      	ldr	r2, [pc, #344]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a72:	e003      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a96:	460b      	mov	r3, r1
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f000 809f 	beq.w	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd fb73 	bl	8001194 <HAL_GetTick>
 8003aae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab2:	e00b      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab4:	f7fd fb6e 	bl	8001194 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	@ 0x64
 8003ac2:	d903      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aca:	e005      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003acc:	4b3f      	ldr	r3, [pc, #252]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ed      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d179      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ae0:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aec:	4053      	eors	r3, r2
 8003aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d015      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af6:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b02:	4b31      	ldr	r3, [pc, #196]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	4a30      	ldr	r2, [pc, #192]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2e:	d118      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fb30 	bl	8001194 <HAL_GetTick>
 8003b34:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b38:	e00d      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd fb2b 	bl	8001194 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b44:	1ad2      	subs	r2, r2, r3
 8003b46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d903      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b54:	e005      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b56:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0eb      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d129      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b7a:	d10e      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b7c:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b8c:	091a      	lsrs	r2, r3, #4
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6113      	str	r3, [r2, #16]
 8003b98:	e005      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ba4:	6113      	str	r3, [r2, #16]
 8003ba6:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb6:	4a04      	ldr	r2, [pc, #16]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbc:	e00e      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003bc6:	e009      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bc8:	58024400 	.word	0x58024400
 8003bcc:	58024800 	.word	0x58024800
 8003bd0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f002 0301 	and.w	r3, r2, #1
 8003be8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f000 8089 	beq.w	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c04:	2b28      	cmp	r3, #40	@ 0x28
 8003c06:	d86b      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c08:	a201      	add	r2, pc, #4	@ (adr r2, 8003c10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003ce9 	.word	0x08003ce9
 8003c14:	08003ce1 	.word	0x08003ce1
 8003c18:	08003ce1 	.word	0x08003ce1
 8003c1c:	08003ce1 	.word	0x08003ce1
 8003c20:	08003ce1 	.word	0x08003ce1
 8003c24:	08003ce1 	.word	0x08003ce1
 8003c28:	08003ce1 	.word	0x08003ce1
 8003c2c:	08003ce1 	.word	0x08003ce1
 8003c30:	08003cb5 	.word	0x08003cb5
 8003c34:	08003ce1 	.word	0x08003ce1
 8003c38:	08003ce1 	.word	0x08003ce1
 8003c3c:	08003ce1 	.word	0x08003ce1
 8003c40:	08003ce1 	.word	0x08003ce1
 8003c44:	08003ce1 	.word	0x08003ce1
 8003c48:	08003ce1 	.word	0x08003ce1
 8003c4c:	08003ce1 	.word	0x08003ce1
 8003c50:	08003ccb 	.word	0x08003ccb
 8003c54:	08003ce1 	.word	0x08003ce1
 8003c58:	08003ce1 	.word	0x08003ce1
 8003c5c:	08003ce1 	.word	0x08003ce1
 8003c60:	08003ce1 	.word	0x08003ce1
 8003c64:	08003ce1 	.word	0x08003ce1
 8003c68:	08003ce1 	.word	0x08003ce1
 8003c6c:	08003ce1 	.word	0x08003ce1
 8003c70:	08003ce9 	.word	0x08003ce9
 8003c74:	08003ce1 	.word	0x08003ce1
 8003c78:	08003ce1 	.word	0x08003ce1
 8003c7c:	08003ce1 	.word	0x08003ce1
 8003c80:	08003ce1 	.word	0x08003ce1
 8003c84:	08003ce1 	.word	0x08003ce1
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003ce9 	.word	0x08003ce9
 8003c94:	08003ce1 	.word	0x08003ce1
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003ce1 	.word	0x08003ce1
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003ce1 	.word	0x08003ce1
 8003cac:	08003ce1 	.word	0x08003ce1
 8003cb0:	08003ce9 	.word	0x08003ce9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	3308      	adds	r3, #8
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 ffc3 	bl	8004c48 <RCCEx_PLL2_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	3328      	adds	r3, #40	@ 0x28
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f86a 	bl	8004dac <RCCEx_PLL3_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cde:	e004      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cf2:	4bbf      	ldr	r3, [pc, #764]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d00:	4abb      	ldr	r2, [pc, #748]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d06:	e003      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f002 0302 	and.w	r3, r2, #2
 8003d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d041      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d824      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d8d 	.word	0x08003d8d
 8003d44:	08003d59 	.word	0x08003d59
 8003d48:	08003d6f 	.word	0x08003d6f
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	08003d8d 	.word	0x08003d8d
 8003d54:	08003d8d 	.word	0x08003d8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 ff71 	bl	8004c48 <RCCEx_PLL2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e00f      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d72:	3328      	adds	r3, #40	@ 0x28
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 f818 	bl	8004dac <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d96:	4b96      	ldr	r3, [pc, #600]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9a:	f023 0107 	bic.w	r1, r3, #7
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da4:	4a92      	ldr	r2, [pc, #584]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f002 0304 	and.w	r3, r2, #4
 8003dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d044      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d825      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003de0:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e35 	.word	0x08003e35
 8003dec:	08003e01 	.word	0x08003e01
 8003df0:	08003e17 	.word	0x08003e17
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e35 	.word	0x08003e35
 8003dfc:	08003e35 	.word	0x08003e35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e04:	3308      	adds	r3, #8
 8003e06:	2101      	movs	r1, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 ff1d 	bl	8004c48 <RCCEx_PLL2_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e14:	e00f      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	3328      	adds	r3, #40	@ 0x28
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 ffc4 	bl	8004dac <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e2a:	e004      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f023 0107 	bic.w	r1, r3, #7
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4e:	4a68      	ldr	r2, [pc, #416]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f002 0320 	and.w	r3, r2, #32
 8003e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	d055      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8a:	d033      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e90:	d82c      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e96:	d02f      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9c:	d826      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ea2:	d02b      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ea4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ea8:	d820      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eae:	d012      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb4:	d81a      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d022      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ebe:	d115      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 febd 	bl	8004c48 <RCCEx_PLL2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ed4:	e015      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	3328      	adds	r3, #40	@ 0x28
 8003edc:	2102      	movs	r1, #2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ff64 	bl	8004dac <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eea:	e00a      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef2:	e006      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e004      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e002      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d058      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f52:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f56:	d033      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f58:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f5c:	d82c      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f62:	d02f      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f68:	d826      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f6e:	d02b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f74:	d820      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7a:	d012      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f80:	d81a      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d022      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8a:	d115      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	3308      	adds	r3, #8
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe57 	bl	8004c48 <RCCEx_PLL2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e015      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa6:	3328      	adds	r3, #40	@ 0x28
 8003fa8:	2102      	movs	r1, #2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fefe 	bl	8004dac <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fb6:	e00a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fbe:	e006      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd6:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe6:	4a02      	ldr	r2, [pc, #8]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004012:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d055      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004024:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004028:	d033      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800402a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800402e:	d82c      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004034:	d02f      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800403a:	d826      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800403c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004040:	d02b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004042:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004046:	d820      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004048:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800404c:	d012      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800404e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004052:	d81a      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d022      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405c:	d115      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	3308      	adds	r3, #8
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fdee 	bl	8004c48 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004072:	e015      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004078:	3328      	adds	r3, #40	@ 0x28
 800407a:	2102      	movs	r1, #2
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fe95 	bl	8004dac <RCCEx_PLL3_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004088:	e00a      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004092:	bf00      	nop
 8004094:	e004      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040b8:	4a9d      	ldr	r2, [pc, #628]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f002 0308 	and.w	r3, r2, #8
 80040d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d01e      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	3328      	adds	r3, #40	@ 0x28
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fe54 	bl	8004dac <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004110:	4b87      	ldr	r3, [pc, #540]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004114:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004120:	4a83      	ldr	r2, [pc, #524]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004122:	430b      	orrs	r3, r1
 8004124:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f002 0310 	and.w	r3, r2, #16
 8004132:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800413c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d01e      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004152:	d10c      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	3328      	adds	r3, #40	@ 0x28
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe25 	bl	8004dac <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800416e:	4b70      	ldr	r3, [pc, #448]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800417e:	4a6c      	ldr	r2, [pc, #432]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004190:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800419a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d03e      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b0:	d022      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b6:	d81b      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c0:	d00b      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041c2:	e015      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c8:	3308      	adds	r3, #8
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd3b 	bl	8004c48 <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041d8:	e00f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	3328      	adds	r3, #40	@ 0x28
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fde2 	bl	8004dac <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004202:	4b4b      	ldr	r3, [pc, #300]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004212:	4a47      	ldr	r2, [pc, #284]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004214:	430b      	orrs	r3, r1
 8004216:	6593      	str	r3, [r2, #88]	@ 0x58
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800422e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004230:	2300      	movs	r3, #0
 8004232:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004234:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004238:	460b      	mov	r3, r1
 800423a:	4313      	orrs	r3, r2
 800423c:	d03b      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800424a:	d01f      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800424c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004250:	d818      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004258:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800425c:	d007      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004260:	4b33      	ldr	r3, [pc, #204]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	4a32      	ldr	r2, [pc, #200]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800426a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800426c:	e00f      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	3328      	adds	r3, #40	@ 0x28
 8004274:	2101      	movs	r1, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fd98 	bl	8004dac <RCCEx_PLL3_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004282:	e004      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800428c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004296:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	4a22      	ldr	r2, [pc, #136]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80042c4:	2300      	movs	r3, #0
 80042c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80042c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042cc:	460b      	mov	r3, r1
 80042ce:	4313      	orrs	r3, r2
 80042d0:	d034      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e0:	d007      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e4:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	4a11      	ldr	r2, [pc, #68]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042f0:	e00e      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	3308      	adds	r3, #8
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fca4 	bl	8004c48 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004306:	e003      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800430e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004326:	4a02      	ldr	r2, [pc, #8]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004328:	430b      	orrs	r3, r1
 800432a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800432c:	e006      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800434a:	2300      	movs	r3, #0
 800434c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800434e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004352:	460b      	mov	r3, r1
 8004354:	4313      	orrs	r3, r2
 8004356:	d00c      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435c:	3328      	adds	r3, #40	@ 0x28
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fd23 	bl	8004dac <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800437e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004380:	2300      	movs	r3, #0
 8004382:	667b      	str	r3, [r7, #100]	@ 0x64
 8004384:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d038      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439a:	d018      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800439c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043a0:	d811      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a6:	d014      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ac:	d80b      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d011      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043b6:	d106      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b8:	4bc3      	ldr	r3, [pc, #780]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	4ac2      	ldr	r2, [pc, #776]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043c4:	e008      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043cc:	e004      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043e0:	4bb9      	ldr	r3, [pc, #740]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f0:	4ab5      	ldr	r2, [pc, #724]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043f6:	e003      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800440c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800440e:	2300      	movs	r3, #0
 8004410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004412:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d009      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800441c:	4baa      	ldr	r3, [pc, #680]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004420:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442a:	4aa7      	ldr	r2, [pc, #668]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800442c:	430b      	orrs	r3, r1
 800442e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800443c:	653b      	str	r3, [r7, #80]	@ 0x50
 800443e:	2300      	movs	r3, #0
 8004440:	657b      	str	r3, [r7, #84]	@ 0x54
 8004442:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800444c:	4b9e      	ldr	r3, [pc, #632]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800445c:	4a9a      	ldr	r2, [pc, #616]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445e:	430b      	orrs	r3, r1
 8004460:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800446e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004470:	2300      	movs	r3, #0
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800447e:	4b92      	ldr	r3, [pc, #584]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004482:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448c:	4a8e      	ldr	r2, [pc, #568]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448e:	430b      	orrs	r3, r1
 8004490:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800449e:	643b      	str	r3, [r7, #64]	@ 0x40
 80044a0:	2300      	movs	r3, #0
 80044a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d00e      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ae:	4b86      	ldr	r3, [pc, #536]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	4a85      	ldr	r2, [pc, #532]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044b8:	6113      	str	r3, [r2, #16]
 80044ba:	4b83      	ldr	r3, [pc, #524]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044bc:	6919      	ldr	r1, [r3, #16]
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044c6:	4a80      	ldr	r2, [pc, #512]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044da:	2300      	movs	r3, #0
 80044dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044e8:	4b77      	ldr	r3, [pc, #476]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	4a74      	ldr	r2, [pc, #464]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004508:	633b      	str	r3, [r7, #48]	@ 0x30
 800450a:	2300      	movs	r3, #0
 800450c:	637b      	str	r3, [r7, #52]	@ 0x34
 800450e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004518:	4b6b      	ldr	r3, [pc, #428]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004528:	4a67      	ldr	r2, [pc, #412]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452a:	430b      	orrs	r3, r1
 800452c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	2100      	movs	r1, #0
 8004538:	62b9      	str	r1, [r7, #40]	@ 0x28
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004540:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d011      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3308      	adds	r3, #8
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fb78 	bl	8004c48 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	2100      	movs	r1, #0
 8004578:	6239      	str	r1, [r7, #32]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004580:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d011      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	3308      	adds	r3, #8
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb58 	bl	8004c48 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	2100      	movs	r1, #0
 80045b8:	61b9      	str	r1, [r7, #24]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	3308      	adds	r3, #8
 80045d0:	2102      	movs	r1, #2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb38 	bl	8004c48 <RCCEx_PLL2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	2100      	movs	r1, #0
 80045f8:	6139      	str	r1, [r7, #16]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d011      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	3328      	adds	r3, #40	@ 0x28
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fbca 	bl	8004dac <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	2100      	movs	r1, #0
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d011      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	3328      	adds	r3, #40	@ 0x28
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fbaa 	bl	8004dac <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	2100      	movs	r1, #0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d011      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	3328      	adds	r3, #40	@ 0x28
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fb8a 	bl	8004dac <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80046ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
}
 80046bc:	4618      	mov	r0, r3
 80046be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046c2:	46bd      	mov	sp, r7
 80046c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c8:	58024400 	.word	0x58024400

080046cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046d0:	f7fe fd96 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	58024400 	.word	0x58024400
 80046f4:	08006754 	.word	0x08006754

080046f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	@ 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004700:	4ba1      	ldr	r3, [pc, #644]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800470a:	4b9f      	ldr	r3, [pc, #636]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470e:	0b1b      	lsrs	r3, r3, #12
 8004710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004714:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004716:	4b9c      	ldr	r3, [pc, #624]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004722:	4b99      	ldr	r3, [pc, #612]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	08db      	lsrs	r3, r3, #3
 8004728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8111 	beq.w	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b02      	cmp	r3, #2
 800474a:	f000 8083 	beq.w	8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b02      	cmp	r3, #2
 8004752:	f200 80a1 	bhi.w	8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d056      	beq.n	8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004762:	e099      	b.n	8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004764:	4b88      	ldr	r3, [pc, #544]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02d      	beq.n	80047cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004770:	4b85      	ldr	r3, [pc, #532]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	08db      	lsrs	r3, r3, #3
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	4a84      	ldr	r2, [pc, #528]	@ (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
 8004780:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479a:	4b7b      	ldr	r3, [pc, #492]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047ca:	e087      	b.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047de:	4b6a      	ldr	r3, [pc, #424]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800480e:	e065      	b.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800481e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004822:	4b59      	ldr	r3, [pc, #356]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004832:	ed97 6a03 	vldr	s12, [r7, #12]
 8004836:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800483a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004852:	e043      	b.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004866:	4b48      	ldr	r3, [pc, #288]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004876:	ed97 6a03 	vldr	s12, [r7, #12]
 800487a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800487e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004896:	e021      	b.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048aa:	4b37      	ldr	r3, [pc, #220]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80048be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	0a5b      	lsrs	r3, r3, #9
 80048e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004902:	ee17 2a90 	vmov	r2, s15
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800490a:	4b1f      	ldr	r3, [pc, #124]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004920:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004924:	edd7 6a07 	vldr	s13, [r7, #28]
 8004928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004930:	ee17 2a90 	vmov	r2, s15
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004938:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800494e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004952:	edd7 6a07 	vldr	s13, [r7, #28]
 8004956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495e:	ee17 2a90 	vmov	r2, s15
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004966:	e008      	b.n	800497a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
}
 800497a:	bf00      	nop
 800497c:	3724      	adds	r7, #36	@ 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	58024400 	.word	0x58024400
 800498c:	03d09000 	.word	0x03d09000
 8004990:	46000000 	.word	0x46000000
 8004994:	4c742400 	.word	0x4c742400
 8004998:	4a742400 	.word	0x4a742400
 800499c:	4af42400 	.word	0x4af42400

080049a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	@ 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049b2:	4b9f      	ldr	r3, [pc, #636]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b6:	0d1b      	lsrs	r3, r3, #20
 80049b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049be:	4b9c      	ldr	r3, [pc, #624]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049ca:	4b99      	ldr	r3, [pc, #612]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	08db      	lsrs	r3, r3, #3
 80049d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8111 	beq.w	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	f000 8083 	beq.w	8004afc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	f200 80a1 	bhi.w	8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d056      	beq.n	8004ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a0a:	e099      	b.n	8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0c:	4b88      	ldr	r3, [pc, #544]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02d      	beq.n	8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a18:	4b85      	ldr	r3, [pc, #532]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	4a84      	ldr	r2, [pc, #528]	@ (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a42:	4b7b      	ldr	r3, [pc, #492]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a72:	e087      	b.n	8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a86:	4b6a      	ldr	r3, [pc, #424]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ab6:	e065      	b.n	8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aca:	4b59      	ldr	r3, [pc, #356]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ade:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afa:	e043      	b.n	8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	4b48      	ldr	r3, [pc, #288]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b3e:	e021      	b.n	8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b37      	ldr	r3, [pc, #220]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b84:	4b2a      	ldr	r3, [pc, #168]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	0a5b      	lsrs	r3, r3, #9
 8004b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004baa:	ee17 2a90 	vmov	r2, s15
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	0c1b      	lsrs	r3, r3, #16
 8004bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd8:	ee17 2a90 	vmov	r2, s15
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004be0:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	0e1b      	lsrs	r3, r3, #24
 8004be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c06:	ee17 2a90 	vmov	r2, s15
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c0e:	e008      	b.n	8004c22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	609a      	str	r2, [r3, #8]
}
 8004c22:	bf00      	nop
 8004c24:	3724      	adds	r7, #36	@ 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
 8004c34:	03d09000 	.word	0x03d09000
 8004c38:	46000000 	.word	0x46000000
 8004c3c:	4c742400 	.word	0x4c742400
 8004c40:	4a742400 	.word	0x4a742400
 8004c44:	4af42400 	.word	0x4af42400

08004c48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c56:	4b53      	ldr	r3, [pc, #332]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d101      	bne.n	8004c66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e099      	b.n	8004d9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c66:	4b4f      	ldr	r3, [pc, #316]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a4e      	ldr	r2, [pc, #312]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c72:	f7fc fa8f 	bl	8001194 <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c78:	e008      	b.n	8004c8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c7a:	f7fc fa8b 	bl	8001194 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e086      	b.n	8004d9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c8c:	4b45      	ldr	r3, [pc, #276]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c98:	4b42      	ldr	r3, [pc, #264]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	031b      	lsls	r3, r3, #12
 8004ca6:	493f      	ldr	r1, [pc, #252]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	025b      	lsls	r3, r3, #9
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cdc:	4931      	ldr	r1, [pc, #196]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ce2:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	492d      	ldr	r1, [pc, #180]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	f023 0220 	bic.w	r2, r3, #32
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	4928      	ldr	r1, [pc, #160]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d06:	4b27      	ldr	r3, [pc, #156]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0a:	4a26      	ldr	r2, [pc, #152]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	f023 0310 	bic.w	r3, r3, #16
 8004d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d12:	4b24      	ldr	r3, [pc, #144]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d16:	4b24      	ldr	r3, [pc, #144]	@ (8004da8 <RCCEx_PLL2_Config+0x160>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	69d2      	ldr	r2, [r2, #28]
 8004d1e:	00d2      	lsls	r2, r2, #3
 8004d20:	4920      	ldr	r1, [pc, #128]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d26:	4b1f      	ldr	r3, [pc, #124]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	f043 0310 	orr.w	r3, r3, #16
 8004d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d38:	4b1a      	ldr	r3, [pc, #104]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	4a19      	ldr	r2, [pc, #100]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d44:	e00f      	b.n	8004d66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d106      	bne.n	8004d5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d4c:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	4a14      	ldr	r2, [pc, #80]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d58:	e005      	b.n	8004d66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d5a:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	4a11      	ldr	r2, [pc, #68]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d66:	4b0f      	ldr	r3, [pc, #60]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d72:	f7fc fa0f 	bl	8001194 <HAL_GetTick>
 8004d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d78:	e008      	b.n	8004d8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d7a:	f7fc fa0b 	bl	8001194 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e006      	b.n	8004d9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	58024400 	.word	0x58024400
 8004da8:	ffff0007 	.word	0xffff0007

08004dac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dba:	4b53      	ldr	r3, [pc, #332]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d101      	bne.n	8004dca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e099      	b.n	8004efe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dca:	4b4f      	ldr	r3, [pc, #316]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a4e      	ldr	r2, [pc, #312]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd6:	f7fc f9dd 	bl	8001194 <HAL_GetTick>
 8004dda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dde:	f7fc f9d9 	bl	8001194 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e086      	b.n	8004efe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004df0:	4b45      	ldr	r3, [pc, #276]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dfc:	4b42      	ldr	r3, [pc, #264]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	051b      	lsls	r3, r3, #20
 8004e0a:	493f      	ldr	r1, [pc, #252]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	025b      	lsls	r3, r3, #9
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	061b      	lsls	r3, r3, #24
 8004e3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e40:	4931      	ldr	r1, [pc, #196]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e46:	4b30      	ldr	r3, [pc, #192]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	492d      	ldr	r1, [pc, #180]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e58:	4b2b      	ldr	r3, [pc, #172]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	4928      	ldr	r1, [pc, #160]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e6a:	4b27      	ldr	r3, [pc, #156]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e76:	4b24      	ldr	r3, [pc, #144]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e7a:	4b24      	ldr	r3, [pc, #144]	@ (8004f0c <RCCEx_PLL3_Config+0x160>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	69d2      	ldr	r2, [r2, #28]
 8004e82:	00d2      	lsls	r2, r2, #3
 8004e84:	4920      	ldr	r1, [pc, #128]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d106      	bne.n	8004eaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	4a19      	ldr	r2, [pc, #100]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ea8:	e00f      	b.n	8004eca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d106      	bne.n	8004ebe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004eb0:	4b15      	ldr	r3, [pc, #84]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb4:	4a14      	ldr	r2, [pc, #80]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ebc:	e005      	b.n	8004eca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ebe:	4b12      	ldr	r3, [pc, #72]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a11      	ldr	r2, [pc, #68]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eca:	4b0f      	ldr	r3, [pc, #60]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a0e      	ldr	r2, [pc, #56]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed6:	f7fc f95d 	bl	8001194 <HAL_GetTick>
 8004eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004edc:	e008      	b.n	8004ef0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ede:	f7fc f959 	bl	8001194 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef0:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	ffff0007 	.word	0xffff0007

08004f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e042      	b.n	8004fa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fb fedf 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2224      	movs	r2, #36	@ 0x24
 8004f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fd90 	bl	8005a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f825 	bl	8004fb0 <UART_SetConfig>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e01b      	b.n	8004fa8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fe0f 	bl	8005bc4 <UART_CheckIdleState>
 8004fa6:	4603      	mov	r3, r0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb4:	b092      	sub	sp, #72	@ 0x48
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4bbe      	ldr	r3, [pc, #760]	@ (80052d8 <UART_SetConfig+0x328>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4ab3      	ldr	r2, [pc, #716]	@ (80052dc <UART_SetConfig+0x32c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005018:	4313      	orrs	r3, r2
 800501a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	4baf      	ldr	r3, [pc, #700]	@ (80052e0 <UART_SetConfig+0x330>)
 8005024:	4013      	ands	r3, r2
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800502c:	430b      	orrs	r3, r1
 800502e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	f023 010f 	bic.w	r1, r3, #15
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4aa6      	ldr	r2, [pc, #664]	@ (80052e4 <UART_SetConfig+0x334>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d177      	bne.n	8005140 <UART_SetConfig+0x190>
 8005050:	4ba5      	ldr	r3, [pc, #660]	@ (80052e8 <UART_SetConfig+0x338>)
 8005052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005054:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005058:	2b28      	cmp	r3, #40	@ 0x28
 800505a:	d86d      	bhi.n	8005138 <UART_SetConfig+0x188>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <UART_SetConfig+0xb4>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005109 	.word	0x08005109
 8005068:	08005139 	.word	0x08005139
 800506c:	08005139 	.word	0x08005139
 8005070:	08005139 	.word	0x08005139
 8005074:	08005139 	.word	0x08005139
 8005078:	08005139 	.word	0x08005139
 800507c:	08005139 	.word	0x08005139
 8005080:	08005139 	.word	0x08005139
 8005084:	08005111 	.word	0x08005111
 8005088:	08005139 	.word	0x08005139
 800508c:	08005139 	.word	0x08005139
 8005090:	08005139 	.word	0x08005139
 8005094:	08005139 	.word	0x08005139
 8005098:	08005139 	.word	0x08005139
 800509c:	08005139 	.word	0x08005139
 80050a0:	08005139 	.word	0x08005139
 80050a4:	08005119 	.word	0x08005119
 80050a8:	08005139 	.word	0x08005139
 80050ac:	08005139 	.word	0x08005139
 80050b0:	08005139 	.word	0x08005139
 80050b4:	08005139 	.word	0x08005139
 80050b8:	08005139 	.word	0x08005139
 80050bc:	08005139 	.word	0x08005139
 80050c0:	08005139 	.word	0x08005139
 80050c4:	08005121 	.word	0x08005121
 80050c8:	08005139 	.word	0x08005139
 80050cc:	08005139 	.word	0x08005139
 80050d0:	08005139 	.word	0x08005139
 80050d4:	08005139 	.word	0x08005139
 80050d8:	08005139 	.word	0x08005139
 80050dc:	08005139 	.word	0x08005139
 80050e0:	08005139 	.word	0x08005139
 80050e4:	08005129 	.word	0x08005129
 80050e8:	08005139 	.word	0x08005139
 80050ec:	08005139 	.word	0x08005139
 80050f0:	08005139 	.word	0x08005139
 80050f4:	08005139 	.word	0x08005139
 80050f8:	08005139 	.word	0x08005139
 80050fc:	08005139 	.word	0x08005139
 8005100:	08005139 	.word	0x08005139
 8005104:	08005131 	.word	0x08005131
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e222      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e21e      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e21a      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e216      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005128:	2320      	movs	r3, #32
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e212      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005130:	2340      	movs	r3, #64	@ 0x40
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005136:	e20e      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005138:	2380      	movs	r3, #128	@ 0x80
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e20a      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a69      	ldr	r2, [pc, #420]	@ (80052ec <UART_SetConfig+0x33c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d130      	bne.n	80051ac <UART_SetConfig+0x1fc>
 800514a:	4b67      	ldr	r3, [pc, #412]	@ (80052e8 <UART_SetConfig+0x338>)
 800514c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	2b05      	cmp	r3, #5
 8005154:	d826      	bhi.n	80051a4 <UART_SetConfig+0x1f4>
 8005156:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <UART_SetConfig+0x1ac>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005175 	.word	0x08005175
 8005160:	0800517d 	.word	0x0800517d
 8005164:	08005185 	.word	0x08005185
 8005168:	0800518d 	.word	0x0800518d
 800516c:	08005195 	.word	0x08005195
 8005170:	0800519d 	.word	0x0800519d
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e1ec      	b.n	8005556 <UART_SetConfig+0x5a6>
 800517c:	2304      	movs	r3, #4
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005182:	e1e8      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005184:	2308      	movs	r3, #8
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518a:	e1e4      	b.n	8005556 <UART_SetConfig+0x5a6>
 800518c:	2310      	movs	r3, #16
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005192:	e1e0      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005194:	2320      	movs	r3, #32
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519a:	e1dc      	b.n	8005556 <UART_SetConfig+0x5a6>
 800519c:	2340      	movs	r3, #64	@ 0x40
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a2:	e1d8      	b.n	8005556 <UART_SetConfig+0x5a6>
 80051a4:	2380      	movs	r3, #128	@ 0x80
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e1d4      	b.n	8005556 <UART_SetConfig+0x5a6>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a4f      	ldr	r2, [pc, #316]	@ (80052f0 <UART_SetConfig+0x340>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d130      	bne.n	8005218 <UART_SetConfig+0x268>
 80051b6:	4b4c      	ldr	r3, [pc, #304]	@ (80052e8 <UART_SetConfig+0x338>)
 80051b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d826      	bhi.n	8005210 <UART_SetConfig+0x260>
 80051c2:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <UART_SetConfig+0x218>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051e1 	.word	0x080051e1
 80051cc:	080051e9 	.word	0x080051e9
 80051d0:	080051f1 	.word	0x080051f1
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005201 	.word	0x08005201
 80051dc:	08005209 	.word	0x08005209
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e6:	e1b6      	b.n	8005556 <UART_SetConfig+0x5a6>
 80051e8:	2304      	movs	r3, #4
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e1b2      	b.n	8005556 <UART_SetConfig+0x5a6>
 80051f0:	2308      	movs	r3, #8
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f6:	e1ae      	b.n	8005556 <UART_SetConfig+0x5a6>
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fe:	e1aa      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005200:	2320      	movs	r3, #32
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005206:	e1a6      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005208:	2340      	movs	r3, #64	@ 0x40
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520e:	e1a2      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005210:	2380      	movs	r3, #128	@ 0x80
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e19e      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a35      	ldr	r2, [pc, #212]	@ (80052f4 <UART_SetConfig+0x344>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d130      	bne.n	8005284 <UART_SetConfig+0x2d4>
 8005222:	4b31      	ldr	r3, [pc, #196]	@ (80052e8 <UART_SetConfig+0x338>)
 8005224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b05      	cmp	r3, #5
 800522c:	d826      	bhi.n	800527c <UART_SetConfig+0x2cc>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <UART_SetConfig+0x284>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	0800524d 	.word	0x0800524d
 8005238:	08005255 	.word	0x08005255
 800523c:	0800525d 	.word	0x0800525d
 8005240:	08005265 	.word	0x08005265
 8005244:	0800526d 	.word	0x0800526d
 8005248:	08005275 	.word	0x08005275
 800524c:	2300      	movs	r3, #0
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e180      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005254:	2304      	movs	r3, #4
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e17c      	b.n	8005556 <UART_SetConfig+0x5a6>
 800525c:	2308      	movs	r3, #8
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e178      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005264:	2310      	movs	r3, #16
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526a:	e174      	b.n	8005556 <UART_SetConfig+0x5a6>
 800526c:	2320      	movs	r3, #32
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005272:	e170      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005274:	2340      	movs	r3, #64	@ 0x40
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527a:	e16c      	b.n	8005556 <UART_SetConfig+0x5a6>
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005282:	e168      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1b      	ldr	r2, [pc, #108]	@ (80052f8 <UART_SetConfig+0x348>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d142      	bne.n	8005314 <UART_SetConfig+0x364>
 800528e:	4b16      	ldr	r3, [pc, #88]	@ (80052e8 <UART_SetConfig+0x338>)
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b05      	cmp	r3, #5
 8005298:	d838      	bhi.n	800530c <UART_SetConfig+0x35c>
 800529a:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <UART_SetConfig+0x2f0>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052b9 	.word	0x080052b9
 80052a4:	080052c1 	.word	0x080052c1
 80052a8:	080052c9 	.word	0x080052c9
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052fd 	.word	0x080052fd
 80052b4:	08005305 	.word	0x08005305
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e14a      	b.n	8005556 <UART_SetConfig+0x5a6>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e146      	b.n	8005556 <UART_SetConfig+0x5a6>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e142      	b.n	8005556 <UART_SetConfig+0x5a6>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e13e      	b.n	8005556 <UART_SetConfig+0x5a6>
 80052d8:	cfff69f3 	.word	0xcfff69f3
 80052dc:	58000c00 	.word	0x58000c00
 80052e0:	11fff4ff 	.word	0x11fff4ff
 80052e4:	40011000 	.word	0x40011000
 80052e8:	58024400 	.word	0x58024400
 80052ec:	40004400 	.word	0x40004400
 80052f0:	40004800 	.word	0x40004800
 80052f4:	40004c00 	.word	0x40004c00
 80052f8:	40005000 	.word	0x40005000
 80052fc:	2320      	movs	r3, #32
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e128      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005304:	2340      	movs	r3, #64	@ 0x40
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e124      	b.n	8005556 <UART_SetConfig+0x5a6>
 800530c:	2380      	movs	r3, #128	@ 0x80
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e120      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4acb      	ldr	r2, [pc, #812]	@ (8005648 <UART_SetConfig+0x698>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d176      	bne.n	800540c <UART_SetConfig+0x45c>
 800531e:	4bcb      	ldr	r3, [pc, #812]	@ (800564c <UART_SetConfig+0x69c>)
 8005320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005326:	2b28      	cmp	r3, #40	@ 0x28
 8005328:	d86c      	bhi.n	8005404 <UART_SetConfig+0x454>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <UART_SetConfig+0x380>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	080053d5 	.word	0x080053d5
 8005334:	08005405 	.word	0x08005405
 8005338:	08005405 	.word	0x08005405
 800533c:	08005405 	.word	0x08005405
 8005340:	08005405 	.word	0x08005405
 8005344:	08005405 	.word	0x08005405
 8005348:	08005405 	.word	0x08005405
 800534c:	08005405 	.word	0x08005405
 8005350:	080053dd 	.word	0x080053dd
 8005354:	08005405 	.word	0x08005405
 8005358:	08005405 	.word	0x08005405
 800535c:	08005405 	.word	0x08005405
 8005360:	08005405 	.word	0x08005405
 8005364:	08005405 	.word	0x08005405
 8005368:	08005405 	.word	0x08005405
 800536c:	08005405 	.word	0x08005405
 8005370:	080053e5 	.word	0x080053e5
 8005374:	08005405 	.word	0x08005405
 8005378:	08005405 	.word	0x08005405
 800537c:	08005405 	.word	0x08005405
 8005380:	08005405 	.word	0x08005405
 8005384:	08005405 	.word	0x08005405
 8005388:	08005405 	.word	0x08005405
 800538c:	08005405 	.word	0x08005405
 8005390:	080053ed 	.word	0x080053ed
 8005394:	08005405 	.word	0x08005405
 8005398:	08005405 	.word	0x08005405
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005405 	.word	0x08005405
 80053a4:	08005405 	.word	0x08005405
 80053a8:	08005405 	.word	0x08005405
 80053ac:	08005405 	.word	0x08005405
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005405 	.word	0x08005405
 80053bc:	08005405 	.word	0x08005405
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005405 	.word	0x08005405
 80053c8:	08005405 	.word	0x08005405
 80053cc:	08005405 	.word	0x08005405
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e0bc      	b.n	8005556 <UART_SetConfig+0x5a6>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e0b8      	b.n	8005556 <UART_SetConfig+0x5a6>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e0b4      	b.n	8005556 <UART_SetConfig+0x5a6>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e0b0      	b.n	8005556 <UART_SetConfig+0x5a6>
 80053f4:	2320      	movs	r3, #32
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e0ac      	b.n	8005556 <UART_SetConfig+0x5a6>
 80053fc:	2340      	movs	r3, #64	@ 0x40
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e0a8      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e0a4      	b.n	8005556 <UART_SetConfig+0x5a6>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a8f      	ldr	r2, [pc, #572]	@ (8005650 <UART_SetConfig+0x6a0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d130      	bne.n	8005478 <UART_SetConfig+0x4c8>
 8005416:	4b8d      	ldr	r3, [pc, #564]	@ (800564c <UART_SetConfig+0x69c>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b05      	cmp	r3, #5
 8005420:	d826      	bhi.n	8005470 <UART_SetConfig+0x4c0>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <UART_SetConfig+0x478>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	08005441 	.word	0x08005441
 800542c:	08005449 	.word	0x08005449
 8005430:	08005451 	.word	0x08005451
 8005434:	08005459 	.word	0x08005459
 8005438:	08005461 	.word	0x08005461
 800543c:	08005469 	.word	0x08005469
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e086      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005448:	2304      	movs	r3, #4
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e082      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005450:	2308      	movs	r3, #8
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e07e      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005458:	2310      	movs	r3, #16
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e07a      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005460:	2320      	movs	r3, #32
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e076      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005468:	2340      	movs	r3, #64	@ 0x40
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e072      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e06e      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a75      	ldr	r2, [pc, #468]	@ (8005654 <UART_SetConfig+0x6a4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d130      	bne.n	80054e4 <UART_SetConfig+0x534>
 8005482:	4b72      	ldr	r3, [pc, #456]	@ (800564c <UART_SetConfig+0x69c>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b05      	cmp	r3, #5
 800548c:	d826      	bhi.n	80054dc <UART_SetConfig+0x52c>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <UART_SetConfig+0x4e4>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054bd 	.word	0x080054bd
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e050      	b.n	8005556 <UART_SetConfig+0x5a6>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e04c      	b.n	8005556 <UART_SetConfig+0x5a6>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e048      	b.n	8005556 <UART_SetConfig+0x5a6>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e044      	b.n	8005556 <UART_SetConfig+0x5a6>
 80054cc:	2320      	movs	r3, #32
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e040      	b.n	8005556 <UART_SetConfig+0x5a6>
 80054d4:	2340      	movs	r3, #64	@ 0x40
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e03c      	b.n	8005556 <UART_SetConfig+0x5a6>
 80054dc:	2380      	movs	r3, #128	@ 0x80
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e038      	b.n	8005556 <UART_SetConfig+0x5a6>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005658 <UART_SetConfig+0x6a8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d130      	bne.n	8005550 <UART_SetConfig+0x5a0>
 80054ee:	4b57      	ldr	r3, [pc, #348]	@ (800564c <UART_SetConfig+0x69c>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d826      	bhi.n	8005548 <UART_SetConfig+0x598>
 80054fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <UART_SetConfig+0x550>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005519 	.word	0x08005519
 8005504:	08005521 	.word	0x08005521
 8005508:	08005529 	.word	0x08005529
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	2302      	movs	r3, #2
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e01a      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e016      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e012      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e00e      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005538:	2320      	movs	r3, #32
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e00a      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005540:	2340      	movs	r3, #64	@ 0x40
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e006      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005548:	2380      	movs	r3, #128	@ 0x80
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e002      	b.n	8005556 <UART_SetConfig+0x5a6>
 8005550:	2380      	movs	r3, #128	@ 0x80
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a3f      	ldr	r2, [pc, #252]	@ (8005658 <UART_SetConfig+0x6a8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	f040 80f8 	bne.w	8005752 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005562:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005566:	2b20      	cmp	r3, #32
 8005568:	dc46      	bgt.n	80055f8 <UART_SetConfig+0x648>
 800556a:	2b02      	cmp	r3, #2
 800556c:	f2c0 8082 	blt.w	8005674 <UART_SetConfig+0x6c4>
 8005570:	3b02      	subs	r3, #2
 8005572:	2b1e      	cmp	r3, #30
 8005574:	d87e      	bhi.n	8005674 <UART_SetConfig+0x6c4>
 8005576:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <UART_SetConfig+0x5cc>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	080055ff 	.word	0x080055ff
 8005580:	08005675 	.word	0x08005675
 8005584:	08005607 	.word	0x08005607
 8005588:	08005675 	.word	0x08005675
 800558c:	08005675 	.word	0x08005675
 8005590:	08005675 	.word	0x08005675
 8005594:	08005617 	.word	0x08005617
 8005598:	08005675 	.word	0x08005675
 800559c:	08005675 	.word	0x08005675
 80055a0:	08005675 	.word	0x08005675
 80055a4:	08005675 	.word	0x08005675
 80055a8:	08005675 	.word	0x08005675
 80055ac:	08005675 	.word	0x08005675
 80055b0:	08005675 	.word	0x08005675
 80055b4:	08005627 	.word	0x08005627
 80055b8:	08005675 	.word	0x08005675
 80055bc:	08005675 	.word	0x08005675
 80055c0:	08005675 	.word	0x08005675
 80055c4:	08005675 	.word	0x08005675
 80055c8:	08005675 	.word	0x08005675
 80055cc:	08005675 	.word	0x08005675
 80055d0:	08005675 	.word	0x08005675
 80055d4:	08005675 	.word	0x08005675
 80055d8:	08005675 	.word	0x08005675
 80055dc:	08005675 	.word	0x08005675
 80055e0:	08005675 	.word	0x08005675
 80055e4:	08005675 	.word	0x08005675
 80055e8:	08005675 	.word	0x08005675
 80055ec:	08005675 	.word	0x08005675
 80055f0:	08005675 	.word	0x08005675
 80055f4:	08005667 	.word	0x08005667
 80055f8:	2b40      	cmp	r3, #64	@ 0x40
 80055fa:	d037      	beq.n	800566c <UART_SetConfig+0x6bc>
 80055fc:	e03a      	b.n	8005674 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055fe:	f7ff f865 	bl	80046cc <HAL_RCCEx_GetD3PCLK1Freq>
 8005602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005604:	e03c      	b.n	8005680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f874 	bl	80046f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005614:	e034      	b.n	8005680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005616:	f107 0318 	add.w	r3, r7, #24
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff f9c0 	bl	80049a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005624:	e02c      	b.n	8005680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005626:	4b09      	ldr	r3, [pc, #36]	@ (800564c <UART_SetConfig+0x69c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005632:	4b06      	ldr	r3, [pc, #24]	@ (800564c <UART_SetConfig+0x69c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	4a07      	ldr	r2, [pc, #28]	@ (800565c <UART_SetConfig+0x6ac>)
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005644:	e01c      	b.n	8005680 <UART_SetConfig+0x6d0>
 8005646:	bf00      	nop
 8005648:	40011400 	.word	0x40011400
 800564c:	58024400 	.word	0x58024400
 8005650:	40007800 	.word	0x40007800
 8005654:	40007c00 	.word	0x40007c00
 8005658:	58000c00 	.word	0x58000c00
 800565c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005660:	4b9d      	ldr	r3, [pc, #628]	@ (80058d8 <UART_SetConfig+0x928>)
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005664:	e00c      	b.n	8005680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005666:	4b9d      	ldr	r3, [pc, #628]	@ (80058dc <UART_SetConfig+0x92c>)
 8005668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800566a:	e009      	b.n	8005680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005672:	e005      	b.n	8005680 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800567e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 81de 	beq.w	8005a44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	4a94      	ldr	r2, [pc, #592]	@ (80058e0 <UART_SetConfig+0x930>)
 800568e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005692:	461a      	mov	r2, r3
 8005694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005696:	fbb3 f3f2 	udiv	r3, r3, r2
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4413      	add	r3, r2
 80056a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d305      	bcc.n	80056b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d903      	bls.n	80056c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056be:	e1c1      	b.n	8005a44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c2:	2200      	movs	r2, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	60fa      	str	r2, [r7, #12]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	4a84      	ldr	r2, [pc, #528]	@ (80058e0 <UART_SetConfig+0x930>)
 80056ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2200      	movs	r2, #0
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056e2:	f7fa fdf9 	bl	80002d8 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	020b      	lsls	r3, r1, #8
 80056f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056fc:	0202      	lsls	r2, r0, #8
 80056fe:	6979      	ldr	r1, [r7, #20]
 8005700:	6849      	ldr	r1, [r1, #4]
 8005702:	0849      	lsrs	r1, r1, #1
 8005704:	2000      	movs	r0, #0
 8005706:	460c      	mov	r4, r1
 8005708:	4605      	mov	r5, r0
 800570a:	eb12 0804 	adds.w	r8, r2, r4
 800570e:	eb43 0905 	adc.w	r9, r3, r5
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	469a      	mov	sl, r3
 800571a:	4693      	mov	fp, r2
 800571c:	4652      	mov	r2, sl
 800571e:	465b      	mov	r3, fp
 8005720:	4640      	mov	r0, r8
 8005722:	4649      	mov	r1, r9
 8005724:	f7fa fdd8 	bl	80002d8 <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4613      	mov	r3, r2
 800572e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005736:	d308      	bcc.n	800574a <UART_SetConfig+0x79a>
 8005738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800573e:	d204      	bcs.n	800574a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005746:	60da      	str	r2, [r3, #12]
 8005748:	e17c      	b.n	8005a44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005750:	e178      	b.n	8005a44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575a:	f040 80c5 	bne.w	80058e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800575e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005762:	2b20      	cmp	r3, #32
 8005764:	dc48      	bgt.n	80057f8 <UART_SetConfig+0x848>
 8005766:	2b00      	cmp	r3, #0
 8005768:	db7b      	blt.n	8005862 <UART_SetConfig+0x8b2>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d879      	bhi.n	8005862 <UART_SetConfig+0x8b2>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <UART_SetConfig+0x7c4>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057ff 	.word	0x080057ff
 8005778:	08005807 	.word	0x08005807
 800577c:	08005863 	.word	0x08005863
 8005780:	08005863 	.word	0x08005863
 8005784:	0800580f 	.word	0x0800580f
 8005788:	08005863 	.word	0x08005863
 800578c:	08005863 	.word	0x08005863
 8005790:	08005863 	.word	0x08005863
 8005794:	0800581f 	.word	0x0800581f
 8005798:	08005863 	.word	0x08005863
 800579c:	08005863 	.word	0x08005863
 80057a0:	08005863 	.word	0x08005863
 80057a4:	08005863 	.word	0x08005863
 80057a8:	08005863 	.word	0x08005863
 80057ac:	08005863 	.word	0x08005863
 80057b0:	08005863 	.word	0x08005863
 80057b4:	0800582f 	.word	0x0800582f
 80057b8:	08005863 	.word	0x08005863
 80057bc:	08005863 	.word	0x08005863
 80057c0:	08005863 	.word	0x08005863
 80057c4:	08005863 	.word	0x08005863
 80057c8:	08005863 	.word	0x08005863
 80057cc:	08005863 	.word	0x08005863
 80057d0:	08005863 	.word	0x08005863
 80057d4:	08005863 	.word	0x08005863
 80057d8:	08005863 	.word	0x08005863
 80057dc:	08005863 	.word	0x08005863
 80057e0:	08005863 	.word	0x08005863
 80057e4:	08005863 	.word	0x08005863
 80057e8:	08005863 	.word	0x08005863
 80057ec:	08005863 	.word	0x08005863
 80057f0:	08005863 	.word	0x08005863
 80057f4:	08005855 	.word	0x08005855
 80057f8:	2b40      	cmp	r3, #64	@ 0x40
 80057fa:	d02e      	beq.n	800585a <UART_SetConfig+0x8aa>
 80057fc:	e031      	b.n	8005862 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fe:	f7fd fd2f 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8005802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005804:	e033      	b.n	800586e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005806:	f7fd fd41 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 800580a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800580c:	e02f      	b.n	800586e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800580e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe ff70 	bl	80046f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581c:	e027      	b.n	800586e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800581e:	f107 0318 	add.w	r3, r7, #24
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff f8bc 	bl	80049a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582c:	e01f      	b.n	800586e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800582e:	4b2d      	ldr	r3, [pc, #180]	@ (80058e4 <UART_SetConfig+0x934>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800583a:	4b2a      	ldr	r3, [pc, #168]	@ (80058e4 <UART_SetConfig+0x934>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	f003 0303 	and.w	r3, r3, #3
 8005844:	4a24      	ldr	r2, [pc, #144]	@ (80058d8 <UART_SetConfig+0x928>)
 8005846:	fa22 f303 	lsr.w	r3, r2, r3
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800584c:	e00f      	b.n	800586e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800584e:	4b22      	ldr	r3, [pc, #136]	@ (80058d8 <UART_SetConfig+0x928>)
 8005850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005852:	e00c      	b.n	800586e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005854:	4b21      	ldr	r3, [pc, #132]	@ (80058dc <UART_SetConfig+0x92c>)
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005858:	e009      	b.n	800586e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005860:	e005      	b.n	800586e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800586c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800586e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80e7 	beq.w	8005a44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	4a19      	ldr	r2, [pc, #100]	@ (80058e0 <UART_SetConfig+0x930>)
 800587c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005880:	461a      	mov	r2, r3
 8005882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005884:	fbb3 f3f2 	udiv	r3, r3, r2
 8005888:	005a      	lsls	r2, r3, #1
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	441a      	add	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d916      	bls.n	80058d0 <UART_SetConfig+0x920>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a8:	d212      	bcs.n	80058d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	b29a      	uxth	r2, r3
 80058c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058c2:	4313      	orrs	r3, r2
 80058c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	e0b9      	b.n	8005a44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058d6:	e0b5      	b.n	8005a44 <UART_SetConfig+0xa94>
 80058d8:	03d09000 	.word	0x03d09000
 80058dc:	003d0900 	.word	0x003d0900
 80058e0:	08006764 	.word	0x08006764
 80058e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	dc49      	bgt.n	8005984 <UART_SetConfig+0x9d4>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db7c      	blt.n	80059ee <UART_SetConfig+0xa3e>
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d87a      	bhi.n	80059ee <UART_SetConfig+0xa3e>
 80058f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <UART_SetConfig+0x950>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	0800598b 	.word	0x0800598b
 8005904:	08005993 	.word	0x08005993
 8005908:	080059ef 	.word	0x080059ef
 800590c:	080059ef 	.word	0x080059ef
 8005910:	0800599b 	.word	0x0800599b
 8005914:	080059ef 	.word	0x080059ef
 8005918:	080059ef 	.word	0x080059ef
 800591c:	080059ef 	.word	0x080059ef
 8005920:	080059ab 	.word	0x080059ab
 8005924:	080059ef 	.word	0x080059ef
 8005928:	080059ef 	.word	0x080059ef
 800592c:	080059ef 	.word	0x080059ef
 8005930:	080059ef 	.word	0x080059ef
 8005934:	080059ef 	.word	0x080059ef
 8005938:	080059ef 	.word	0x080059ef
 800593c:	080059ef 	.word	0x080059ef
 8005940:	080059bb 	.word	0x080059bb
 8005944:	080059ef 	.word	0x080059ef
 8005948:	080059ef 	.word	0x080059ef
 800594c:	080059ef 	.word	0x080059ef
 8005950:	080059ef 	.word	0x080059ef
 8005954:	080059ef 	.word	0x080059ef
 8005958:	080059ef 	.word	0x080059ef
 800595c:	080059ef 	.word	0x080059ef
 8005960:	080059ef 	.word	0x080059ef
 8005964:	080059ef 	.word	0x080059ef
 8005968:	080059ef 	.word	0x080059ef
 800596c:	080059ef 	.word	0x080059ef
 8005970:	080059ef 	.word	0x080059ef
 8005974:	080059ef 	.word	0x080059ef
 8005978:	080059ef 	.word	0x080059ef
 800597c:	080059ef 	.word	0x080059ef
 8005980:	080059e1 	.word	0x080059e1
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	d02e      	beq.n	80059e6 <UART_SetConfig+0xa36>
 8005988:	e031      	b.n	80059ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800598a:	f7fd fc69 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 800598e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005990:	e033      	b.n	80059fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005992:	f7fd fc7b 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8005996:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005998:	e02f      	b.n	80059fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800599a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe feaa 	bl	80046f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a8:	e027      	b.n	80059fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059aa:	f107 0318 	add.w	r3, r7, #24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fff6 	bl	80049a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b8:	e01f      	b.n	80059fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005a70 <UART_SetConfig+0xac0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a70 <UART_SetConfig+0xac0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	08db      	lsrs	r3, r3, #3
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	4a28      	ldr	r2, [pc, #160]	@ (8005a74 <UART_SetConfig+0xac4>)
 80059d2:	fa22 f303 	lsr.w	r3, r2, r3
 80059d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059d8:	e00f      	b.n	80059fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80059da:	4b26      	ldr	r3, [pc, #152]	@ (8005a74 <UART_SetConfig+0xac4>)
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059de:	e00c      	b.n	80059fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059e0:	4b25      	ldr	r3, [pc, #148]	@ (8005a78 <UART_SetConfig+0xac8>)
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e4:	e009      	b.n	80059fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ec:	e005      	b.n	80059fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059f8:	bf00      	nop
    }

    if (pclk != 0U)
 80059fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d021      	beq.n	8005a44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	4a1d      	ldr	r2, [pc, #116]	@ (8005a7c <UART_SetConfig+0xacc>)
 8005a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	441a      	add	r2, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	2b0f      	cmp	r3, #15
 8005a28:	d909      	bls.n	8005a3e <UART_SetConfig+0xa8e>
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a30:	d205      	bcs.n	8005a3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e002      	b.n	8005a44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2200      	movs	r2, #0
 8005a58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3748      	adds	r7, #72	@ 0x48
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6e:	bf00      	nop
 8005a70:	58024400 	.word	0x58024400
 8005a74:	03d09000 	.word	0x03d09000
 8005a78:	003d0900 	.word	0x003d0900
 8005a7c:	08006764 	.word	0x08006764

08005a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7e:	d10a      	bne.n	8005b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b098      	sub	sp, #96	@ 0x60
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bd4:	f7fb fade 	bl	8001194 <HAL_GetTick>
 8005bd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d12f      	bne.n	8005c48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f88e 	bl	8005d18 <UART_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d022      	beq.n	8005c48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e6      	bne.n	8005c02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e063      	b.n	8005d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d149      	bne.n	8005cea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f857 	bl	8005d18 <UART_WaitOnFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d03c      	beq.n	8005cea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e6      	bne.n	8005c70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cc2:	61fa      	str	r2, [r7, #28]
 8005cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	69b9      	ldr	r1, [r7, #24]
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e5      	bne.n	8005ca2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e012      	b.n	8005d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3758      	adds	r7, #88	@ 0x58
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d28:	e04f      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d30:	d04b      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d32:	f7fb fa2f 	bl	8001194 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d302      	bcc.n	8005d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e04e      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d037      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b80      	cmp	r3, #128	@ 0x80
 8005d5e:	d034      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d031      	beq.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d110      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f839 	bl	8005df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2208      	movs	r2, #8
 8005d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e029      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da4:	d111      	bne.n	8005dca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f81f 	bl	8005df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e00f      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d0a0      	beq.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b095      	sub	sp, #84	@ 0x54
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e6      	bne.n	8005dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3308      	adds	r3, #8
 8005e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <UART_EndRxTransfer+0xc8>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d118      	bne.n	8005e9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f023 0310 	bic.w	r3, r3, #16
 8005e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	613b      	str	r3, [r7, #16]
   return(result);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e6      	bne.n	8005e6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005eb0:	bf00      	nop
 8005eb2:	3754      	adds	r7, #84	@ 0x54
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	effffffe 	.word	0xeffffffe

08005ec0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e027      	b.n	8005f26 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2224      	movs	r2, #36	@ 0x24
 8005ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e02d      	b.n	8005fa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2224      	movs	r2, #36	@ 0x24
 8005f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f850 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e02d      	b.n	8006022 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2224      	movs	r2, #36	@ 0x24
 8005fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f812 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800604c:	e031      	b.n	80060b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800604e:	2310      	movs	r3, #16
 8006050:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006052:	2310      	movs	r3, #16
 8006054:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0e5b      	lsrs	r3, r3, #25
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	0f5b      	lsrs	r3, r3, #29
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	7b3a      	ldrb	r2, [r7, #12]
 800607a:	4911      	ldr	r1, [pc, #68]	@ (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800607c:	5c8a      	ldrb	r2, [r1, r2]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006082:	7b3a      	ldrb	r2, [r7, #12]
 8006084:	490f      	ldr	r1, [pc, #60]	@ (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006086:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006088:	fb93 f3f2 	sdiv	r3, r3, r2
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	7b7a      	ldrb	r2, [r7, #13]
 8006098:	4909      	ldr	r1, [pc, #36]	@ (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800609a:	5c8a      	ldrb	r2, [r1, r2]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060a0:	7b7a      	ldrb	r2, [r7, #13]
 80060a2:	4908      	ldr	r1, [pc, #32]	@ (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 80060a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	0800677c 	.word	0x0800677c
 80060c4:	08006784 	.word	0x08006784

080060c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060c8:	b084      	sub	sp, #16
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	f107 001c 	add.w	r0, r7, #28
 80060d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d121      	bne.n	8006126 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	4b2c      	ldr	r3, [pc, #176]	@ (80061a4 <USB_CoreInit+0xdc>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006106:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800610a:	2b01      	cmp	r3, #1
 800610c:	d105      	bne.n	800611a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 faaa 	bl	8006674 <USB_CoreReset>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]
 8006124:	e01b      	b.n	800615e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa9e 	bl	8006674 <USB_CoreReset>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800613c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006148:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006150:	e005      	b.n	800615e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800615e:	7fbb      	ldrb	r3, [r7, #30]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d116      	bne.n	8006192 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006168:	b29a      	uxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006172:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <USB_CoreInit+0xe0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f043 0206 	orr.w	r2, r3, #6
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f043 0220 	orr.w	r2, r3, #32
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800619e:	b004      	add	sp, #16
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	ffbdffbf 	.word	0xffbdffbf
 80061a8:	03ee0000 	.word	0x03ee0000

080061ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f023 0201 	bic.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d115      	bne.n	800621c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061fc:	200a      	movs	r0, #10
 80061fe:	f7fa ffd5 	bl	80011ac <HAL_Delay>
      ms += 10U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	330a      	adds	r3, #10
 8006206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fa25 	bl	8006658 <USB_GetMode>
 800620e:	4603      	mov	r3, r0
 8006210:	2b01      	cmp	r3, #1
 8006212:	d01e      	beq.n	8006252 <USB_SetCurrentMode+0x84>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2bc7      	cmp	r3, #199	@ 0xc7
 8006218:	d9f0      	bls.n	80061fc <USB_SetCurrentMode+0x2e>
 800621a:	e01a      	b.n	8006252 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d115      	bne.n	800624e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800622e:	200a      	movs	r0, #10
 8006230:	f7fa ffbc 	bl	80011ac <HAL_Delay>
      ms += 10U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	330a      	adds	r3, #10
 8006238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa0c 	bl	8006658 <USB_GetMode>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <USB_SetCurrentMode+0x84>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2bc7      	cmp	r3, #199	@ 0xc7
 800624a:	d9f0      	bls.n	800622e <USB_SetCurrentMode+0x60>
 800624c:	e001      	b.n	8006252 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e005      	b.n	800625e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2bc8      	cmp	r3, #200	@ 0xc8
 8006256:	d101      	bne.n	800625c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006268:	b084      	sub	sp, #16
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	e009      	b.n	800629c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3340      	adds	r3, #64	@ 0x40
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	2200      	movs	r2, #0
 8006294:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	3301      	adds	r3, #1
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b0e      	cmp	r3, #14
 80062a0:	d9f2      	bls.n	8006288 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11c      	bne.n	80062e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062b8:	f043 0302 	orr.w	r3, r3, #2
 80062bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e005      	b.n	80062f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062f6:	461a      	mov	r2, r3
 80062f8:	2300      	movs	r3, #0
 80062fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006300:	2b01      	cmp	r3, #1
 8006302:	d10d      	bne.n	8006320 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800630c:	2100      	movs	r1, #0
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f968 	bl	80065e4 <USB_SetDevSpeed>
 8006314:	e008      	b.n	8006328 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006316:	2101      	movs	r1, #1
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f963 	bl	80065e4 <USB_SetDevSpeed>
 800631e:	e003      	b.n	8006328 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006320:	2103      	movs	r1, #3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f95e 	bl	80065e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006328:	2110      	movs	r1, #16
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f8fa 	bl	8006524 <USB_FlushTxFifo>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f924 	bl	8006588 <USB_FlushRxFifo>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006350:	461a      	mov	r2, r3
 8006352:	2300      	movs	r3, #0
 8006354:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800635c:	461a      	mov	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006368:	461a      	mov	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	e043      	b.n	80063fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006386:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800638a:	d118      	bne.n	80063be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639e:	461a      	mov	r2, r3
 80063a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e013      	b.n	80063d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b4:	461a      	mov	r2, r3
 80063b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e008      	b.n	80063d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ca:	461a      	mov	r2, r3
 80063cc:	2300      	movs	r3, #0
 80063ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063dc:	461a      	mov	r2, r3
 80063de:	2300      	movs	r3, #0
 80063e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ee:	461a      	mov	r2, r3
 80063f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	3301      	adds	r3, #1
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006400:	461a      	mov	r2, r3
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4293      	cmp	r3, r2
 8006406:	d3b5      	bcc.n	8006374 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006408:	2300      	movs	r3, #0
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	e043      	b.n	8006496 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006424:	d118      	bne.n	8006458 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006438:	461a      	mov	r2, r3
 800643a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e013      	b.n	800646a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644e:	461a      	mov	r2, r3
 8006450:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	e008      	b.n	800646a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006476:	461a      	mov	r2, r3
 8006478:	2300      	movs	r3, #0
 800647a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006488:	461a      	mov	r2, r3
 800648a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800648e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	3301      	adds	r3, #1
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800649a:	461a      	mov	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4293      	cmp	r3, r2
 80064a0:	d3b5      	bcc.n	800640e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80064c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d105      	bne.n	80064d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f043 0210 	orr.w	r2, r3, #16
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	4b0f      	ldr	r3, [pc, #60]	@ (800651c <USB_DevInit+0x2b4>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f043 0208 	orr.w	r2, r3, #8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d105      	bne.n	800650c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	4b06      	ldr	r3, [pc, #24]	@ (8006520 <USB_DevInit+0x2b8>)
 8006506:	4313      	orrs	r3, r2
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006518:	b004      	add	sp, #16
 800651a:	4770      	bx	lr
 800651c:	803c3800 	.word	0x803c3800
 8006520:	40000004 	.word	0x40000004

08006524 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800653e:	d901      	bls.n	8006544 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e01b      	b.n	800657c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	daf2      	bge.n	8006532 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	019b      	lsls	r3, r3, #6
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006568:	d901      	bls.n	800656e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e006      	b.n	800657c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0320 	and.w	r3, r3, #32
 8006576:	2b20      	cmp	r3, #32
 8006578:	d0f0      	beq.n	800655c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065a0:	d901      	bls.n	80065a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e018      	b.n	80065d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	daf2      	bge.n	8006594 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2210      	movs	r2, #16
 80065b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065c4:	d901      	bls.n	80065ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e006      	b.n	80065d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d0f0      	beq.n	80065b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006604:	4313      	orrs	r3, r2
 8006606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006630:	f023 0303 	bic.w	r3, r3, #3
 8006634:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006644:	f043 0302 	orr.w	r3, r3, #2
 8006648:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0301 	and.w	r3, r3, #1
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3301      	adds	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800668c:	d901      	bls.n	8006692 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e01b      	b.n	80066ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	daf2      	bge.n	8006680 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f043 0201 	orr.w	r2, r3, #1
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066b6:	d901      	bls.n	80066bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e006      	b.n	80066ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d0f0      	beq.n	80066aa <USB_CoreReset+0x36>

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <memset>:
 80066d6:	4402      	add	r2, r0
 80066d8:	4603      	mov	r3, r0
 80066da:	4293      	cmp	r3, r2
 80066dc:	d100      	bne.n	80066e0 <memset+0xa>
 80066de:	4770      	bx	lr
 80066e0:	f803 1b01 	strb.w	r1, [r3], #1
 80066e4:	e7f9      	b.n	80066da <memset+0x4>
	...

080066e8 <__libc_init_array>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006720 <__libc_init_array+0x38>)
 80066ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006724 <__libc_init_array+0x3c>)
 80066ee:	1b64      	subs	r4, r4, r5
 80066f0:	10a4      	asrs	r4, r4, #2
 80066f2:	2600      	movs	r6, #0
 80066f4:	42a6      	cmp	r6, r4
 80066f6:	d109      	bne.n	800670c <__libc_init_array+0x24>
 80066f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006728 <__libc_init_array+0x40>)
 80066fa:	4c0c      	ldr	r4, [pc, #48]	@ (800672c <__libc_init_array+0x44>)
 80066fc:	f000 f818 	bl	8006730 <_init>
 8006700:	1b64      	subs	r4, r4, r5
 8006702:	10a4      	asrs	r4, r4, #2
 8006704:	2600      	movs	r6, #0
 8006706:	42a6      	cmp	r6, r4
 8006708:	d105      	bne.n	8006716 <__libc_init_array+0x2e>
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006710:	4798      	blx	r3
 8006712:	3601      	adds	r6, #1
 8006714:	e7ee      	b.n	80066f4 <__libc_init_array+0xc>
 8006716:	f855 3b04 	ldr.w	r3, [r5], #4
 800671a:	4798      	blx	r3
 800671c:	3601      	adds	r6, #1
 800671e:	e7f2      	b.n	8006706 <__libc_init_array+0x1e>
 8006720:	08006794 	.word	0x08006794
 8006724:	08006794 	.word	0x08006794
 8006728:	08006794 	.word	0x08006794
 800672c:	08006798 	.word	0x08006798

08006730 <_init>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	bf00      	nop
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr

0800673c <_fini>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr
