
7segment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006848  08006848  00007848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800688c  0800688c  0000788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006898  08006898  00007898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800689c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080068ac  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800690c  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  240000d0  0800696c  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400075c  0800696c  0000875c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001807a  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c2  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00022a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf0  00000000  00000000  000239b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003731d  00000000  00000000  000245a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001470d  00000000  00000000  0005b8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e263  00000000  00000000  0006ffca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ce22d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  001ce270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001d2410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006830 	.word	0x08006830

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006830 	.word	0x08006830

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <displayNumber>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Funtion for print the correct number
void displayNumber(uint8_t number) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    if (number > 9) return;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b09      	cmp	r3, #9
 80005d6:	d84f      	bhi.n	8000678 <displayNumber+0xb0>

    //In segments is right segment combination for the number.
    uint8_t segments = segmentMap[number];
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <displayNumber+0xb8>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	73fb      	strb	r3, [r7, #15]
    /*
     * (segments & 0x01) 	- mask
     * ? GPIO_PIN_SET		- if (segments & 0x01) is True (first bit in segments is 1) set pin to GPIO_PIN_SET
     * 						- if (segments & 0x01) is False (first bit in segments is 0) set pin to GPIO_PIN_RESET
     */
    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_A_PIN, (segments & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	2140      	movs	r1, #64	@ 0x40
 80005ec:	4825      	ldr	r0, [pc, #148]	@ (8000684 <displayNumber+0xbc>)
 80005ee:	f001 fd4f 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_B_PIN, (segments & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	105b      	asrs	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	2108      	movs	r1, #8
 8000602:	4820      	ldr	r0, [pc, #128]	@ (8000684 <displayNumber+0xbc>)
 8000604:	f001 fd44 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_C_PIN, (segments & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	109b      	asrs	r3, r3, #2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	2110      	movs	r1, #16
 8000618:	481a      	ldr	r0, [pc, #104]	@ (8000684 <displayNumber+0xbc>)
 800061a:	f001 fd39 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_E, SEG_D_PIN, (segments & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	10db      	asrs	r3, r3, #3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	2104      	movs	r1, #4
 800062e:	4815      	ldr	r0, [pc, #84]	@ (8000684 <displayNumber+0xbc>)
 8000630:	f001 fd2e 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_D, SEG_E_PIN, (segments & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	111b      	asrs	r3, r3, #4
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	2108      	movs	r1, #8
 8000644:	4810      	ldr	r0, [pc, #64]	@ (8000688 <displayNumber+0xc0>)
 8000646:	f001 fd23 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_D, SEG_F_PIN, (segments & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	115b      	asrs	r3, r3, #5
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	2110      	movs	r1, #16
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <displayNumber+0xc0>)
 800065c:	f001 fd18 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_GPIO_PORT_D, SEG_G_PIN, (segments & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	119b      	asrs	r3, r3, #6
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	2120      	movs	r1, #32
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <displayNumber+0xc0>)
 8000672:	f001 fd0d 	bl	8002090 <HAL_GPIO_WritePin>
 8000676:	e000      	b.n	800067a <displayNumber+0xb2>
    if (number > 9) return;
 8000678:	bf00      	nop
}
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08006848 	.word	0x08006848
 8000684:	58021000 	.word	0x58021000
 8000688:	58020c00 	.word	0x58020c00

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fd34 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f816 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f95e 	bl	8000958 <MX_GPIO_Init>
  MX_ETH_Init();
 800069c:	f000 f892 	bl	80007c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 f8dc 	bl	800085c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a4:	f000 f926 	bl	80008f4 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  displayNumber(i);
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <main+0x34>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff8b 	bl	80005c8 <displayNumber>
	  HAL_Delay(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006b6:	f000 fdb3 	bl	8001220 <HAL_Delay>
	  displayNumber(i);
 80006ba:	bf00      	nop
 80006bc:	e7f4      	b.n	80006a8 <main+0x1c>
 80006be:	bf00      	nop
 80006c0:	240000ec 	.word	0x240000ec

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	@ 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	224c      	movs	r2, #76	@ 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 f87f 	bl	80067d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 f879 	bl	80067d6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f001 fe37 	bl	8002358 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b33      	ldr	r3, [pc, #204]	@ (80007bc <SystemClock_Config+0xf8>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f2:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <SystemClock_Config+0xf8>)
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006fa:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <SystemClock_Config+0xf8>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <SystemClock_Config+0xfc>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a2c      	ldr	r2, [pc, #176]	@ (80007c0 <SystemClock_Config+0xfc>)
 800070e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <SystemClock_Config+0xfc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000720:	bf00      	nop
 8000722:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <SystemClock_Config+0xfc>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800072a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800072e:	d1f8      	bne.n	8000722 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000730:	2303      	movs	r3, #3
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000734:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800073a:	2301      	movs	r3, #1
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	2340      	movs	r3, #64	@ 0x40
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	2302      	movs	r3, #2
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800074e:	2318      	movs	r3, #24
 8000750:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000756:	2304      	movs	r3, #4
 8000758:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800075e:	230c      	movs	r3, #12
 8000760:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000762:	2300      	movs	r3, #0
 8000764:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fe3c 	bl	80023ec <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800077a:	f000 f9fb 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	233f      	movs	r3, #63	@ 0x3f
 8000780:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2101      	movs	r1, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fa7c 	bl	8002ca0 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007ae:	f000 f9e1 	bl	8000b74 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3770      	adds	r7, #112	@ 0x70
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	58000400 	.word	0x58000400
 80007c0:	58024800 	.word	0x58024800

080007c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <MX_ETH_Init+0x80>)
 80007ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000848 <MX_ETH_Init+0x84>)
 80007cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_ETH_Init+0x88>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_ETH_Init+0x88>)
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_ETH_Init+0x88>)
 80007dc:	22e1      	movs	r2, #225	@ 0xe1
 80007de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_ETH_Init+0x88>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007e6:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_ETH_Init+0x88>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ETH_Init+0x88>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_ETH_Init+0x80>)
 80007f4:	4a15      	ldr	r2, [pc, #84]	@ (800084c <MX_ETH_Init+0x88>)
 80007f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_ETH_Init+0x80>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_ETH_Init+0x80>)
 8000800:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <MX_ETH_Init+0x8c>)
 8000802:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_ETH_Init+0x80>)
 8000806:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <MX_ETH_Init+0x90>)
 8000808:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_ETH_Init+0x80>)
 800080c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000810:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000812:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_ETH_Init+0x80>)
 8000814:	f000 fe58 	bl	80014c8 <HAL_ETH_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800081e:	f000 f9a9 	bl	8000b74 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000822:	2238      	movs	r2, #56	@ 0x38
 8000824:	2100      	movs	r1, #0
 8000826:	480c      	ldr	r0, [pc, #48]	@ (8000858 <MX_ETH_Init+0x94>)
 8000828:	f005 ffd5 	bl	80067d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_ETH_Init+0x94>)
 800082e:	2221      	movs	r2, #33	@ 0x21
 8000830:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_ETH_Init+0x94>)
 8000834:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000838:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_ETH_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	24000128 	.word	0x24000128
 8000848:	40028000 	.word	0x40028000
 800084c:	24000750 	.word	0x24000750
 8000850:	24000070 	.word	0x24000070
 8000854:	24000010 	.word	0x24000010
 8000858:	240000f0 	.word	0x240000f0

0800085c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000862:	4a23      	ldr	r2, [pc, #140]	@ (80008f0 <MX_USART3_UART_Init+0x94>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a4:	4811      	ldr	r0, [pc, #68]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008a6:	f004 fbb3 	bl	8005010 <HAL_UART_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f960 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008b8:	f005 fbbb 	bl	8006032 <HAL_UARTEx_SetTxFifoThreshold>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f957 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008ca:	f005 fbf0 	bl	80060ae <HAL_UARTEx_SetRxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f94e 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_USART3_UART_Init+0x90>)
 80008da:	f005 fb71 	bl	8005fc0 <HAL_UARTEx_DisableFifoMode>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f946 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	240001d8 	.word	0x240001d8
 80008f0:	40004800 	.word	0x40004800

080008f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fa:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000900:	2209      	movs	r2, #9
 8000902:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	2202      	movs	r2, #2
 8000908:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000912:	2202      	movs	r2, #2
 8000914:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000918:	2201      	movs	r2, #1
 800091a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092a:	2201      	movs	r2, #1
 800092c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000930:	2201      	movs	r2, #1
 8000932:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093c:	f001 fbdb 	bl	80020f6 <HAL_PCD_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000946:	f000 f915 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2400026c 	.word	0x2400026c
 8000954:	40080000 	.word	0x40080000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	@ 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	4a68      	ldr	r2, [pc, #416]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097e:	4b66      	ldr	r3, [pc, #408]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b62      	ldr	r3, [pc, #392]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	4a61      	ldr	r2, [pc, #388]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099c:	4b5e      	ldr	r3, [pc, #376]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a59      	ldr	r2, [pc, #356]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b57      	ldr	r3, [pc, #348]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b53      	ldr	r3, [pc, #332]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	4a52      	ldr	r2, [pc, #328]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d8:	4b4f      	ldr	r3, [pc, #316]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	4a4a      	ldr	r2, [pc, #296]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f6:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a04:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	4a43      	ldr	r2, [pc, #268]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a14:	4b40      	ldr	r3, [pc, #256]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a22:	4b3d      	ldr	r3, [pc, #244]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	4a3b      	ldr	r2, [pc, #236]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a32:	4b39      	ldr	r3, [pc, #228]	@ (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PIN_D_Pin|PIN_B_Pin|PIN_C_Pin|PIN_DP_Pin
 8000a40:	2200      	movs	r2, #0
 8000a42:	217e      	movs	r1, #126	@ 0x7e
 8000a44:	4835      	ldr	r0, [pc, #212]	@ (8000b1c <MX_GPIO_Init+0x1c4>)
 8000a46:	f001 fb23 	bl	8002090 <HAL_GPIO_WritePin>
                          |PIN_A_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a50:	4833      	ldr	r0, [pc, #204]	@ (8000b20 <MX_GPIO_Init+0x1c8>)
 8000a52:	f001 fb1d 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PIN_E_Pin|PIN_F_Pin|PIN_G_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000a5c:	4831      	ldr	r0, [pc, #196]	@ (8000b24 <MX_GPIO_Init+0x1cc>)
 8000a5e:	f001 fb17 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_D_Pin PIN_B_Pin PIN_C_Pin PIN_DP_Pin
                           PIN_A_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PIN_D_Pin|PIN_B_Pin|PIN_C_Pin|PIN_DP_Pin
 8000a62:	237e      	movs	r3, #126	@ 0x7e
 8000a64:	61fb      	str	r3, [r7, #28]
                          |PIN_A_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4828      	ldr	r0, [pc, #160]	@ (8000b1c <MX_GPIO_Init+0x1c4>)
 8000a7a:	f001 f959 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4824      	ldr	r0, [pc, #144]	@ (8000b28 <MX_GPIO_Init+0x1d0>)
 8000a96:	f001 f94b 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a9a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481b      	ldr	r0, [pc, #108]	@ (8000b20 <MX_GPIO_Init+0x1c8>)
 8000ab4:	f001 f93c 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PIN_E_Pin PIN_F_Pin PIN_G_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|PIN_E_Pin|PIN_F_Pin|PIN_G_Pin;
 8000ab8:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4814      	ldr	r0, [pc, #80]	@ (8000b24 <MX_GPIO_Init+0x1cc>)
 8000ad2:	f001 f92d 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ad6:	2380      	movs	r3, #128	@ 0x80
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ada:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4810      	ldr	r0, [pc, #64]	@ (8000b2c <MX_GPIO_Init+0x1d4>)
 8000aec:	f001 f920 	bl	8001d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2017      	movs	r0, #23
 8000af6:	f000 fcb2 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000afa:	2017      	movs	r0, #23
 8000afc:	f000 fcc9 	bl	8001492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2028      	movs	r0, #40	@ 0x28
 8000b06:	f000 fcaa 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b0a:	2028      	movs	r0, #40	@ 0x28
 8000b0c:	f000 fcc1 	bl	8001492 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	@ 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58021000 	.word	0x58021000
 8000b20:	58020400 	.word	0x58020400
 8000b24:	58020c00 	.word	0x58020c00
 8000b28:	58020800 	.word	0x58020800
 8000b2c:	58021800 	.word	0x58021800

08000b30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b40:	d10e      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x30>
  {
    if(i < 10)
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b09      	cmp	r3, #9
 8000b48:	d806      	bhi.n	8000b58 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	i++;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b54:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    __NOP();
  }
}
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_EXTI_Callback+0x32>
        i = 0;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
}
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_EXTI_Callback+0x32>
    __NOP();
 8000b60:	bf00      	nop
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	240000ec 	.word	0x240000ec

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <Error_Handler+0x8>

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b8c:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x30>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_MspInit+0x30>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a59      	ldr	r2, [pc, #356]	@ (8000d38 <HAL_ETH_MspInit+0x184>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 80ab 	bne.w	8000d2e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bd8:	4b58      	ldr	r3, [pc, #352]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bde:	4a57      	ldr	r2, [pc, #348]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000be4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000be8:	4b54      	ldr	r3, [pc, #336]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bf2:	623b      	str	r3, [r7, #32]
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bf6:	4b51      	ldr	r3, [pc, #324]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bfc:	4a4f      	ldr	r2, [pc, #316]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c06:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c14:	4b49      	ldr	r3, [pc, #292]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c1a:	4a48      	ldr	r2, [pc, #288]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c24:	4b45      	ldr	r3, [pc, #276]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b42      	ldr	r3, [pc, #264]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	4a40      	ldr	r2, [pc, #256]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c42:	4b3e      	ldr	r3, [pc, #248]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b3a      	ldr	r3, [pc, #232]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	4a39      	ldr	r2, [pc, #228]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	4a31      	ldr	r2, [pc, #196]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	4a2a      	ldr	r2, [pc, #168]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <HAL_ETH_MspInit+0x188>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000caa:	2332      	movs	r3, #50	@ 0x32
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481e      	ldr	r0, [pc, #120]	@ (8000d40 <HAL_ETH_MspInit+0x18c>)
 8000cc6:	f001 f833 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cca:	2386      	movs	r3, #134	@ 0x86
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <HAL_ETH_MspInit+0x190>)
 8000ce6:	f001 f823 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfc:	230b      	movs	r3, #11
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <HAL_ETH_MspInit+0x194>)
 8000d08:	f001 f812 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d0c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <HAL_ETH_MspInit+0x198>)
 8000d2a:	f001 f801 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d2e:	bf00      	nop
 8000d30:	3738      	adds	r7, #56	@ 0x38
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40028000 	.word	0x40028000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020800 	.word	0x58020800
 8000d44:	58020000 	.word	0x58020000
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58021800 	.word	0x58021800

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0ba      	sub	sp, #232	@ 0xe8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	22c0      	movs	r2, #192	@ 0xc0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 fd30 	bl	80067d6 <memset>
  if(huart->Instance==USART3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a27      	ldr	r2, [pc, #156]	@ (8000e18 <HAL_UART_MspInit+0xc8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d146      	bne.n	8000e0e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d80:	f04f 0202 	mov.w	r2, #2
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fb0e 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000da2:	f7ff fee7 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dac:	4a1b      	ldr	r2, [pc, #108]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000de2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_UART_MspInit+0xd0>)
 8000e0a:	f000 ff91 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e0e:	bf00      	nop
 8000e10:	37e8      	adds	r7, #232	@ 0xe8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004800 	.word	0x40004800
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020c00 	.word	0x58020c00

08000e24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0ba      	sub	sp, #232	@ 0xe8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	22c0      	movs	r2, #192	@ 0xc0
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fcc6 	bl	80067d6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a30      	ldr	r2, [pc, #192]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d159      	bne.n	8000f08 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 faa3 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e78:	f7ff fe7c 	bl	8000b74 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e7c:	f001 faa6 	bl	80023cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e9e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000eb8:	230a      	movs	r3, #10
 8000eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <HAL_PCD_MspInit+0xf4>)
 8000ec6:	f000 ff33 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <HAL_PCD_MspInit+0xf4>)
 8000ee6:	f000 ff23 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000eec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef0:	4a08      	ldr	r2, [pc, #32]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000ef2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ef6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f08:	bf00      	nop
 8000f0a:	37e8      	adds	r7, #232	@ 0xe8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40080000 	.word	0x40080000
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020000 	.word	0x58020000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <NMI_Handler+0x4>

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <MemManage_Handler+0x4>

08000f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f72:	f000 f935 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 8000f7e:	2080      	movs	r0, #128	@ 0x80
 8000f80:	f001 f89f 	bl	80020c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f90:	f001 f897 	bl	80020c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b37      	ldr	r3, [pc, #220]	@ (800107c <SystemInit+0xe4>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a36      	ldr	r2, [pc, #216]	@ (800107c <SystemInit+0xe4>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fac:	4b34      	ldr	r3, [pc, #208]	@ (8001080 <SystemInit+0xe8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d807      	bhi.n	8000fc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb8:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <SystemInit+0xe8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001080 <SystemInit+0xe8>)
 8000fc2:	f043 0307 	orr.w	r3, r3, #7
 8000fc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <SystemInit+0xec>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8001084 <SystemInit+0xec>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <SystemInit+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <SystemInit+0xec>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4929      	ldr	r1, [pc, #164]	@ (8001084 <SystemInit+0xec>)
 8000fe0:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <SystemInit+0xf0>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <SystemInit+0xe8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff2:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <SystemInit+0xe8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 030f 	bic.w	r3, r3, #15
 8000ffa:	4a21      	ldr	r2, [pc, #132]	@ (8001080 <SystemInit+0xe8>)
 8000ffc:	f043 0307 	orr.w	r3, r3, #7
 8001000:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <SystemInit+0xec>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001008:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <SystemInit+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <SystemInit+0xec>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <SystemInit+0xec>)
 8001016:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <SystemInit+0xf4>)
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <SystemInit+0xec>)
 800101c:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <SystemInit+0xf8>)
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001020:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <SystemInit+0xec>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <SystemInit+0xfc>)
 8001024:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <SystemInit+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800102c:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <SystemInit+0xec>)
 800102e:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <SystemInit+0xfc>)
 8001030:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <SystemInit+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <SystemInit+0xec>)
 800103a:	4a16      	ldr	r2, [pc, #88]	@ (8001094 <SystemInit+0xfc>)
 800103c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <SystemInit+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <SystemInit+0xec>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <SystemInit+0xec>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800104e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <SystemInit+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <SystemInit+0x100>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <SystemInit+0x104>)
 800105c:	4013      	ands	r3, r2
 800105e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001062:	d202      	bcs.n	800106a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <SystemInit+0x108>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <SystemInit+0x10c>)
 800106c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001070:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	52002000 	.word	0x52002000
 8001084:	58024400 	.word	0x58024400
 8001088:	eaf6ed7f 	.word	0xeaf6ed7f
 800108c:	02020200 	.word	0x02020200
 8001090:	01ff0000 	.word	0x01ff0000
 8001094:	01010280 	.word	0x01010280
 8001098:	5c001000 	.word	0x5c001000
 800109c:	ffff0000 	.word	0xffff0000
 80010a0:	51008108 	.word	0x51008108
 80010a4:	52004000 	.word	0x52004000

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ac:	f7ff ff74 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	@ (80010e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f005 fb87 	bl	80067e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fad7 	bl	800068c <main>
  bx  lr
 80010de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010e8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010ec:	0800689c 	.word	0x0800689c
  ldr r2, =_sbss
 80010f0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80010f4:	2400075c 	.word	0x2400075c

080010f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC3_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f9a0 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001108:	f001 ff80 	bl	800300c <HAL_RCC_GetSysClockFreq>
 800110c:	4602      	mov	r2, r0
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_Init+0x68>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	4913      	ldr	r1, [pc, #76]	@ (8001168 <HAL_Init+0x6c>)
 800111a:	5ccb      	ldrb	r3, [r1, r3]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_Init+0x68>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <HAL_Init+0x6c>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <HAL_Init+0x70>)
 800113e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <HAL_Init+0x74>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f814 	bl	8001174 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e002      	b.n	800115c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff fd13 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	58024400 	.word	0x58024400
 8001168:	08006854 	.word	0x08006854
 800116c:	24000004 	.word	0x24000004
 8001170:	24000000 	.word	0x24000000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_InitTick+0x60>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e021      	b.n	80011cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <HAL_InitTick+0x64>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_InitTick+0x60>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f985 	bl	80014ae <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f94f 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <HAL_InitTick+0x68>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2400000c 	.word	0x2400000c
 80011d8:	24000000 	.word	0x24000000
 80011dc:	24000008 	.word	0x24000008

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2400000c 	.word	0x2400000c
 8001204:	24000758 	.word	0x24000758

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	24000758 	.word	0x24000758

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2400000c 	.word	0x2400000c

08001268 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <HAL_GetREVID+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0c1b      	lsrs	r3, r3, #16
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	5c001000 	.word	0x5c001000

08001280 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001290:	4904      	ldr	r1, [pc, #16]	@ (80012a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	58000400 	.word	0x58000400

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x40>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x40>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	05fa0000 	.word	0x05fa0000

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	@ (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	@ (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	@ (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	@ 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff8e 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff29 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff40 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff90 	bl	800139c <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5f 	bl	8001348 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff33 	bl	800130c <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa4 	bl	8001404 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0e3      	b.n	80016a2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d106      	bne.n	80014f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2223      	movs	r2, #35	@ 0x23
 80014e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fb61 	bl	8000bb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b6e      	ldr	r3, [pc, #440]	@ (80016ac <HAL_ETH_Init+0x1e4>)
 80014f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014f8:	4a6c      	ldr	r2, [pc, #432]	@ (80016ac <HAL_ETH_Init+0x1e4>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001502:	4b6a      	ldr	r3, [pc, #424]	@ (80016ac <HAL_ETH_Init+0x1e4>)
 8001504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7a1b      	ldrb	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff feb1 	bl	8001280 <HAL_SYSCFG_ETHInterfaceSelect>
 800151e:	e003      	b.n	8001528 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001520:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001524:	f7ff feac 	bl	8001280 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001528:	4b61      	ldr	r3, [pc, #388]	@ (80016b0 <HAL_ETH_Init+0x1e8>)
 800152a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001542:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001544:	f7ff fe60 	bl	8001208 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800154a:	e011      	b.n	8001570 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800154c:	f7ff fe5c 	bl	8001208 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800155a:	d909      	bls.n	8001570 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2204      	movs	r2, #4
 8001560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	22e0      	movs	r2, #224	@ 0xe0
 8001568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e098      	b.n	80016a2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e4      	bne.n	800154c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f89e 	bl	80016c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001588:	f001 feba 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800158c:	4603      	mov	r3, r0
 800158e:	4a49      	ldr	r2, [pc, #292]	@ (80016b4 <HAL_ETH_Init+0x1ec>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9a      	lsrs	r2, r3, #18
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3a01      	subs	r2, #1
 800159c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fa81 	bl	8001aa8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80015b2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015c2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	22e0      	movs	r2, #224	@ 0xe0
 80015de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e05d      	b.n	80016a2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HAL_ETH_Init+0x1f0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6952      	ldr	r2, [r2, #20]
 80015fa:	0051      	lsls	r1, r2, #1
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001606:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fae9 	bl	8001be2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fb2f 	bl	8001c74 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	3305      	adds	r3, #5
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	021a      	lsls	r2, r3, #8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	3303      	adds	r3, #3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	061a      	lsls	r2, r3, #24
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	3302      	adds	r3, #2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001654:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001662:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001664:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_ETH_Init+0x1f4>)
 8001676:	430b      	orrs	r3, r1
 8001678:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_ETH_Init+0x1f8>)
 800168a:	430b      	orrs	r3, r1
 800168c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2210      	movs	r2, #16
 800169c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	58024400 	.word	0x58024400
 80016b0:	58000400 	.word	0x58000400
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	ffff8001 	.word	0xffff8001
 80016bc:	0c020060 	.word	0x0c020060
 80016c0:	0c20c000 	.word	0x0c20c000

080016c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016de:	f001 fe0f 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 80016e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001750 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d804      	bhi.n	80016f6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e022      	b.n	800173c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	4a16      	ldr	r2, [pc, #88]	@ (8001754 <HAL_ETH_SetMDIOClockRange+0x90>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d204      	bcs.n	8001708 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e019      	b.n	800173c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4a13      	ldr	r2, [pc, #76]	@ (8001758 <HAL_ETH_SetMDIOClockRange+0x94>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d915      	bls.n	800173c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d804      	bhi.n	8001722 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e00c      	b.n	800173c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4a0e      	ldr	r2, [pc, #56]	@ (8001760 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d804      	bhi.n	8001734 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e003      	b.n	800173c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800173a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	02160ebf 	.word	0x02160ebf
 8001754:	03938700 	.word	0x03938700
 8001758:	05f5e0ff 	.word	0x05f5e0ff
 800175c:	08f0d17f 	.word	0x08f0d17f
 8001760:	0ee6b27f 	.word	0x0ee6b27f

08001764 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001776:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	791b      	ldrb	r3, [r3, #4]
 800177c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800177e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	7b1b      	ldrb	r3, [r3, #12]
 8001784:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001786:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	7b5b      	ldrb	r3, [r3, #13]
 800178c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800178e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	7b9b      	ldrb	r3, [r3, #14]
 8001794:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001796:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	7bdb      	ldrb	r3, [r3, #15]
 800179c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800179e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	7c12      	ldrb	r2, [r2, #16]
 80017a4:	2a00      	cmp	r2, #0
 80017a6:	d102      	bne.n	80017ae <ETH_SetMACConfig+0x4a>
 80017a8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017ac:	e000      	b.n	80017b0 <ETH_SetMACConfig+0x4c>
 80017ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	7c52      	ldrb	r2, [r2, #17]
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d102      	bne.n	80017c0 <ETH_SetMACConfig+0x5c>
 80017ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017be:	e000      	b.n	80017c2 <ETH_SetMACConfig+0x5e>
 80017c0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	7c9b      	ldrb	r3, [r3, #18]
 80017c8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017ca:	431a      	orrs	r2, r3
               macconf->Speed |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80017d0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80017d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	7f1b      	ldrb	r3, [r3, #28]
 80017dc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	7f5b      	ldrb	r3, [r3, #29]
 80017e4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	7f92      	ldrb	r2, [r2, #30]
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d102      	bne.n	80017f6 <ETH_SetMACConfig+0x92>
 80017f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f4:	e000      	b.n	80017f8 <ETH_SetMACConfig+0x94>
 80017f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7fdb      	ldrb	r3, [r3, #31]
 80017fe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001800:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001808:	2a00      	cmp	r2, #0
 800180a:	d102      	bne.n	8001812 <ETH_SetMACConfig+0xae>
 800180c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001810:	e000      	b.n	8001814 <ETH_SetMACConfig+0xb0>
 8001812:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001814:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800181a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001822:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001824:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b56      	ldr	r3, [pc, #344]	@ (8001990 <ETH_SetMACConfig+0x22c>)
 8001836:	4013      	ands	r3, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	430b      	orrs	r3, r1
 8001840:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001846:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800184e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001850:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001858:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800185a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001862:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001864:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800186c:	2a00      	cmp	r2, #0
 800186e:	d102      	bne.n	8001876 <ETH_SetMACConfig+0x112>
 8001870:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001874:	e000      	b.n	8001878 <ETH_SetMACConfig+0x114>
 8001876:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001878:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4b42      	ldr	r3, [pc, #264]	@ (8001994 <ETH_SetMACConfig+0x230>)
 800188a:	4013      	ands	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	430b      	orrs	r3, r1
 8001894:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800189c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <ETH_SetMACConfig+0x234>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	430b      	orrs	r3, r1
 80018b8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d101      	bne.n	80018d6 <ETH_SetMACConfig+0x172>
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	e000      	b.n	80018d8 <ETH_SetMACConfig+0x174>
 80018d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018d8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80018ea:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80018ee:	4013      	ands	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	430b      	orrs	r3, r1
 80018f8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001900:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001908:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001916:	f023 0103 	bic.w	r1, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	430a      	orrs	r2, r1
 8001922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800192e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800194a:	2a00      	cmp	r2, #0
 800194c:	d101      	bne.n	8001952 <ETH_SetMACConfig+0x1ee>
 800194e:	2240      	movs	r2, #64	@ 0x40
 8001950:	e000      	b.n	8001954 <ETH_SetMACConfig+0x1f0>
 8001952:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001954:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800195c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800195e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001966:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001968:	4313      	orrs	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001974:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	430a      	orrs	r2, r1
 8001980:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	00048083 	.word	0x00048083
 8001994:	c0f88000 	.word	0xc0f88000
 8001998:	fffffef0 	.word	0xfffffef0

0800199c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <ETH_SetDMAConfig+0xf8>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	430b      	orrs	r3, r1
 80019be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019c2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	791b      	ldrb	r3, [r3, #4]
 80019c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
 80019d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <ETH_SetDMAConfig+0xfc>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019f4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	7b5b      	ldrb	r3, [r3, #13]
 80019fa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001a10:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <ETH_SetDMAConfig+0x100>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a20:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	7d1b      	ldrb	r3, [r3, #20]
 8001a2c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a2e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7f5b      	ldrb	r3, [r3, #29]
 8001a34:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a42:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001a46:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <ETH_SetDMAConfig+0x104>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a56:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	7f1b      	ldrb	r3, [r3, #28]
 8001a5e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a70:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <ETH_SetDMAConfig+0x108>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	68f9      	ldr	r1, [r7, #12]
 8001a7e:	430b      	orrs	r3, r1
 8001a80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a84:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	ffff87fd 	.word	0xffff87fd
 8001a98:	ffff2ffe 	.word	0xffff2ffe
 8001a9c:	fffec000 	.word	0xfffec000
 8001aa0:	ffc0efef 	.word	0xffc0efef
 8001aa4:	7fc0ffff 	.word	0x7fc0ffff

08001aa8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0a4      	sub	sp, #144	@ 0x90
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ae4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001b00:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001b04:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b22:	2300      	movs	r3, #0
 8001b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b40:	2320      	movs	r3, #32
 8001b42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b52:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b5c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b64:	2302      	movs	r3, #2
 8001b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b82:	2300      	movs	r3, #0
 8001b84:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fde6 	bl	8001764 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bb2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bbc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bc0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001bc8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fee1 	bl	800199c <ETH_SetDMAConfig>
}
 8001bda:	bf00      	nop
 8001bdc:	3790      	adds	r7, #144	@ 0x90
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e01d      	b.n	8001c2c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	3206      	adds	r2, #6
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d9de      	bls.n	8001bf0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c40:	461a      	mov	r2, r3
 8001c42:	2303      	movs	r3, #3
 8001c44:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c54:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e023      	b.n	8001cca <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	3212      	adds	r2, #18
 8001cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d9d8      	bls.n	8001c82 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d3e:	4b89      	ldr	r3, [pc, #548]	@ (8001f64 <HAL_GPIO_Init+0x234>)
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d42:	e194      	b.n	800206e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8186 	beq.w	8002068 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d005      	beq.n	8001d74 <HAL_GPIO_Init+0x44>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d130      	bne.n	8001dd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001daa:	2201      	movs	r2, #1
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	f003 0201 	and.w	r2, r3, #1
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d017      	beq.n	8001e12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0203 	and.w	r2, r3, #3
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80e0 	beq.w	8002068 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <HAL_GPIO_Init+0x238>)
 8001eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eae:	4a2e      	ldr	r2, [pc, #184]	@ (8001f68 <HAL_GPIO_Init+0x238>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_GPIO_Init+0x238>)
 8001eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec6:	4a29      	ldr	r2, [pc, #164]	@ (8001f6c <HAL_GPIO_Init+0x23c>)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a20      	ldr	r2, [pc, #128]	@ (8001f70 <HAL_GPIO_Init+0x240>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d052      	beq.n	8001f98 <HAL_GPIO_Init+0x268>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f74 <HAL_GPIO_Init+0x244>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d031      	beq.n	8001f5e <HAL_GPIO_Init+0x22e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <HAL_GPIO_Init+0x248>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02b      	beq.n	8001f5a <HAL_GPIO_Init+0x22a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_GPIO_Init+0x24c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d025      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f80 <HAL_GPIO_Init+0x250>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x222>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <HAL_GPIO_Init+0x254>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x21e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f88 <HAL_GPIO_Init+0x258>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <HAL_GPIO_Init+0x25c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	@ (8001f90 <HAL_GPIO_Init+0x260>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x212>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <HAL_GPIO_Init+0x264>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x20e>
 8001f3a:	2309      	movs	r3, #9
 8001f3c:	e02d      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f3e:	230a      	movs	r3, #10
 8001f40:	e02b      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f42:	2308      	movs	r3, #8
 8001f44:	e029      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e027      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e025      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e023      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e021      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e01f      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e01d      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e01b      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f62:	bf00      	nop
 8001f64:	58000080 	.word	0x58000080
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58000400 	.word	0x58000400
 8001f70:	58020000 	.word	0x58020000
 8001f74:	58020400 	.word	0x58020400
 8001f78:	58020800 	.word	0x58020800
 8001f7c:	58020c00 	.word	0x58020c00
 8001f80:	58021000 	.word	0x58021000
 8001f84:	58021400 	.word	0x58021400
 8001f88:	58021800 	.word	0x58021800
 8001f8c:	58021c00 	.word	0x58021c00
 8001f90:	58022000 	.word	0x58022000
 8001f94:	58022400 	.word	0x58022400
 8001f98:	2300      	movs	r3, #0
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001faa:	4938      	ldr	r1, [pc, #224]	@ (800208c <HAL_GPIO_Init+0x35c>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800200c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f ae63 	bne.w	8001d44 <HAL_GPIO_Init+0x14>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3724      	adds	r7, #36	@ 0x24
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	58000400 	.word	0x58000400

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fd21 	bl	8000b30 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af02      	add	r7, sp, #8
 80020fc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0fe      	b.n	8002306 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe fe81 	bl	8000e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2203      	movs	r2, #3
 8002126:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 f8bc 	bl	80062ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7c1a      	ldrb	r2, [r3, #16]
 800213c:	f88d 2000 	strb.w	r2, [sp]
 8002140:	3304      	adds	r3, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	f004 f840 	bl	80061c8 <USB_CoreInit>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0d5      	b.n	8002306 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f004 f8b4 	bl	80062ce <USB_SetCurrentMode>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0c6      	b.n	8002306 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e04a      	b.n	8002214 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3315      	adds	r3, #21
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3314      	adds	r3, #20
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b298      	uxth	r0, r3
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	332e      	adds	r3, #46	@ 0x2e
 80021ba:	4602      	mov	r2, r0
 80021bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3318      	adds	r3, #24
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	331c      	adds	r3, #28
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3320      	adds	r3, #32
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3324      	adds	r3, #36	@ 0x24
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3301      	adds	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	791b      	ldrb	r3, [r3, #4]
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3af      	bcc.n	800217e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e044      	b.n	80022ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	791b      	ldrb	r3, [r3, #4]
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d3b5      	bcc.n	8002224 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7c1a      	ldrb	r2, [r3, #16]
 80022c0:	f88d 2000 	strb.w	r2, [sp]
 80022c4:	3304      	adds	r3, #4
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	f004 f84e 	bl	8006368 <USB_DevInit>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e013      	b.n	8002306 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7b1b      	ldrb	r3, [r3, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d102      	bne.n	80022fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f80b 	bl	8002310 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f004 fa09 	bl	8006716 <USB_DevDisconnect>

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800233e:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_PCDEx_ActivateLPM+0x44>)
 8002340:	4313      	orrs	r3, r2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	10000003 	.word	0x10000003

08002358 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d00a      	beq.n	8002382 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_PWREx_ConfigSupply+0x70>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e01f      	b.n	80023be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e01d      	b.n	80023be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 0207 	bic.w	r2, r3, #7
 800238a:	490f      	ldr	r1, [pc, #60]	@ (80023c8 <HAL_PWREx_ConfigSupply+0x70>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4313      	orrs	r3, r2
 8002390:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002392:	f7fe ff39 	bl	8001208 <HAL_GetTick>
 8002396:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002398:	e009      	b.n	80023ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800239a:	f7fe ff35 	bl	8001208 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023a8:	d901      	bls.n	80023ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e007      	b.n	80023be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_PWREx_ConfigSupply+0x70>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ba:	d1ee      	bne.n	800239a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	58024800 	.word	0x58024800

080023cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	58024800 	.word	0x58024800

080023ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	@ 0x30
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f000 bc48 	b.w	8002c90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8088 	beq.w	800251e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	4b99      	ldr	r3, [pc, #612]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002418:	4b96      	ldr	r3, [pc, #600]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800241e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002420:	2b10      	cmp	r3, #16
 8002422:	d007      	beq.n	8002434 <HAL_RCC_OscConfig+0x48>
 8002424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002426:	2b18      	cmp	r3, #24
 8002428:	d111      	bne.n	800244e <HAL_RCC_OscConfig+0x62>
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	4b8f      	ldr	r3, [pc, #572]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d06d      	beq.n	800251c <HAL_RCC_OscConfig+0x130>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d169      	bne.n	800251c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f000 bc21 	b.w	8002c90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x7a>
 8002458:	4b86      	ldr	r3, [pc, #536]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a85      	ldr	r2, [pc, #532]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e02e      	b.n	80024c4 <HAL_RCC_OscConfig+0xd8>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x9c>
 800246e:	4b81      	ldr	r3, [pc, #516]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a80      	ldr	r2, [pc, #512]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b7e      	ldr	r3, [pc, #504]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7d      	ldr	r2, [pc, #500]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xd8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0xc0>
 8002492:	4b78      	ldr	r3, [pc, #480]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a77      	ldr	r2, [pc, #476]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b75      	ldr	r3, [pc, #468]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a74      	ldr	r2, [pc, #464]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xd8>
 80024ac:	4b71      	ldr	r3, [pc, #452]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a70      	ldr	r2, [pc, #448]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fe9c 	bl	8001208 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe fe98 	bl	8001208 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e3d4      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e6:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe8>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fe88 	bl	8001208 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fe84 	bl	8001208 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e3c0      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800250e:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x110>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80ca 	beq.w	80026c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252c:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002536:	4b4f      	ldr	r3, [pc, #316]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_RCC_OscConfig+0x166>
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b18      	cmp	r3, #24
 8002546:	d156      	bne.n	80025f6 <HAL_RCC_OscConfig+0x20a>
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d151      	bne.n	80025f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002552:	4b48      	ldr	r3, [pc, #288]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x17e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e392      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800256a:	4b42      	ldr	r3, [pc, #264]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 0219 	bic.w	r2, r3, #25
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	493f      	ldr	r1, [pc, #252]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fe44 	bl	8001208 <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7fe fe40 	bl	8001208 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e37c      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002596:	4b37      	ldr	r3, [pc, #220]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	f7fe fe61 	bl	8001268 <HAL_GetREVID>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d817      	bhi.n	80025e0 <HAL_RCC_OscConfig+0x1f4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b40      	cmp	r3, #64	@ 0x40
 80025b6:	d108      	bne.n	80025ca <HAL_RCC_OscConfig+0x1de>
 80025b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80025c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c8:	e07a      	b.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	031b      	lsls	r3, r3, #12
 80025d8:	4926      	ldr	r1, [pc, #152]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025de:	e06f      	b.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	4921      	ldr	r1, [pc, #132]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f4:	e064      	b.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d047      	beq.n	800268e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 0219 	bic.w	r2, r3, #25
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	491a      	ldr	r1, [pc, #104]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fdfa 	bl	8001208 <HAL_GetTick>
 8002614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002618:	f7fe fdf6 	bl	8001208 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e332      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	f7fe fe17 	bl	8001268 <HAL_GetREVID>
 800263a:	4603      	mov	r3, r0
 800263c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002640:	4293      	cmp	r3, r2
 8002642:	d819      	bhi.n	8002678 <HAL_RCC_OscConfig+0x28c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b40      	cmp	r3, #64	@ 0x40
 800264a:	d108      	bne.n	800265e <HAL_RCC_OscConfig+0x272>
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002654:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800265a:	6053      	str	r3, [r2, #4]
 800265c:	e030      	b.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
 800265e:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	031b      	lsls	r3, r3, #12
 800266c:	4901      	ldr	r1, [pc, #4]	@ (8002674 <HAL_RCC_OscConfig+0x288>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
 8002672:	e025      	b.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
 8002674:	58024400 	.word	0x58024400
 8002678:	4b9a      	ldr	r3, [pc, #616]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	4997      	ldr	r1, [pc, #604]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	e018      	b.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b95      	ldr	r3, [pc, #596]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a94      	ldr	r2, [pc, #592]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fdb5 	bl	8001208 <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7fe fdb1 	bl	8001208 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e2ed      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b4:	4b8b      	ldr	r3, [pc, #556]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a9 	beq.w	8002820 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ce:	4b85      	ldr	r3, [pc, #532]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d8:	4b82      	ldr	r3, [pc, #520]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d007      	beq.n	80026f4 <HAL_RCC_OscConfig+0x308>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b18      	cmp	r3, #24
 80026e8:	d13a      	bne.n	8002760 <HAL_RCC_OscConfig+0x374>
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d135      	bne.n	8002760 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f4:	4b7b      	ldr	r3, [pc, #492]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x320>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b80      	cmp	r3, #128	@ 0x80
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e2c1      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800270c:	f7fe fdac 	bl	8001268 <HAL_GetREVID>
 8002710:	4603      	mov	r3, r0
 8002712:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002716:	4293      	cmp	r3, r2
 8002718:	d817      	bhi.n	800274a <HAL_RCC_OscConfig+0x35e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	2b20      	cmp	r3, #32
 8002720:	d108      	bne.n	8002734 <HAL_RCC_OscConfig+0x348>
 8002722:	4b70      	ldr	r3, [pc, #448]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800272a:	4a6e      	ldr	r2, [pc, #440]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800272c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002730:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002732:	e075      	b.n	8002820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002734:	4b6b      	ldr	r3, [pc, #428]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	069b      	lsls	r3, r3, #26
 8002742:	4968      	ldr	r1, [pc, #416]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002748:	e06a      	b.n	8002820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274a:	4b66      	ldr	r3, [pc, #408]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	061b      	lsls	r3, r3, #24
 8002758:	4962      	ldr	r1, [pc, #392]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800275e:	e05f      	b.n	8002820 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d042      	beq.n	80027ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002768:	4b5e      	ldr	r3, [pc, #376]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5d      	ldr	r2, [pc, #372]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fd48 	bl	8001208 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800277c:	f7fe fd44 	bl	8001208 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e280      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800278e:	4b55      	ldr	r3, [pc, #340]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800279a:	f7fe fd65 	bl	8001268 <HAL_GetREVID>
 800279e:	4603      	mov	r3, r0
 80027a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d817      	bhi.n	80027d8 <HAL_RCC_OscConfig+0x3ec>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d108      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3d6>
 80027b0:	4b4c      	ldr	r3, [pc, #304]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027b8:	4a4a      	ldr	r2, [pc, #296]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027be:	6053      	str	r3, [r2, #4]
 80027c0:	e02e      	b.n	8002820 <HAL_RCC_OscConfig+0x434>
 80027c2:	4b48      	ldr	r3, [pc, #288]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	069b      	lsls	r3, r3, #26
 80027d0:	4944      	ldr	r1, [pc, #272]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
 80027d6:	e023      	b.n	8002820 <HAL_RCC_OscConfig+0x434>
 80027d8:	4b42      	ldr	r3, [pc, #264]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	493f      	ldr	r1, [pc, #252]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
 80027ec:	e018      	b.n	8002820 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ee:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3c      	ldr	r2, [pc, #240]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fd05 	bl	8001208 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002802:	f7fe fd01 	bl	8001208 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e23d      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002814:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d036      	beq.n	800289a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d019      	beq.n	8002868 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002834:	4b2b      	ldr	r3, [pc, #172]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002838:	4a2a      	ldr	r2, [pc, #168]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fce2 	bl	8001208 <HAL_GetTick>
 8002844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fcde 	bl	8001208 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e21a      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800285a:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x45c>
 8002866:	e018      	b.n	800289a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b1e      	ldr	r3, [pc, #120]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286c:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe fcc8 	bl	8001208 <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe fcc4 	bl	8001208 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e200      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800288e:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d039      	beq.n	800291a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028ae:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a0c      	ldr	r2, [pc, #48]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fca5 	bl	8001208 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c2:	f7fe fca1 	bl	8001208 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1dd      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
 80028e0:	e01b      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
 80028e2:	bf00      	nop
 80028e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a9a      	ldr	r2, [pc, #616]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80028ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fc88 	bl	8001208 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fc:	f7fe fc84 	bl	8001208 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1c0      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800290e:	4b92      	ldr	r3, [pc, #584]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8081 	beq.w	8002a2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002928:	4b8c      	ldr	r3, [pc, #560]	@ (8002b5c <HAL_RCC_OscConfig+0x770>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a8b      	ldr	r2, [pc, #556]	@ (8002b5c <HAL_RCC_OscConfig+0x770>)
 800292e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002934:	f7fe fc68 	bl	8001208 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe fc64 	bl	8001208 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	@ 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1a0      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294e:	4b83      	ldr	r3, [pc, #524]	@ (8002b5c <HAL_RCC_OscConfig+0x770>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x584>
 8002962:	4b7d      	ldr	r3, [pc, #500]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	4a7c      	ldr	r2, [pc, #496]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6713      	str	r3, [r2, #112]	@ 0x70
 800296e:	e02d      	b.n	80029cc <HAL_RCC_OscConfig+0x5e0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x5a6>
 8002978:	4b77      	ldr	r3, [pc, #476]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a76      	ldr	r2, [pc, #472]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
 8002984:	4b74      	ldr	r3, [pc, #464]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	4a73      	ldr	r2, [pc, #460]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x5e0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c8>
 800299a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x5e0>
 80029b4:	4b68      	ldr	r3, [pc, #416]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	4a67      	ldr	r2, [pc, #412]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c0:	4b65      	ldr	r3, [pc, #404]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a64      	ldr	r2, [pc, #400]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fc18 	bl	8001208 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fc14 	bl	8001208 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e14e      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f2:	4b59      	ldr	r3, [pc, #356]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ee      	beq.n	80029dc <HAL_RCC_OscConfig+0x5f0>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fc02 	bl	8001208 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe fbfe 	bl	8001208 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e138      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ee      	bne.n	8002a08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 812d 	beq.w	8002c8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a34:	4b48      	ldr	r3, [pc, #288]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a3c:	2b18      	cmp	r3, #24
 8002a3e:	f000 80bd 	beq.w	8002bbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	f040 809e 	bne.w	8002b88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a41      	ldr	r2, [pc, #260]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fbd6 	bl	8001208 <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fbd2 	bl	8001208 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e10e      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a72:	4b39      	ldr	r3, [pc, #228]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7e:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a82:	4b37      	ldr	r3, [pc, #220]	@ (8002b60 <HAL_RCC_OscConfig+0x774>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	430a      	orrs	r2, r1
 8002a92:	4931      	ldr	r1, [pc, #196]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	025b      	lsls	r3, r3, #9
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ac8:	4923      	ldr	r1, [pc, #140]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	4a21      	ldr	r2, [pc, #132]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ada:	4b1f      	ldr	r3, [pc, #124]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ade:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <HAL_RCC_OscConfig+0x778>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ae6:	00d2      	lsls	r2, r2, #3
 8002ae8:	491b      	ldr	r1, [pc, #108]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	f023 020c 	bic.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4917      	ldr	r1, [pc, #92]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b00:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	f023 0202 	bic.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	4912      	ldr	r1, [pc, #72]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b12:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	4a0d      	ldr	r2, [pc, #52]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b36:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	4a07      	ldr	r2, [pc, #28]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fb5b 	bl	8001208 <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b54:	e011      	b.n	8002b7a <HAL_RCC_OscConfig+0x78e>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	58024800 	.word	0x58024800
 8002b60:	fffffc0c 	.word	0xfffffc0c
 8002b64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fb4e 	bl	8001208 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e08a      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x77c>
 8002b86:	e082      	b.n	8002c8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b43      	ldr	r3, [pc, #268]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a42      	ldr	r2, [pc, #264]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fb38 	bl	8001208 <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fb34 	bl	8001208 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e070      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bae:	4b3a      	ldr	r3, [pc, #232]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x7b0>
 8002bba:	e068      	b.n	8002c8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bbc:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bc2:	4b35      	ldr	r3, [pc, #212]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d031      	beq.n	8002c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0203 	and.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d12a      	bne.n	8002c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d122      	bne.n	8002c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d11a      	bne.n	8002c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0a5b      	lsrs	r3, r3, #9
 8002c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d111      	bne.n	8002c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	0c1b      	lsrs	r3, r3, #16
 8002c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d108      	bne.n	8002c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0e1b      	lsrs	r3, r3, #24
 8002c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e02b      	b.n	8002c90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c38:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	08db      	lsrs	r3, r3, #3
 8002c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d01f      	beq.n	8002c8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c4e:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	4a11      	ldr	r2, [pc, #68]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c5a:	f7fe fad5 	bl	8001208 <HAL_GetTick>
 8002c5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c60:	bf00      	nop
 8002c62:	f7fe fad1 	bl	8001208 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d0f9      	beq.n	8002c62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_RCC_OscConfig+0x8b0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c7a:	00d2      	lsls	r2, r2, #3
 8002c7c:	4906      	ldr	r1, [pc, #24]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_RCC_OscConfig+0x8ac>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3730      	adds	r7, #48	@ 0x30
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	ffff0007 	.word	0xffff0007

08002ca0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e19c      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d910      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b87      	ldr	r3, [pc, #540]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 020f 	bic.w	r2, r3, #15
 8002cca:	4985      	ldr	r1, [pc, #532]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b83      	ldr	r3, [pc, #524]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e184      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d00:	4b78      	ldr	r3, [pc, #480]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	4975      	ldr	r1, [pc, #468]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	4b70      	ldr	r3, [pc, #448]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d908      	bls.n	8002d40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	496a      	ldr	r1, [pc, #424]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	4b64      	ldr	r3, [pc, #400]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d908      	bls.n	8002d6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d5c:	4b61      	ldr	r3, [pc, #388]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	495e      	ldr	r1, [pc, #376]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	4b59      	ldr	r3, [pc, #356]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d908      	bls.n	8002d9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d8a:	4b56      	ldr	r3, [pc, #344]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4953      	ldr	r1, [pc, #332]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d908      	bls.n	8002dca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f023 020f 	bic.w	r2, r3, #15
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4947      	ldr	r1, [pc, #284]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d055      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dd6:	4b43      	ldr	r3, [pc, #268]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4940      	ldr	r1, [pc, #256]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d121      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0f6      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d115      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0ea      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e20:	4b30      	ldr	r3, [pc, #192]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0de      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e30:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0d6      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f023 0207 	bic.w	r2, r3, #7
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4925      	ldr	r1, [pc, #148]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e52:	f7fe f9d9 	bl	8001208 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5a:	f7fe f9d5 	bl	8001208 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0be      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d1eb      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d208      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f023 020f 	bic.w	r2, r3, #15
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	490e      	ldr	r1, [pc, #56]	@ (8002ee4 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d214      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 020f 	bic.w	r2, r3, #15
 8002ec6:	4906      	ldr	r1, [pc, #24]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <HAL_RCC_ClockConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e086      	b.n	8002fee <HAL_RCC_ClockConfig+0x34e>
 8002ee0:	52002000 	.word	0x52002000
 8002ee4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d208      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f04:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4939      	ldr	r1, [pc, #228]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	4b34      	ldr	r3, [pc, #208]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d208      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f32:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	492e      	ldr	r1, [pc, #184]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d208      	bcs.n	8002f72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f60:	4b25      	ldr	r3, [pc, #148]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4922      	ldr	r1, [pc, #136]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d208      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4917      	ldr	r1, [pc, #92]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fa0:	f000 f834 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	4912      	ldr	r1, [pc, #72]	@ (8002ffc <HAL_RCC_ClockConfig+0x35c>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff8 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <HAL_RCC_ClockConfig+0x35c>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <HAL_RCC_ClockConfig+0x360>)
 8002fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <HAL_RCC_ClockConfig+0x364>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_RCC_ClockConfig+0x368>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f8c6 	bl	8001174 <HAL_InitTick>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	08006854 	.word	0x08006854
 8003000:	24000004 	.word	0x24000004
 8003004:	24000000 	.word	0x24000000
 8003008:	24000008 	.word	0x24000008

0800300c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003012:	4bb3      	ldr	r3, [pc, #716]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800301a:	2b18      	cmp	r3, #24
 800301c:	f200 8155 	bhi.w	80032ca <HAL_RCC_GetSysClockFreq+0x2be>
 8003020:	a201      	add	r2, pc, #4	@ (adr r2, 8003028 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	0800308d 	.word	0x0800308d
 800302c:	080032cb 	.word	0x080032cb
 8003030:	080032cb 	.word	0x080032cb
 8003034:	080032cb 	.word	0x080032cb
 8003038:	080032cb 	.word	0x080032cb
 800303c:	080032cb 	.word	0x080032cb
 8003040:	080032cb 	.word	0x080032cb
 8003044:	080032cb 	.word	0x080032cb
 8003048:	080030b3 	.word	0x080030b3
 800304c:	080032cb 	.word	0x080032cb
 8003050:	080032cb 	.word	0x080032cb
 8003054:	080032cb 	.word	0x080032cb
 8003058:	080032cb 	.word	0x080032cb
 800305c:	080032cb 	.word	0x080032cb
 8003060:	080032cb 	.word	0x080032cb
 8003064:	080032cb 	.word	0x080032cb
 8003068:	080030b9 	.word	0x080030b9
 800306c:	080032cb 	.word	0x080032cb
 8003070:	080032cb 	.word	0x080032cb
 8003074:	080032cb 	.word	0x080032cb
 8003078:	080032cb 	.word	0x080032cb
 800307c:	080032cb 	.word	0x080032cb
 8003080:	080032cb 	.word	0x080032cb
 8003084:	080032cb 	.word	0x080032cb
 8003088:	080030bf 	.word	0x080030bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800308c:	4b94      	ldr	r3, [pc, #592]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003098:	4b91      	ldr	r3, [pc, #580]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	08db      	lsrs	r3, r3, #3
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	4a90      	ldr	r2, [pc, #576]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030aa:	e111      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030ac:	4b8d      	ldr	r3, [pc, #564]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ae:	61bb      	str	r3, [r7, #24]
      break;
 80030b0:	e10e      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030b2:	4b8d      	ldr	r3, [pc, #564]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030b4:	61bb      	str	r3, [r7, #24]
      break;
 80030b6:	e10b      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030b8:	4b8c      	ldr	r3, [pc, #560]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030ba:	61bb      	str	r3, [r7, #24]
      break;
 80030bc:	e108      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030be:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030c8:	4b85      	ldr	r3, [pc, #532]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030d4:	4b82      	ldr	r3, [pc, #520]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030de:	4b80      	ldr	r3, [pc, #512]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e2:	08db      	lsrs	r3, r3, #3
 80030e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80e1 	beq.w	80032c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b02      	cmp	r3, #2
 8003106:	f000 8083 	beq.w	8003210 <HAL_RCC_GetSysClockFreq+0x204>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b02      	cmp	r3, #2
 800310e:	f200 80a1 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x248>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x114>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d056      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800311e:	e099      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003120:	4b6f      	ldr	r3, [pc, #444]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d02d      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800312c:	4b6c      	ldr	r3, [pc, #432]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	08db      	lsrs	r3, r3, #3
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	4a6b      	ldr	r2, [pc, #428]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003156:	4b62      	ldr	r3, [pc, #392]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003166:	ed97 6a02 	vldr	s12, [r7, #8]
 800316a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003186:	e087      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319a:	4b51      	ldr	r3, [pc, #324]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ca:	e065      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031de:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800320e:	e043      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800321e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003222:	4b2f      	ldr	r3, [pc, #188]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003232:	ed97 6a02 	vldr	s12, [r7, #8]
 8003236:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800323a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003252:	e021      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003266:	4b1e      	ldr	r3, [pc, #120]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003276:	ed97 6a02 	vldr	s12, [r7, #8]
 800327a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800327e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800328a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003296:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	0a5b      	lsrs	r3, r3, #9
 800329e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032a2:	3301      	adds	r3, #1
 80032a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80032b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032bc:	ee17 3a90 	vmov	r3, s15
 80032c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032c2:	e005      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
      break;
 80032c8:	e002      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032cc:	61bb      	str	r3, [r7, #24]
      break;
 80032ce:	bf00      	nop
  }

  return sysclockfreq;
 80032d0:	69bb      	ldr	r3, [r7, #24]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	@ 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	58024400 	.word	0x58024400
 80032e4:	03d09000 	.word	0x03d09000
 80032e8:	003d0900 	.word	0x003d0900
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	46000000 	.word	0x46000000
 80032f4:	4c742400 	.word	0x4c742400
 80032f8:	4a742400 	.word	0x4a742400
 80032fc:	4af42400 	.word	0x4af42400

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003306:	f7ff fe81 	bl	800300c <HAL_RCC_GetSysClockFreq>
 800330a:	4602      	mov	r2, r0
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_RCC_GetHCLKFreq+0x50>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	490f      	ldr	r1, [pc, #60]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x54>)
 8003318:	5ccb      	ldrb	r3, [r1, r3]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003324:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <HAL_RCC_GetHCLKFreq+0x50>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4a09      	ldr	r2, [pc, #36]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x54>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	4a07      	ldr	r2, [pc, #28]	@ (8003358 <HAL_RCC_GetHCLKFreq+0x58>)
 800333c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800333e:	4a07      	ldr	r2, [pc, #28]	@ (800335c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <HAL_RCC_GetHCLKFreq+0x58>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	58024400 	.word	0x58024400
 8003354:	08006854 	.word	0x08006854
 8003358:	24000004 	.word	0x24000004
 800335c:	24000000 	.word	0x24000000

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003364:	f7ff ffcc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4904      	ldr	r1, [pc, #16]	@ (8003388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	58024400 	.word	0x58024400
 8003388:	08006854 	.word	0x08006854

0800338c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003390:	f7ff ffb6 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4904      	ldr	r1, [pc, #16]	@ (80033b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	58024400 	.word	0x58024400
 80033b4:	08006854 	.word	0x08006854

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b0ca      	sub	sp, #296	@ 0x128
 80033be:	af00      	add	r7, sp, #0
 80033c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033dc:	2500      	movs	r5, #0
 80033de:	ea54 0305 	orrs.w	r3, r4, r5
 80033e2:	d049      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ee:	d02f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033f4:	d828      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fa:	d01a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003400:	d822      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340a:	d007      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800340c:	e01c      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340e:	4bb8      	ldr	r3, [pc, #736]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	4ab7      	ldr	r2, [pc, #732]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003418:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800341a:	e01a      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003420:	3308      	adds	r3, #8
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fc8f 	bl	8004d48 <RCCEx_PLL2_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003430:	e00f      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	3328      	adds	r3, #40	@ 0x28
 8003438:	2102      	movs	r1, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fd36 	bl	8004eac <RCCEx_PLL3_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003446:	e004      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800345a:	4ba5      	ldr	r3, [pc, #660]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003468:	4aa1      	ldr	r2, [pc, #644]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346a:	430b      	orrs	r3, r1
 800346c:	6513      	str	r3, [r2, #80]	@ 0x50
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003484:	f04f 0900 	mov.w	r9, #0
 8003488:	ea58 0309 	orrs.w	r3, r8, r9
 800348c:	d047      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	2b04      	cmp	r3, #4
 8003496:	d82a      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003498:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034c3 	.word	0x080034c3
 80034a8:	080034d9 	.word	0x080034d9
 80034ac:	080034f7 	.word	0x080034f7
 80034b0:	080034f7 	.word	0x080034f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b4:	4b8e      	ldr	r3, [pc, #568]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	4a8d      	ldr	r2, [pc, #564]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c0:	e01a      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	3308      	adds	r3, #8
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fc3c 	bl	8004d48 <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d6:	e00f      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034dc:	3328      	adds	r3, #40	@ 0x28
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fce3 	bl	8004eac <RCCEx_PLL3_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ec:	e004      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003500:	4b7b      	ldr	r3, [pc, #492]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003504:	f023 0107 	bic.w	r1, r3, #7
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	4a78      	ldr	r2, [pc, #480]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6513      	str	r3, [r2, #80]	@ 0x50
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800351a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800352a:	f04f 0b00 	mov.w	fp, #0
 800352e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003532:	d04c      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353e:	d030      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003544:	d829      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003546:	2bc0      	cmp	r3, #192	@ 0xc0
 8003548:	d02d      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800354a:	2bc0      	cmp	r3, #192	@ 0xc0
 800354c:	d825      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800354e:	2b80      	cmp	r3, #128	@ 0x80
 8003550:	d018      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003552:	2b80      	cmp	r3, #128	@ 0x80
 8003554:	d821      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800355a:	2b40      	cmp	r3, #64	@ 0x40
 800355c:	d007      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800355e:	e01c      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003560:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003564:	4a62      	ldr	r2, [pc, #392]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800356a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800356c:	e01c      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	3308      	adds	r3, #8
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fbe6 	bl	8004d48 <RCCEx_PLL2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003582:	e011      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	3328      	adds	r3, #40	@ 0x28
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fc8d 	bl	8004eac <RCCEx_PLL3_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035b0:	4b4f      	ldr	r3, [pc, #316]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035be:	4a4c      	ldr	r2, [pc, #304]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d053      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035fa:	d035      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003600:	d82e      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003602:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003606:	d031      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003608:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800360c:	d828      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800360e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003612:	d01a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003618:	d822      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800361e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003622:	d007      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003624:	e01c      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003626:	4b32      	ldr	r3, [pc, #200]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	4a31      	ldr	r2, [pc, #196]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003632:	e01c      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	3308      	adds	r3, #8
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f001 fb83 	bl	8004d48 <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003648:	e011      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	3328      	adds	r3, #40	@ 0x28
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fc2a 	bl	8004eac <RCCEx_PLL3_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365e:	e006      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003666:	e002      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003668:	bf00      	nop
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003676:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003686:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6593      	str	r3, [r2, #88]	@ 0x58
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80036a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d056      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c2:	d038      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c8:	d831      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036ce:	d034      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036d4:	d82b      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036da:	d01d      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036e0:	d825      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036ec:	e01f      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ee:	bf00      	nop
 80036f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f4:	4ba2      	ldr	r3, [pc, #648]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003700:	e01c      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	3308      	adds	r3, #8
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fb1c 	bl	8004d48 <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	3328      	adds	r3, #40	@ 0x28
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fbc3 	bl	8004eac <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003744:	4b8e      	ldr	r3, [pc, #568]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003754:	4a8a      	ldr	r2, [pc, #552]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003756:	430b      	orrs	r3, r1
 8003758:	6593      	str	r3, [r2, #88]	@ 0x58
 800375a:	e003      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003770:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800377a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d03a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	2b30      	cmp	r3, #48	@ 0x30
 800378c:	d01f      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800378e:	2b30      	cmp	r3, #48	@ 0x30
 8003790:	d819      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003792:	2b20      	cmp	r3, #32
 8003794:	d00c      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003796:	2b20      	cmp	r3, #32
 8003798:	d815      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d019      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d111      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a2:	4b77      	ldr	r3, [pc, #476]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	4a76      	ldr	r2, [pc, #472]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037ae:	e011      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	3308      	adds	r3, #8
 80037b6:	2102      	movs	r1, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fac5 	bl	8004d48 <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037c4:	e006      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037cc:	e002      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037dc:	4b68      	ldr	r3, [pc, #416]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	4a65      	ldr	r2, [pc, #404]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003806:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800380a:	2300      	movs	r3, #0
 800380c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003810:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003814:	460b      	mov	r3, r1
 8003816:	4313      	orrs	r3, r2
 8003818:	d051      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003824:	d035      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800382a:	d82e      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800382c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003830:	d031      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003832:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003836:	d828      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800383c:	d01a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003842:	d822      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800384c:	d007      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800384e:	e01c      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003850:	4b4b      	ldr	r3, [pc, #300]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	4a4a      	ldr	r2, [pc, #296]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800385a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800385c:	e01c      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003862:	3308      	adds	r3, #8
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fa6e 	bl	8004d48 <RCCEx_PLL2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003872:	e011      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003878:	3328      	adds	r3, #40	@ 0x28
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fb15 	bl	8004eac <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003890:	e002      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038a0:	4b37      	ldr	r3, [pc, #220]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ae:	4a34      	ldr	r2, [pc, #208]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038d8:	460b      	mov	r3, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	d056      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e8:	d033      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ee:	d82c      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038f4:	d02f      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038fa:	d826      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003900:	d02b      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003902:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003906:	d820      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800390c:	d012      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800390e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003912:	d81a      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800391c:	d115      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	3308      	adds	r3, #8
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fa0e 	bl	8004d48 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003932:	e015      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	3328      	adds	r3, #40	@ 0x28
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fab5 	bl	8004eac <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003948:	e00a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003952:	bf00      	nop
 8003954:	e004      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003976:	4a02      	ldr	r2, [pc, #8]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003978:	430b      	orrs	r3, r1
 800397a:	6513      	str	r3, [r2, #80]	@ 0x50
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800397e:	bf00      	nop
 8003980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d055      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039b8:	d033      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80039ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039be:	d82c      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c4:	d02f      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ca:	d826      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039d0:	d02b      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039d6:	d820      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039dc:	d012      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e2:	d81a      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d022      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ec:	d115      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	3308      	adds	r3, #8
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 f9a6 	bl	8004d48 <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a02:	e015      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	3328      	adds	r3, #40	@ 0x28
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 fa4d 	bl	8004eac <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a18:	e00a      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a20:	e006      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a22:	bf00      	nop
 8003a24:	e004      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a38:	4ba3      	ldr	r3, [pc, #652]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a48:	4a9f      	ldr	r2, [pc, #636]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4e:	e003      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d037      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a82:	d00e      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a88:	d816      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d018      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a94:	4b8c      	ldr	r3, [pc, #560]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	4a8b      	ldr	r2, [pc, #556]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003aa0:	e00f      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 f94c 	bl	8004d48 <RCCEx_PLL2_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aca:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ace:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	4a7b      	ldr	r2, [pc, #492]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ade:	e003      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003afe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d039      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d81c      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b12:	a201      	add	r2, pc, #4	@ (adr r2, 8003b18 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b55 	.word	0x08003b55
 8003b1c:	08003b29 	.word	0x08003b29
 8003b20:	08003b37 	.word	0x08003b37
 8003b24:	08003b55 	.word	0x08003b55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b28:	4b67      	ldr	r3, [pc, #412]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	4a66      	ldr	r2, [pc, #408]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b34:	e00f      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 f902 	bl	8004d48 <RCCEx_PLL2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b4a:	e004      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b52:	e000      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	f023 0103 	bic.w	r1, r3, #3
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6c:	4a56      	ldr	r2, [pc, #344]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f000 809f 	beq.w	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003baa:	f7fd fb2d 	bl	8001208 <HAL_GetTick>
 8003bae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fd fb28 	bl	8001208 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	@ 0x64
 8003bc2:	d903      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bca:	e005      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ed      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d179      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003be0:	4b39      	ldr	r3, [pc, #228]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bec:	4053      	eors	r3, r2
 8003bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d015      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf6:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c02:	4b31      	ldr	r3, [pc, #196]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a30      	ldr	r2, [pc, #192]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2e:	d118      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fd faea 	bl	8001208 <HAL_GetTick>
 8003c34:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c38:	e00d      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd fae5 	bl	8001208 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c44:	1ad2      	subs	r2, r2, r3
 8003c46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d903      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c54:	e005      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c56:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0eb      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d129      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c7a:	d10e      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c7c:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c8c:	091a      	lsrs	r2, r3, #4
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6113      	str	r3, [r2, #16]
 8003c98:	e005      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ca4:	6113      	str	r3, [r2, #16]
 8003ca6:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb6:	4a04      	ldr	r2, [pc, #16]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbc:	e00e      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003cc6:	e009      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	58024800 	.word	0x58024800
 8003cd0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f002 0301 	and.w	r3, r2, #1
 8003ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f000 8089 	beq.w	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d04:	2b28      	cmp	r3, #40	@ 0x28
 8003d06:	d86b      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d08:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003de9 	.word	0x08003de9
 8003d14:	08003de1 	.word	0x08003de1
 8003d18:	08003de1 	.word	0x08003de1
 8003d1c:	08003de1 	.word	0x08003de1
 8003d20:	08003de1 	.word	0x08003de1
 8003d24:	08003de1 	.word	0x08003de1
 8003d28:	08003de1 	.word	0x08003de1
 8003d2c:	08003de1 	.word	0x08003de1
 8003d30:	08003db5 	.word	0x08003db5
 8003d34:	08003de1 	.word	0x08003de1
 8003d38:	08003de1 	.word	0x08003de1
 8003d3c:	08003de1 	.word	0x08003de1
 8003d40:	08003de1 	.word	0x08003de1
 8003d44:	08003de1 	.word	0x08003de1
 8003d48:	08003de1 	.word	0x08003de1
 8003d4c:	08003de1 	.word	0x08003de1
 8003d50:	08003dcb 	.word	0x08003dcb
 8003d54:	08003de1 	.word	0x08003de1
 8003d58:	08003de1 	.word	0x08003de1
 8003d5c:	08003de1 	.word	0x08003de1
 8003d60:	08003de1 	.word	0x08003de1
 8003d64:	08003de1 	.word	0x08003de1
 8003d68:	08003de1 	.word	0x08003de1
 8003d6c:	08003de1 	.word	0x08003de1
 8003d70:	08003de9 	.word	0x08003de9
 8003d74:	08003de1 	.word	0x08003de1
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003de1 	.word	0x08003de1
 8003d80:	08003de1 	.word	0x08003de1
 8003d84:	08003de1 	.word	0x08003de1
 8003d88:	08003de1 	.word	0x08003de1
 8003d8c:	08003de1 	.word	0x08003de1
 8003d90:	08003de9 	.word	0x08003de9
 8003d94:	08003de1 	.word	0x08003de1
 8003d98:	08003de1 	.word	0x08003de1
 8003d9c:	08003de1 	.word	0x08003de1
 8003da0:	08003de1 	.word	0x08003de1
 8003da4:	08003de1 	.word	0x08003de1
 8003da8:	08003de1 	.word	0x08003de1
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003de9 	.word	0x08003de9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	3308      	adds	r3, #8
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 ffc3 	bl	8004d48 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dc8:	e00f      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	3328      	adds	r3, #40	@ 0x28
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 f86a 	bl	8004eac <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dde:	e004      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003df2:	4bbf      	ldr	r3, [pc, #764]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e00:	4abb      	ldr	r2, [pc, #748]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f002 0302 	and.w	r3, r2, #2
 8003e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	d041      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d824      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e8d 	.word	0x08003e8d
 8003e44:	08003e59 	.word	0x08003e59
 8003e48:	08003e6f 	.word	0x08003e6f
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e8d 	.word	0x08003e8d
 8003e54:	08003e8d 	.word	0x08003e8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 ff71 	bl	8004d48 <RCCEx_PLL2_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e6c:	e00f      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	3328      	adds	r3, #40	@ 0x28
 8003e74:	2101      	movs	r1, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 f818 	bl	8004eac <RCCEx_PLL3_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e82:	e004      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e8a:	e000      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e96:	4b96      	ldr	r3, [pc, #600]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9a:	f023 0107 	bic.w	r1, r3, #7
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea4:	4a92      	ldr	r2, [pc, #584]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003eaa:	e003      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f002 0304 	and.w	r3, r2, #4
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d044      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d825      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f35 	.word	0x08003f35
 8003eec:	08003f01 	.word	0x08003f01
 8003ef0:	08003f17 	.word	0x08003f17
 8003ef4:	08003f35 	.word	0x08003f35
 8003ef8:	08003f35 	.word	0x08003f35
 8003efc:	08003f35 	.word	0x08003f35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	3308      	adds	r3, #8
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 ff1d 	bl	8004d48 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f14:	e00f      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1a:	3328      	adds	r3, #40	@ 0x28
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 ffc4 	bl	8004eac <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	f023 0107 	bic.w	r1, r3, #7
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4e:	4a68      	ldr	r2, [pc, #416]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f002 0320 	and.w	r3, r2, #32
 8003f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d055      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f8a:	d033      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f90:	d82c      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f96:	d02f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9c:	d826      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fa2:	d02b      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003fa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fa8:	d820      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fae:	d012      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb4:	d81a      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d022      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fbe:	d115      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 febd 	bl	8004d48 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e015      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	3328      	adds	r3, #40	@ 0x28
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ff64 	bl	8004eac <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fea:	e00a      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff2:	e006      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ff4:	bf00      	nop
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800400a:	4b39      	ldr	r3, [pc, #228]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800400c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401a:	4a35      	ldr	r2, [pc, #212]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004040:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004044:	460b      	mov	r3, r1
 8004046:	4313      	orrs	r3, r2
 8004048:	d058      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004052:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004056:	d033      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004058:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800405c:	d82c      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004062:	d02f      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004068:	d826      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800406a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800406e:	d02b      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004070:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004074:	d820      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407a:	d012      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800407c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004080:	d81a      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d022      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800408a:	d115      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	3308      	adds	r3, #8
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fe57 	bl	8004d48 <RCCEx_PLL2_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040a0:	e015      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	3328      	adds	r3, #40	@ 0x28
 80040a8:	2102      	movs	r1, #2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fefe 	bl	8004eac <RCCEx_PLL3_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040b6:	e00a      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040be:	e006      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040c0:	bf00      	nop
 80040c2:	e004      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10e      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040d6:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040e6:	4a02      	ldr	r2, [pc, #8]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ec:	e006      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004112:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d055      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004124:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004128:	d033      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800412a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800412e:	d82c      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004134:	d02f      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413a:	d826      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800413c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004140:	d02b      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004142:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004146:	d820      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800414c:	d012      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800414e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004152:	d81a      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d022      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800415c:	d115      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	3308      	adds	r3, #8
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fdee 	bl	8004d48 <RCCEx_PLL2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004172:	e015      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	3328      	adds	r3, #40	@ 0x28
 800417a:	2102      	movs	r1, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fe95 	bl	8004eac <RCCEx_PLL3_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004188:	e00a      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004192:	bf00      	nop
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800419e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041b8:	4a9d      	ldr	r2, [pc, #628]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ba:	430b      	orrs	r3, r1
 80041bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f002 0308 	and.w	r3, r2, #8
 80041d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	d01e      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	3328      	adds	r3, #40	@ 0x28
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fe54 	bl	8004eac <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004210:	4b87      	ldr	r3, [pc, #540]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004220:	4a83      	ldr	r2, [pc, #524]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004222:	430b      	orrs	r3, r1
 8004224:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f002 0310 	and.w	r3, r2, #16
 8004232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800423c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d01e      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800424e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004252:	d10c      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	3328      	adds	r3, #40	@ 0x28
 800425a:	2102      	movs	r1, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe25 	bl	8004eac <RCCEx_PLL3_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800426e:	4b70      	ldr	r3, [pc, #448]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800427e:	4a6c      	ldr	r2, [pc, #432]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004280:	430b      	orrs	r3, r1
 8004282:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800429a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d03e      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042b0:	d022      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80042b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042b6:	d81b      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c0:	d00b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80042c2:	e015      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	3308      	adds	r3, #8
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fd3b 	bl	8004d48 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042d8:	e00f      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	3328      	adds	r3, #40	@ 0x28
 80042e0:	2102      	movs	r1, #2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fde2 	bl	8004eac <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042ee:	e004      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f6:	e000      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004302:	4b4b      	ldr	r3, [pc, #300]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004312:	4a47      	ldr	r2, [pc, #284]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004314:	430b      	orrs	r3, r1
 8004316:	6593      	str	r3, [r2, #88]	@ 0x58
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800432e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004330:	2300      	movs	r3, #0
 8004332:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004334:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d03b      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004346:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800434a:	d01f      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800434c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004350:	d818      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800435c:	d007      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800435e:	e011      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004360:	4b33      	ldr	r3, [pc, #204]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	4a32      	ldr	r2, [pc, #200]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800436c:	e00f      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	3328      	adds	r3, #40	@ 0x28
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fd98 	bl	8004eac <RCCEx_PLL3_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004382:	e004      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800438a:	e000      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800438c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004396:	4b26      	ldr	r3, [pc, #152]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80043ac:	e003      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80043c4:	2300      	movs	r3, #0
 80043c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80043c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d034      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e0:	d007      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043e2:	e011      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e4:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043f0:	e00e      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	3308      	adds	r3, #8
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fca4 	bl	8004d48 <RCCEx_PLL2_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004406:	e003      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10d      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004426:	4a02      	ldr	r2, [pc, #8]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004428:	430b      	orrs	r3, r1
 800442a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800444a:	2300      	movs	r3, #0
 800444c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800444e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004452:	460b      	mov	r3, r1
 8004454:	4313      	orrs	r3, r2
 8004456:	d00c      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	3328      	adds	r3, #40	@ 0x28
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fd23 	bl	8004eac <RCCEx_PLL3_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800447e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004480:	2300      	movs	r3, #0
 8004482:	667b      	str	r3, [r7, #100]	@ 0x64
 8004484:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004488:	460b      	mov	r3, r1
 800448a:	4313      	orrs	r3, r2
 800448c:	d038      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800449a:	d018      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800449c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044a0:	d811      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a6:	d014      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ac:	d80b      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d011      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b6:	d106      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b8:	4bc3      	ldr	r3, [pc, #780]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	4ac2      	ldr	r2, [pc, #776]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044c4:	e008      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044e0:	4bb9      	ldr	r3, [pc, #740]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f0:	4ab5      	ldr	r2, [pc, #724]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f2:	430b      	orrs	r3, r1
 80044f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044f6:	e003      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800450c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800450e:	2300      	movs	r3, #0
 8004510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004512:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800451c:	4baa      	ldr	r3, [pc, #680]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004520:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452a:	4aa7      	ldr	r2, [pc, #668]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452c:	430b      	orrs	r3, r1
 800452e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800453c:	653b      	str	r3, [r7, #80]	@ 0x50
 800453e:	2300      	movs	r3, #0
 8004540:	657b      	str	r3, [r7, #84]	@ 0x54
 8004542:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004546:	460b      	mov	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800454c:	4b9e      	ldr	r3, [pc, #632]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800455c:	4a9a      	ldr	r2, [pc, #616]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455e:	430b      	orrs	r3, r1
 8004560:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004570:	2300      	movs	r3, #0
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004574:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800457e:	4b92      	ldr	r3, [pc, #584]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004582:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800458c:	4a8e      	ldr	r2, [pc, #568]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458e:	430b      	orrs	r3, r1
 8004590:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800459e:	643b      	str	r3, [r7, #64]	@ 0x40
 80045a0:	2300      	movs	r3, #0
 80045a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ae:	4b86      	ldr	r3, [pc, #536]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4a85      	ldr	r2, [pc, #532]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045b8:	6113      	str	r3, [r2, #16]
 80045ba:	4b83      	ldr	r3, [pc, #524]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045bc:	6919      	ldr	r1, [r3, #16]
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045c6:	4a80      	ldr	r2, [pc, #512]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045da:	2300      	movs	r3, #0
 80045dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045e8:	4b77      	ldr	r3, [pc, #476]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	4a74      	ldr	r2, [pc, #464]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f8:	430b      	orrs	r3, r1
 80045fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004608:	633b      	str	r3, [r7, #48]	@ 0x30
 800460a:	2300      	movs	r3, #0
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
 800460e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004618:	4b6b      	ldr	r3, [pc, #428]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004628:	4a67      	ldr	r2, [pc, #412]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462a:	430b      	orrs	r3, r1
 800462c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	2100      	movs	r1, #0
 8004638:	62b9      	str	r1, [r7, #40]	@ 0x28
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004640:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d011      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	3308      	adds	r3, #8
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fb78 	bl	8004d48 <RCCEx_PLL2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	2100      	movs	r1, #0
 8004678:	6239      	str	r1, [r7, #32]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004680:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d011      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	3308      	adds	r3, #8
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fb58 	bl	8004d48 <RCCEx_PLL2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	2100      	movs	r1, #0
 80046b8:	61b9      	str	r1, [r7, #24]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046c4:	460b      	mov	r3, r1
 80046c6:	4313      	orrs	r3, r2
 80046c8:	d011      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	3308      	adds	r3, #8
 80046d0:	2102      	movs	r1, #2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fb38 	bl	8004d48 <RCCEx_PLL2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	2100      	movs	r1, #0
 80046f8:	6139      	str	r1, [r7, #16]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d011      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	3328      	adds	r3, #40	@ 0x28
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fbca 	bl	8004eac <RCCEx_PLL3_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	2100      	movs	r1, #0
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004744:	460b      	mov	r3, r1
 8004746:	4313      	orrs	r3, r2
 8004748:	d011      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	3328      	adds	r3, #40	@ 0x28
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fbaa 	bl	8004eac <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	2100      	movs	r1, #0
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d011      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	3328      	adds	r3, #40	@ 0x28
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb8a 	bl	8004eac <RCCEx_PLL3_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80047ae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
}
 80047bc:	4618      	mov	r0, r3
 80047be:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80047c2:	46bd      	mov	sp, r7
 80047c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c8:	58024400 	.word	0x58024400

080047cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047d0:	f7fe fd96 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4904      	ldr	r1, [pc, #16]	@ (80047f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	58024400 	.word	0x58024400
 80047f4:	08006854 	.word	0x08006854

080047f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	@ 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004800:	4ba1      	ldr	r3, [pc, #644]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800480a:	4b9f      	ldr	r3, [pc, #636]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	0b1b      	lsrs	r3, r3, #12
 8004810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004814:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004816:	4b9c      	ldr	r3, [pc, #624]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004822:	4b99      	ldr	r3, [pc, #612]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	08db      	lsrs	r3, r3, #3
 8004828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8111 	beq.w	8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b02      	cmp	r3, #2
 800484a:	f000 8083 	beq.w	8004954 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b02      	cmp	r3, #2
 8004852:	f200 80a1 	bhi.w	8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d056      	beq.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004862:	e099      	b.n	8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004864:	4b88      	ldr	r3, [pc, #544]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d02d      	beq.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004870:	4b85      	ldr	r3, [pc, #532]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	08db      	lsrs	r3, r3, #3
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	4a84      	ldr	r2, [pc, #528]	@ (8004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
 8004880:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048ca:	e087      	b.n	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048de:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490e:	e065      	b.n	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800491e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004922:	4b59      	ldr	r3, [pc, #356]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004932:	ed97 6a03 	vldr	s12, [r7, #12]
 8004936:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800493a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004952:	e043      	b.n	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004966:	4b48      	ldr	r3, [pc, #288]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004976:	ed97 6a03 	vldr	s12, [r7, #12]
 800497a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800497e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004996:	e021      	b.n	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049aa:	4b37      	ldr	r3, [pc, #220]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80049be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e0:	0a5b      	lsrs	r3, r3, #9
 80049e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a02:	ee17 2a90 	vmov	r2, s15
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a30:	ee17 2a90 	vmov	r2, s15
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a38:	4b13      	ldr	r3, [pc, #76]	@ (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	0e1b      	lsrs	r3, r3, #24
 8004a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5e:	ee17 2a90 	vmov	r2, s15
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a66:	e008      	b.n	8004a7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
}
 8004a7a:	bf00      	nop
 8004a7c:	3724      	adds	r7, #36	@ 0x24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	03d09000 	.word	0x03d09000
 8004a90:	46000000 	.word	0x46000000
 8004a94:	4c742400 	.word	0x4c742400
 8004a98:	4a742400 	.word	0x4a742400
 8004a9c:	4af42400 	.word	0x4af42400

08004aa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	@ 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aa8:	4ba1      	ldr	r3, [pc, #644]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ab2:	4b9f      	ldr	r3, [pc, #636]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	0d1b      	lsrs	r3, r3, #20
 8004ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004abc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004abe:	4b9c      	ldr	r3, [pc, #624]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aca:	4b99      	ldr	r3, [pc, #612]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	08db      	lsrs	r3, r3, #3
 8004ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8111 	beq.w	8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f000 8083 	beq.w	8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	f200 80a1 	bhi.w	8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d056      	beq.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b0a:	e099      	b.n	8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b0c:	4b88      	ldr	r3, [pc, #544]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02d      	beq.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b18:	4b85      	ldr	r3, [pc, #532]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	08db      	lsrs	r3, r3, #3
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	4a84      	ldr	r2, [pc, #528]	@ (8004d34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b7b      	ldr	r3, [pc, #492]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b72:	e087      	b.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b6a      	ldr	r3, [pc, #424]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	e065      	b.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b59      	ldr	r3, [pc, #356]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfa:	e043      	b.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b48      	ldr	r3, [pc, #288]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3e:	e021      	b.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c84:	4b2a      	ldr	r3, [pc, #168]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	0a5b      	lsrs	r3, r3, #9
 8004c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004caa:	ee17 2a90 	vmov	r2, s15
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd8:	ee17 2a90 	vmov	r2, s15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ce0:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	0e1b      	lsrs	r3, r3, #24
 8004ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d06:	ee17 2a90 	vmov	r2, s15
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d0e:	e008      	b.n	8004d22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
}
 8004d22:	bf00      	nop
 8004d24:	3724      	adds	r7, #36	@ 0x24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
 8004d34:	03d09000 	.word	0x03d09000
 8004d38:	46000000 	.word	0x46000000
 8004d3c:	4c742400 	.word	0x4c742400
 8004d40:	4a742400 	.word	0x4a742400
 8004d44:	4af42400 	.word	0x4af42400

08004d48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d56:	4b53      	ldr	r3, [pc, #332]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d101      	bne.n	8004d66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e099      	b.n	8004e9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d66:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d72:	f7fc fa49 	bl	8001208 <HAL_GetTick>
 8004d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d7a:	f7fc fa45 	bl	8001208 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e086      	b.n	8004e9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d8c:	4b45      	ldr	r3, [pc, #276]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d98:	4b42      	ldr	r3, [pc, #264]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	493f      	ldr	r1, [pc, #252]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	025b      	lsls	r3, r3, #9
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ddc:	4931      	ldr	r1, [pc, #196]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004de2:	4b30      	ldr	r3, [pc, #192]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	492d      	ldr	r1, [pc, #180]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004df4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	f023 0220 	bic.w	r2, r3, #32
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	4928      	ldr	r1, [pc, #160]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e06:	4b27      	ldr	r3, [pc, #156]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	4a26      	ldr	r2, [pc, #152]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	f023 0310 	bic.w	r3, r3, #16
 8004e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e12:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e16:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <RCCEx_PLL2_Config+0x160>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	69d2      	ldr	r2, [r2, #28]
 8004e1e:	00d2      	lsls	r2, r2, #3
 8004e20:	4920      	ldr	r1, [pc, #128]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e26:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	f043 0310 	orr.w	r3, r3, #16
 8004e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e44:	e00f      	b.n	8004e66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d106      	bne.n	8004e5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4a14      	ldr	r2, [pc, #80]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e58:	e005      	b.n	8004e66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5e:	4a11      	ldr	r2, [pc, #68]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e72:	f7fc f9c9 	bl	8001208 <HAL_GetTick>
 8004e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e78:	e008      	b.n	8004e8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e7a:	f7fc f9c5 	bl	8001208 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <RCCEx_PLL2_Config+0x15c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	ffff0007 	.word	0xffff0007

08004eac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eba:	4b53      	ldr	r3, [pc, #332]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d101      	bne.n	8004eca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e099      	b.n	8004ffe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eca:	4b4f      	ldr	r3, [pc, #316]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a4e      	ldr	r2, [pc, #312]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed6:	f7fc f997 	bl	8001208 <HAL_GetTick>
 8004eda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004edc:	e008      	b.n	8004ef0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ede:	f7fc f993 	bl	8001208 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e086      	b.n	8004ffe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ef0:	4b45      	ldr	r3, [pc, #276]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004efc:	4b42      	ldr	r3, [pc, #264]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	051b      	lsls	r3, r3, #20
 8004f0a:	493f      	ldr	r1, [pc, #252]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	025b      	lsls	r3, r3, #9
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	041b      	lsls	r3, r3, #16
 8004f2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f40:	4931      	ldr	r1, [pc, #196]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f46:	4b30      	ldr	r3, [pc, #192]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	492d      	ldr	r1, [pc, #180]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f58:	4b2b      	ldr	r3, [pc, #172]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	4928      	ldr	r1, [pc, #160]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f6a:	4b27      	ldr	r3, [pc, #156]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	4a26      	ldr	r2, [pc, #152]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f76:	4b24      	ldr	r3, [pc, #144]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f7a:	4b24      	ldr	r3, [pc, #144]	@ (800500c <RCCEx_PLL3_Config+0x160>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	69d2      	ldr	r2, [r2, #28]
 8004f82:	00d2      	lsls	r2, r2, #3
 8004f84:	4920      	ldr	r1, [pc, #128]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004fa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fa8:	e00f      	b.n	8004fca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d106      	bne.n	8004fbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fb0:	4b15      	ldr	r3, [pc, #84]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	4a14      	ldr	r2, [pc, #80]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fbc:	e005      	b.n	8004fca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fbe:	4b12      	ldr	r3, [pc, #72]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	4a11      	ldr	r2, [pc, #68]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fca:	4b0f      	ldr	r3, [pc, #60]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a0e      	ldr	r2, [pc, #56]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd6:	f7fc f917 	bl	8001208 <HAL_GetTick>
 8004fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fdc:	e008      	b.n	8004ff0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fde:	f7fc f913 	bl	8001208 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e006      	b.n	8004ffe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <RCCEx_PLL3_Config+0x15c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
 800500c:	ffff0007 	.word	0xffff0007

08005010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e042      	b.n	80050a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fb fe8b 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	@ 0x24
 800503e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fd90 	bl	8005b80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f825 	bl	80050b0 <UART_SetConfig>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e01b      	b.n	80050a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800507e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800508e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fe0f 	bl	8005cc4 <UART_CheckIdleState>
 80050a6:	4603      	mov	r3, r0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b4:	b092      	sub	sp, #72	@ 0x48
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4bbe      	ldr	r3, [pc, #760]	@ (80053d8 <UART_SetConfig+0x328>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4ab3      	ldr	r2, [pc, #716]	@ (80053dc <UART_SetConfig+0x32c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005118:	4313      	orrs	r3, r2
 800511a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	4baf      	ldr	r3, [pc, #700]	@ (80053e0 <UART_SetConfig+0x330>)
 8005124:	4013      	ands	r3, r2
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800512c:	430b      	orrs	r3, r1
 800512e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	f023 010f 	bic.w	r1, r3, #15
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4aa6      	ldr	r2, [pc, #664]	@ (80053e4 <UART_SetConfig+0x334>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d177      	bne.n	8005240 <UART_SetConfig+0x190>
 8005150:	4ba5      	ldr	r3, [pc, #660]	@ (80053e8 <UART_SetConfig+0x338>)
 8005152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005158:	2b28      	cmp	r3, #40	@ 0x28
 800515a:	d86d      	bhi.n	8005238 <UART_SetConfig+0x188>
 800515c:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <UART_SetConfig+0xb4>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005209 	.word	0x08005209
 8005168:	08005239 	.word	0x08005239
 800516c:	08005239 	.word	0x08005239
 8005170:	08005239 	.word	0x08005239
 8005174:	08005239 	.word	0x08005239
 8005178:	08005239 	.word	0x08005239
 800517c:	08005239 	.word	0x08005239
 8005180:	08005239 	.word	0x08005239
 8005184:	08005211 	.word	0x08005211
 8005188:	08005239 	.word	0x08005239
 800518c:	08005239 	.word	0x08005239
 8005190:	08005239 	.word	0x08005239
 8005194:	08005239 	.word	0x08005239
 8005198:	08005239 	.word	0x08005239
 800519c:	08005239 	.word	0x08005239
 80051a0:	08005239 	.word	0x08005239
 80051a4:	08005219 	.word	0x08005219
 80051a8:	08005239 	.word	0x08005239
 80051ac:	08005239 	.word	0x08005239
 80051b0:	08005239 	.word	0x08005239
 80051b4:	08005239 	.word	0x08005239
 80051b8:	08005239 	.word	0x08005239
 80051bc:	08005239 	.word	0x08005239
 80051c0:	08005239 	.word	0x08005239
 80051c4:	08005221 	.word	0x08005221
 80051c8:	08005239 	.word	0x08005239
 80051cc:	08005239 	.word	0x08005239
 80051d0:	08005239 	.word	0x08005239
 80051d4:	08005239 	.word	0x08005239
 80051d8:	08005239 	.word	0x08005239
 80051dc:	08005239 	.word	0x08005239
 80051e0:	08005239 	.word	0x08005239
 80051e4:	08005229 	.word	0x08005229
 80051e8:	08005239 	.word	0x08005239
 80051ec:	08005239 	.word	0x08005239
 80051f0:	08005239 	.word	0x08005239
 80051f4:	08005239 	.word	0x08005239
 80051f8:	08005239 	.word	0x08005239
 80051fc:	08005239 	.word	0x08005239
 8005200:	08005239 	.word	0x08005239
 8005204:	08005231 	.word	0x08005231
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520e:	e222      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005210:	2304      	movs	r3, #4
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e21e      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005218:	2308      	movs	r3, #8
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521e:	e21a      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005220:	2310      	movs	r3, #16
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005226:	e216      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005228:	2320      	movs	r3, #32
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522e:	e212      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005230:	2340      	movs	r3, #64	@ 0x40
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005236:	e20e      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005238:	2380      	movs	r3, #128	@ 0x80
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523e:	e20a      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a69      	ldr	r2, [pc, #420]	@ (80053ec <UART_SetConfig+0x33c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d130      	bne.n	80052ac <UART_SetConfig+0x1fc>
 800524a:	4b67      	ldr	r3, [pc, #412]	@ (80053e8 <UART_SetConfig+0x338>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	2b05      	cmp	r3, #5
 8005254:	d826      	bhi.n	80052a4 <UART_SetConfig+0x1f4>
 8005256:	a201      	add	r2, pc, #4	@ (adr r2, 800525c <UART_SetConfig+0x1ac>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005275 	.word	0x08005275
 8005260:	0800527d 	.word	0x0800527d
 8005264:	08005285 	.word	0x08005285
 8005268:	0800528d 	.word	0x0800528d
 800526c:	08005295 	.word	0x08005295
 8005270:	0800529d 	.word	0x0800529d
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527a:	e1ec      	b.n	8005656 <UART_SetConfig+0x5a6>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005282:	e1e8      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528a:	e1e4      	b.n	8005656 <UART_SetConfig+0x5a6>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005292:	e1e0      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005294:	2320      	movs	r3, #32
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529a:	e1dc      	b.n	8005656 <UART_SetConfig+0x5a6>
 800529c:	2340      	movs	r3, #64	@ 0x40
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a2:	e1d8      	b.n	8005656 <UART_SetConfig+0x5a6>
 80052a4:	2380      	movs	r3, #128	@ 0x80
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052aa:	e1d4      	b.n	8005656 <UART_SetConfig+0x5a6>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a4f      	ldr	r2, [pc, #316]	@ (80053f0 <UART_SetConfig+0x340>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d130      	bne.n	8005318 <UART_SetConfig+0x268>
 80052b6:	4b4c      	ldr	r3, [pc, #304]	@ (80053e8 <UART_SetConfig+0x338>)
 80052b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d826      	bhi.n	8005310 <UART_SetConfig+0x260>
 80052c2:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <UART_SetConfig+0x218>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052e1 	.word	0x080052e1
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	080052f1 	.word	0x080052f1
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005309 	.word	0x08005309
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e1b6      	b.n	8005656 <UART_SetConfig+0x5a6>
 80052e8:	2304      	movs	r3, #4
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ee:	e1b2      	b.n	8005656 <UART_SetConfig+0x5a6>
 80052f0:	2308      	movs	r3, #8
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f6:	e1ae      	b.n	8005656 <UART_SetConfig+0x5a6>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fe:	e1aa      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005300:	2320      	movs	r3, #32
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005306:	e1a6      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005308:	2340      	movs	r3, #64	@ 0x40
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530e:	e1a2      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005316:	e19e      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a35      	ldr	r2, [pc, #212]	@ (80053f4 <UART_SetConfig+0x344>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d130      	bne.n	8005384 <UART_SetConfig+0x2d4>
 8005322:	4b31      	ldr	r3, [pc, #196]	@ (80053e8 <UART_SetConfig+0x338>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b05      	cmp	r3, #5
 800532c:	d826      	bhi.n	800537c <UART_SetConfig+0x2cc>
 800532e:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0x284>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	0800534d 	.word	0x0800534d
 8005338:	08005355 	.word	0x08005355
 800533c:	0800535d 	.word	0x0800535d
 8005340:	08005365 	.word	0x08005365
 8005344:	0800536d 	.word	0x0800536d
 8005348:	08005375 	.word	0x08005375
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e180      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e17c      	b.n	8005656 <UART_SetConfig+0x5a6>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005362:	e178      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536a:	e174      	b.n	8005656 <UART_SetConfig+0x5a6>
 800536c:	2320      	movs	r3, #32
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005372:	e170      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005374:	2340      	movs	r3, #64	@ 0x40
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537a:	e16c      	b.n	8005656 <UART_SetConfig+0x5a6>
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005382:	e168      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1b      	ldr	r2, [pc, #108]	@ (80053f8 <UART_SetConfig+0x348>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d142      	bne.n	8005414 <UART_SetConfig+0x364>
 800538e:	4b16      	ldr	r3, [pc, #88]	@ (80053e8 <UART_SetConfig+0x338>)
 8005390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	2b05      	cmp	r3, #5
 8005398:	d838      	bhi.n	800540c <UART_SetConfig+0x35c>
 800539a:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <UART_SetConfig+0x2f0>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053b9 	.word	0x080053b9
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	080053c9 	.word	0x080053c9
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053fd 	.word	0x080053fd
 80053b4:	08005405 	.word	0x08005405
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e14a      	b.n	8005656 <UART_SetConfig+0x5a6>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e146      	b.n	8005656 <UART_SetConfig+0x5a6>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e142      	b.n	8005656 <UART_SetConfig+0x5a6>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d6:	e13e      	b.n	8005656 <UART_SetConfig+0x5a6>
 80053d8:	cfff69f3 	.word	0xcfff69f3
 80053dc:	58000c00 	.word	0x58000c00
 80053e0:	11fff4ff 	.word	0x11fff4ff
 80053e4:	40011000 	.word	0x40011000
 80053e8:	58024400 	.word	0x58024400
 80053ec:	40004400 	.word	0x40004400
 80053f0:	40004800 	.word	0x40004800
 80053f4:	40004c00 	.word	0x40004c00
 80053f8:	40005000 	.word	0x40005000
 80053fc:	2320      	movs	r3, #32
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e128      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005404:	2340      	movs	r3, #64	@ 0x40
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e124      	b.n	8005656 <UART_SetConfig+0x5a6>
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e120      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4acb      	ldr	r2, [pc, #812]	@ (8005748 <UART_SetConfig+0x698>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d176      	bne.n	800550c <UART_SetConfig+0x45c>
 800541e:	4bcb      	ldr	r3, [pc, #812]	@ (800574c <UART_SetConfig+0x69c>)
 8005420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005426:	2b28      	cmp	r3, #40	@ 0x28
 8005428:	d86c      	bhi.n	8005504 <UART_SetConfig+0x454>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <UART_SetConfig+0x380>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	080054d5 	.word	0x080054d5
 8005434:	08005505 	.word	0x08005505
 8005438:	08005505 	.word	0x08005505
 800543c:	08005505 	.word	0x08005505
 8005440:	08005505 	.word	0x08005505
 8005444:	08005505 	.word	0x08005505
 8005448:	08005505 	.word	0x08005505
 800544c:	08005505 	.word	0x08005505
 8005450:	080054dd 	.word	0x080054dd
 8005454:	08005505 	.word	0x08005505
 8005458:	08005505 	.word	0x08005505
 800545c:	08005505 	.word	0x08005505
 8005460:	08005505 	.word	0x08005505
 8005464:	08005505 	.word	0x08005505
 8005468:	08005505 	.word	0x08005505
 800546c:	08005505 	.word	0x08005505
 8005470:	080054e5 	.word	0x080054e5
 8005474:	08005505 	.word	0x08005505
 8005478:	08005505 	.word	0x08005505
 800547c:	08005505 	.word	0x08005505
 8005480:	08005505 	.word	0x08005505
 8005484:	08005505 	.word	0x08005505
 8005488:	08005505 	.word	0x08005505
 800548c:	08005505 	.word	0x08005505
 8005490:	080054ed 	.word	0x080054ed
 8005494:	08005505 	.word	0x08005505
 8005498:	08005505 	.word	0x08005505
 800549c:	08005505 	.word	0x08005505
 80054a0:	08005505 	.word	0x08005505
 80054a4:	08005505 	.word	0x08005505
 80054a8:	08005505 	.word	0x08005505
 80054ac:	08005505 	.word	0x08005505
 80054b0:	080054f5 	.word	0x080054f5
 80054b4:	08005505 	.word	0x08005505
 80054b8:	08005505 	.word	0x08005505
 80054bc:	08005505 	.word	0x08005505
 80054c0:	08005505 	.word	0x08005505
 80054c4:	08005505 	.word	0x08005505
 80054c8:	08005505 	.word	0x08005505
 80054cc:	08005505 	.word	0x08005505
 80054d0:	080054fd 	.word	0x080054fd
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e0bc      	b.n	8005656 <UART_SetConfig+0x5a6>
 80054dc:	2304      	movs	r3, #4
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e0b8      	b.n	8005656 <UART_SetConfig+0x5a6>
 80054e4:	2308      	movs	r3, #8
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e0b4      	b.n	8005656 <UART_SetConfig+0x5a6>
 80054ec:	2310      	movs	r3, #16
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e0b0      	b.n	8005656 <UART_SetConfig+0x5a6>
 80054f4:	2320      	movs	r3, #32
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fa:	e0ac      	b.n	8005656 <UART_SetConfig+0x5a6>
 80054fc:	2340      	movs	r3, #64	@ 0x40
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005502:	e0a8      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005504:	2380      	movs	r3, #128	@ 0x80
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550a:	e0a4      	b.n	8005656 <UART_SetConfig+0x5a6>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a8f      	ldr	r2, [pc, #572]	@ (8005750 <UART_SetConfig+0x6a0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d130      	bne.n	8005578 <UART_SetConfig+0x4c8>
 8005516:	4b8d      	ldr	r3, [pc, #564]	@ (800574c <UART_SetConfig+0x69c>)
 8005518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b05      	cmp	r3, #5
 8005520:	d826      	bhi.n	8005570 <UART_SetConfig+0x4c0>
 8005522:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <UART_SetConfig+0x478>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005541 	.word	0x08005541
 800552c:	08005549 	.word	0x08005549
 8005530:	08005551 	.word	0x08005551
 8005534:	08005559 	.word	0x08005559
 8005538:	08005561 	.word	0x08005561
 800553c:	08005569 	.word	0x08005569
 8005540:	2300      	movs	r3, #0
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e086      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e082      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005556:	e07e      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555e:	e07a      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005560:	2320      	movs	r3, #32
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005566:	e076      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005568:	2340      	movs	r3, #64	@ 0x40
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e072      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005576:	e06e      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a75      	ldr	r2, [pc, #468]	@ (8005754 <UART_SetConfig+0x6a4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d130      	bne.n	80055e4 <UART_SetConfig+0x534>
 8005582:	4b72      	ldr	r3, [pc, #456]	@ (800574c <UART_SetConfig+0x69c>)
 8005584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b05      	cmp	r3, #5
 800558c:	d826      	bhi.n	80055dc <UART_SetConfig+0x52c>
 800558e:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <UART_SetConfig+0x4e4>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055ad 	.word	0x080055ad
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055bd 	.word	0x080055bd
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e050      	b.n	8005656 <UART_SetConfig+0x5a6>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e04c      	b.n	8005656 <UART_SetConfig+0x5a6>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e048      	b.n	8005656 <UART_SetConfig+0x5a6>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ca:	e044      	b.n	8005656 <UART_SetConfig+0x5a6>
 80055cc:	2320      	movs	r3, #32
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d2:	e040      	b.n	8005656 <UART_SetConfig+0x5a6>
 80055d4:	2340      	movs	r3, #64	@ 0x40
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055da:	e03c      	b.n	8005656 <UART_SetConfig+0x5a6>
 80055dc:	2380      	movs	r3, #128	@ 0x80
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e038      	b.n	8005656 <UART_SetConfig+0x5a6>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005758 <UART_SetConfig+0x6a8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d130      	bne.n	8005650 <UART_SetConfig+0x5a0>
 80055ee:	4b57      	ldr	r3, [pc, #348]	@ (800574c <UART_SetConfig+0x69c>)
 80055f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d826      	bhi.n	8005648 <UART_SetConfig+0x598>
 80055fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <UART_SetConfig+0x550>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005619 	.word	0x08005619
 8005604:	08005621 	.word	0x08005621
 8005608:	08005629 	.word	0x08005629
 800560c:	08005631 	.word	0x08005631
 8005610:	08005639 	.word	0x08005639
 8005614:	08005641 	.word	0x08005641
 8005618:	2302      	movs	r3, #2
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e01a      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e016      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e012      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e00e      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005638:	2320      	movs	r3, #32
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563e:	e00a      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005640:	2340      	movs	r3, #64	@ 0x40
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e006      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e002      	b.n	8005656 <UART_SetConfig+0x5a6>
 8005650:	2380      	movs	r3, #128	@ 0x80
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a3f      	ldr	r2, [pc, #252]	@ (8005758 <UART_SetConfig+0x6a8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	f040 80f8 	bne.w	8005852 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005662:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005666:	2b20      	cmp	r3, #32
 8005668:	dc46      	bgt.n	80056f8 <UART_SetConfig+0x648>
 800566a:	2b02      	cmp	r3, #2
 800566c:	f2c0 8082 	blt.w	8005774 <UART_SetConfig+0x6c4>
 8005670:	3b02      	subs	r3, #2
 8005672:	2b1e      	cmp	r3, #30
 8005674:	d87e      	bhi.n	8005774 <UART_SetConfig+0x6c4>
 8005676:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <UART_SetConfig+0x5cc>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056ff 	.word	0x080056ff
 8005680:	08005775 	.word	0x08005775
 8005684:	08005707 	.word	0x08005707
 8005688:	08005775 	.word	0x08005775
 800568c:	08005775 	.word	0x08005775
 8005690:	08005775 	.word	0x08005775
 8005694:	08005717 	.word	0x08005717
 8005698:	08005775 	.word	0x08005775
 800569c:	08005775 	.word	0x08005775
 80056a0:	08005775 	.word	0x08005775
 80056a4:	08005775 	.word	0x08005775
 80056a8:	08005775 	.word	0x08005775
 80056ac:	08005775 	.word	0x08005775
 80056b0:	08005775 	.word	0x08005775
 80056b4:	08005727 	.word	0x08005727
 80056b8:	08005775 	.word	0x08005775
 80056bc:	08005775 	.word	0x08005775
 80056c0:	08005775 	.word	0x08005775
 80056c4:	08005775 	.word	0x08005775
 80056c8:	08005775 	.word	0x08005775
 80056cc:	08005775 	.word	0x08005775
 80056d0:	08005775 	.word	0x08005775
 80056d4:	08005775 	.word	0x08005775
 80056d8:	08005775 	.word	0x08005775
 80056dc:	08005775 	.word	0x08005775
 80056e0:	08005775 	.word	0x08005775
 80056e4:	08005775 	.word	0x08005775
 80056e8:	08005775 	.word	0x08005775
 80056ec:	08005775 	.word	0x08005775
 80056f0:	08005775 	.word	0x08005775
 80056f4:	08005767 	.word	0x08005767
 80056f8:	2b40      	cmp	r3, #64	@ 0x40
 80056fa:	d037      	beq.n	800576c <UART_SetConfig+0x6bc>
 80056fc:	e03a      	b.n	8005774 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056fe:	f7ff f865 	bl	80047cc <HAL_RCCEx_GetD3PCLK1Freq>
 8005702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005704:	e03c      	b.n	8005780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff f874 	bl	80047f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005714:	e034      	b.n	8005780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005716:	f107 0318 	add.w	r3, r7, #24
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff f9c0 	bl	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005724:	e02c      	b.n	8005780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005726:	4b09      	ldr	r3, [pc, #36]	@ (800574c <UART_SetConfig+0x69c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005732:	4b06      	ldr	r3, [pc, #24]	@ (800574c <UART_SetConfig+0x69c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	4a07      	ldr	r2, [pc, #28]	@ (800575c <UART_SetConfig+0x6ac>)
 800573e:	fa22 f303 	lsr.w	r3, r2, r3
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005744:	e01c      	b.n	8005780 <UART_SetConfig+0x6d0>
 8005746:	bf00      	nop
 8005748:	40011400 	.word	0x40011400
 800574c:	58024400 	.word	0x58024400
 8005750:	40007800 	.word	0x40007800
 8005754:	40007c00 	.word	0x40007c00
 8005758:	58000c00 	.word	0x58000c00
 800575c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005760:	4b9d      	ldr	r3, [pc, #628]	@ (80059d8 <UART_SetConfig+0x928>)
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005764:	e00c      	b.n	8005780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005766:	4b9d      	ldr	r3, [pc, #628]	@ (80059dc <UART_SetConfig+0x92c>)
 8005768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576a:	e009      	b.n	8005780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005772:	e005      	b.n	8005780 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800577e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 81de 	beq.w	8005b44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	4a94      	ldr	r2, [pc, #592]	@ (80059e0 <UART_SetConfig+0x930>)
 800578e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005792:	461a      	mov	r2, r3
 8005794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005796:	fbb3 f3f2 	udiv	r3, r3, r2
 800579a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d305      	bcc.n	80057b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d903      	bls.n	80057c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80057be:	e1c1      	b.n	8005b44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c2:	2200      	movs	r2, #0
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	60fa      	str	r2, [r7, #12]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	4a84      	ldr	r2, [pc, #528]	@ (80059e0 <UART_SetConfig+0x930>)
 80057ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2200      	movs	r2, #0
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057e2:	f7fa fd79 	bl	80002d8 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4610      	mov	r0, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	020b      	lsls	r3, r1, #8
 80057f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057fc:	0202      	lsls	r2, r0, #8
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	6849      	ldr	r1, [r1, #4]
 8005802:	0849      	lsrs	r1, r1, #1
 8005804:	2000      	movs	r0, #0
 8005806:	460c      	mov	r4, r1
 8005808:	4605      	mov	r5, r0
 800580a:	eb12 0804 	adds.w	r8, r2, r4
 800580e:	eb43 0905 	adc.w	r9, r3, r5
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	469a      	mov	sl, r3
 800581a:	4693      	mov	fp, r2
 800581c:	4652      	mov	r2, sl
 800581e:	465b      	mov	r3, fp
 8005820:	4640      	mov	r0, r8
 8005822:	4649      	mov	r1, r9
 8005824:	f7fa fd58 	bl	80002d8 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4613      	mov	r3, r2
 800582e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005836:	d308      	bcc.n	800584a <UART_SetConfig+0x79a>
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800583e:	d204      	bcs.n	800584a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005846:	60da      	str	r2, [r3, #12]
 8005848:	e17c      	b.n	8005b44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005850:	e178      	b.n	8005b44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800585a:	f040 80c5 	bne.w	80059e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800585e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005862:	2b20      	cmp	r3, #32
 8005864:	dc48      	bgt.n	80058f8 <UART_SetConfig+0x848>
 8005866:	2b00      	cmp	r3, #0
 8005868:	db7b      	blt.n	8005962 <UART_SetConfig+0x8b2>
 800586a:	2b20      	cmp	r3, #32
 800586c:	d879      	bhi.n	8005962 <UART_SetConfig+0x8b2>
 800586e:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <UART_SetConfig+0x7c4>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	080058ff 	.word	0x080058ff
 8005878:	08005907 	.word	0x08005907
 800587c:	08005963 	.word	0x08005963
 8005880:	08005963 	.word	0x08005963
 8005884:	0800590f 	.word	0x0800590f
 8005888:	08005963 	.word	0x08005963
 800588c:	08005963 	.word	0x08005963
 8005890:	08005963 	.word	0x08005963
 8005894:	0800591f 	.word	0x0800591f
 8005898:	08005963 	.word	0x08005963
 800589c:	08005963 	.word	0x08005963
 80058a0:	08005963 	.word	0x08005963
 80058a4:	08005963 	.word	0x08005963
 80058a8:	08005963 	.word	0x08005963
 80058ac:	08005963 	.word	0x08005963
 80058b0:	08005963 	.word	0x08005963
 80058b4:	0800592f 	.word	0x0800592f
 80058b8:	08005963 	.word	0x08005963
 80058bc:	08005963 	.word	0x08005963
 80058c0:	08005963 	.word	0x08005963
 80058c4:	08005963 	.word	0x08005963
 80058c8:	08005963 	.word	0x08005963
 80058cc:	08005963 	.word	0x08005963
 80058d0:	08005963 	.word	0x08005963
 80058d4:	08005963 	.word	0x08005963
 80058d8:	08005963 	.word	0x08005963
 80058dc:	08005963 	.word	0x08005963
 80058e0:	08005963 	.word	0x08005963
 80058e4:	08005963 	.word	0x08005963
 80058e8:	08005963 	.word	0x08005963
 80058ec:	08005963 	.word	0x08005963
 80058f0:	08005963 	.word	0x08005963
 80058f4:	08005955 	.word	0x08005955
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d02e      	beq.n	800595a <UART_SetConfig+0x8aa>
 80058fc:	e031      	b.n	8005962 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058fe:	f7fd fd2f 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8005902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005904:	e033      	b.n	800596e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005906:	f7fd fd41 	bl	800338c <HAL_RCC_GetPCLK2Freq>
 800590a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800590c:	e02f      	b.n	800596e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800590e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe ff70 	bl	80047f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800591c:	e027      	b.n	800596e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800591e:	f107 0318 	add.w	r3, r7, #24
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff f8bc 	bl	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800592c:	e01f      	b.n	800596e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800592e:	4b2d      	ldr	r3, [pc, #180]	@ (80059e4 <UART_SetConfig+0x934>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800593a:	4b2a      	ldr	r3, [pc, #168]	@ (80059e4 <UART_SetConfig+0x934>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	08db      	lsrs	r3, r3, #3
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	4a24      	ldr	r2, [pc, #144]	@ (80059d8 <UART_SetConfig+0x928>)
 8005946:	fa22 f303 	lsr.w	r3, r2, r3
 800594a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800594c:	e00f      	b.n	800596e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800594e:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <UART_SetConfig+0x928>)
 8005950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005952:	e00c      	b.n	800596e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005954:	4b21      	ldr	r3, [pc, #132]	@ (80059dc <UART_SetConfig+0x92c>)
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005958:	e009      	b.n	800596e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800595a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005960:	e005      	b.n	800596e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800596c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800596e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80e7 	beq.w	8005b44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	4a19      	ldr	r2, [pc, #100]	@ (80059e0 <UART_SetConfig+0x930>)
 800597c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005980:	461a      	mov	r2, r3
 8005982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005984:	fbb3 f3f2 	udiv	r3, r3, r2
 8005988:	005a      	lsls	r2, r3, #1
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	085b      	lsrs	r3, r3, #1
 8005990:	441a      	add	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	fbb2 f3f3 	udiv	r3, r2, r3
 800599a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	2b0f      	cmp	r3, #15
 80059a0:	d916      	bls.n	80059d0 <UART_SetConfig+0x920>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a8:	d212      	bcs.n	80059d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f023 030f 	bic.w	r3, r3, #15
 80059b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	b29a      	uxth	r2, r3
 80059c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059c2:	4313      	orrs	r3, r2
 80059c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	e0b9      	b.n	8005b44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059d6:	e0b5      	b.n	8005b44 <UART_SetConfig+0xa94>
 80059d8:	03d09000 	.word	0x03d09000
 80059dc:	003d0900 	.word	0x003d0900
 80059e0:	08006864 	.word	0x08006864
 80059e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80059e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	dc49      	bgt.n	8005a84 <UART_SetConfig+0x9d4>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	db7c      	blt.n	8005aee <UART_SetConfig+0xa3e>
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d87a      	bhi.n	8005aee <UART_SetConfig+0xa3e>
 80059f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <UART_SetConfig+0x950>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005a8b 	.word	0x08005a8b
 8005a04:	08005a93 	.word	0x08005a93
 8005a08:	08005aef 	.word	0x08005aef
 8005a0c:	08005aef 	.word	0x08005aef
 8005a10:	08005a9b 	.word	0x08005a9b
 8005a14:	08005aef 	.word	0x08005aef
 8005a18:	08005aef 	.word	0x08005aef
 8005a1c:	08005aef 	.word	0x08005aef
 8005a20:	08005aab 	.word	0x08005aab
 8005a24:	08005aef 	.word	0x08005aef
 8005a28:	08005aef 	.word	0x08005aef
 8005a2c:	08005aef 	.word	0x08005aef
 8005a30:	08005aef 	.word	0x08005aef
 8005a34:	08005aef 	.word	0x08005aef
 8005a38:	08005aef 	.word	0x08005aef
 8005a3c:	08005aef 	.word	0x08005aef
 8005a40:	08005abb 	.word	0x08005abb
 8005a44:	08005aef 	.word	0x08005aef
 8005a48:	08005aef 	.word	0x08005aef
 8005a4c:	08005aef 	.word	0x08005aef
 8005a50:	08005aef 	.word	0x08005aef
 8005a54:	08005aef 	.word	0x08005aef
 8005a58:	08005aef 	.word	0x08005aef
 8005a5c:	08005aef 	.word	0x08005aef
 8005a60:	08005aef 	.word	0x08005aef
 8005a64:	08005aef 	.word	0x08005aef
 8005a68:	08005aef 	.word	0x08005aef
 8005a6c:	08005aef 	.word	0x08005aef
 8005a70:	08005aef 	.word	0x08005aef
 8005a74:	08005aef 	.word	0x08005aef
 8005a78:	08005aef 	.word	0x08005aef
 8005a7c:	08005aef 	.word	0x08005aef
 8005a80:	08005ae1 	.word	0x08005ae1
 8005a84:	2b40      	cmp	r3, #64	@ 0x40
 8005a86:	d02e      	beq.n	8005ae6 <UART_SetConfig+0xa36>
 8005a88:	e031      	b.n	8005aee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a8a:	f7fd fc69 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8005a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a90:	e033      	b.n	8005afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a92:	f7fd fc7b 	bl	800338c <HAL_RCC_GetPCLK2Freq>
 8005a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a98:	e02f      	b.n	8005afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe feaa 	bl	80047f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa8:	e027      	b.n	8005afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aaa:	f107 0318 	add.w	r3, r7, #24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fff6 	bl	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab8:	e01f      	b.n	8005afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aba:	4b2d      	ldr	r3, [pc, #180]	@ (8005b70 <UART_SetConfig+0xac0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b70 <UART_SetConfig+0xac0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	08db      	lsrs	r3, r3, #3
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	4a28      	ldr	r2, [pc, #160]	@ (8005b74 <UART_SetConfig+0xac4>)
 8005ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ad8:	e00f      	b.n	8005afa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005ada:	4b26      	ldr	r3, [pc, #152]	@ (8005b74 <UART_SetConfig+0xac4>)
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ade:	e00c      	b.n	8005afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ae0:	4b25      	ldr	r3, [pc, #148]	@ (8005b78 <UART_SetConfig+0xac8>)
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae4:	e009      	b.n	8005afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aec:	e005      	b.n	8005afa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005af8:	bf00      	nop
    }

    if (pclk != 0U)
 8005afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d021      	beq.n	8005b44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	4a1d      	ldr	r2, [pc, #116]	@ (8005b7c <UART_SetConfig+0xacc>)
 8005b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	441a      	add	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d909      	bls.n	8005b3e <UART_SetConfig+0xa8e>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b30:	d205      	bcs.n	8005b3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
 8005b3c:	e002      	b.n	8005b44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2200      	movs	r2, #0
 8005b58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3748      	adds	r7, #72	@ 0x48
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6e:	bf00      	nop
 8005b70:	58024400 	.word	0x58024400
 8005b74:	03d09000 	.word	0x03d09000
 8005b78:	003d0900 	.word	0x003d0900
 8005b7c:	08006864 	.word	0x08006864

08005b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c7e:	d10a      	bne.n	8005c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b098      	sub	sp, #96	@ 0x60
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd4:	f7fb fa98 	bl	8001208 <HAL_GetTick>
 8005cd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d12f      	bne.n	8005d48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f88e 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d022      	beq.n	8005d48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e6      	bne.n	8005d02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e063      	b.n	8005e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d149      	bne.n	8005dea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f857 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d03c      	beq.n	8005dea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dc2:	61fa      	str	r2, [r7, #28]
 8005dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	69b9      	ldr	r1, [r7, #24]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e5      	bne.n	8005da2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e012      	b.n	8005e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3758      	adds	r7, #88	@ 0x58
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e28:	e04f      	b.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d04b      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e32:	f7fb f9e9 	bl	8001208 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e04e      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d037      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b80      	cmp	r3, #128	@ 0x80
 8005e5e:	d034      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b40      	cmp	r3, #64	@ 0x40
 8005e64:	d031      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d110      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f839 	bl	8005ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2208      	movs	r2, #8
 8005e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e029      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea4:	d111      	bne.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f81f 	bl	8005ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e00f      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d0a0      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b095      	sub	sp, #84	@ 0x54
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e6      	bne.n	8005efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	4b1e      	ldr	r3, [pc, #120]	@ (8005fbc <UART_EndRxTransfer+0xc8>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e5      	bne.n	8005f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d118      	bne.n	8005f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f023 0310 	bic.w	r3, r3, #16
 8005f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6979      	ldr	r1, [r7, #20]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	613b      	str	r3, [r7, #16]
   return(result);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e6      	bne.n	8005f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fb0:	bf00      	nop
 8005fb2:	3754      	adds	r7, #84	@ 0x54
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	effffffe 	.word	0xeffffffe

08005fc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e027      	b.n	8006026 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2224      	movs	r2, #36	@ 0x24
 8005fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006004:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006046:	2302      	movs	r3, #2
 8006048:	e02d      	b.n	80060a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2224      	movs	r2, #36	@ 0x24
 8006056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f850 	bl	800612c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e02d      	b.n	8006122 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2224      	movs	r2, #36	@ 0x24
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f812 	bl	800612c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006138:	2b00      	cmp	r3, #0
 800613a:	d108      	bne.n	800614e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800614c:	e031      	b.n	80061b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800614e:	2310      	movs	r3, #16
 8006150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006152:	2310      	movs	r3, #16
 8006154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	0e5b      	lsrs	r3, r3, #25
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	0f5b      	lsrs	r3, r3, #29
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	7b3a      	ldrb	r2, [r7, #12]
 800617a:	4911      	ldr	r1, [pc, #68]	@ (80061c0 <UARTEx_SetNbDataToProcess+0x94>)
 800617c:	5c8a      	ldrb	r2, [r1, r2]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006182:	7b3a      	ldrb	r2, [r7, #12]
 8006184:	490f      	ldr	r1, [pc, #60]	@ (80061c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006188:	fb93 f3f2 	sdiv	r3, r3, r2
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	7b7a      	ldrb	r2, [r7, #13]
 8006198:	4909      	ldr	r1, [pc, #36]	@ (80061c0 <UARTEx_SetNbDataToProcess+0x94>)
 800619a:	5c8a      	ldrb	r2, [r1, r2]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061a0:	7b7a      	ldrb	r2, [r7, #13]
 80061a2:	4908      	ldr	r1, [pc, #32]	@ (80061c4 <UARTEx_SetNbDataToProcess+0x98>)
 80061a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	0800687c 	.word	0x0800687c
 80061c4:	08006884 	.word	0x08006884

080061c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c8:	b084      	sub	sp, #16
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	f107 001c 	add.w	r0, r7, #28
 80061d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d121      	bne.n	8006226 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	4b2c      	ldr	r3, [pc, #176]	@ (80062a4 <USB_CoreInit+0xdc>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006206:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800620a:	2b01      	cmp	r3, #1
 800620c:	d105      	bne.n	800621a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 faaa 	bl	8006774 <USB_CoreReset>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	e01b      	b.n	800625e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa9e 	bl	8006774 <USB_CoreReset>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800623c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006248:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006250:	e005      	b.n	800625e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006256:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800625e:	7fbb      	ldrb	r3, [r7, #30]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d116      	bne.n	8006292 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <USB_CoreInit+0xe0>)
 8006274:	4313      	orrs	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f043 0206 	orr.w	r2, r3, #6
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800629e:	b004      	add	sp, #16
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	ffbdffbf 	.word	0xffbdffbf
 80062a8:	03ee0000 	.word	0x03ee0000

080062ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f023 0201 	bic.w	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d115      	bne.n	800631c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062fc:	200a      	movs	r0, #10
 80062fe:	f7fa ff8f 	bl	8001220 <HAL_Delay>
      ms += 10U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	330a      	adds	r3, #10
 8006306:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa25 	bl	8006758 <USB_GetMode>
 800630e:	4603      	mov	r3, r0
 8006310:	2b01      	cmp	r3, #1
 8006312:	d01e      	beq.n	8006352 <USB_SetCurrentMode+0x84>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2bc7      	cmp	r3, #199	@ 0xc7
 8006318:	d9f0      	bls.n	80062fc <USB_SetCurrentMode+0x2e>
 800631a:	e01a      	b.n	8006352 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d115      	bne.n	800634e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800632e:	200a      	movs	r0, #10
 8006330:	f7fa ff76 	bl	8001220 <HAL_Delay>
      ms += 10U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	330a      	adds	r3, #10
 8006338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa0c 	bl	8006758 <USB_GetMode>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <USB_SetCurrentMode+0x84>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2bc7      	cmp	r3, #199	@ 0xc7
 800634a:	d9f0      	bls.n	800632e <USB_SetCurrentMode+0x60>
 800634c:	e001      	b.n	8006352 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e005      	b.n	800635e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2bc8      	cmp	r3, #200	@ 0xc8
 8006356:	d101      	bne.n	800635c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006368:	b084      	sub	sp, #16
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e009      	b.n	800639c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3340      	adds	r3, #64	@ 0x40
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	2200      	movs	r2, #0
 8006394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	3301      	adds	r3, #1
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b0e      	cmp	r3, #14
 80063a0:	d9f2      	bls.n	8006388 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11c      	bne.n	80063e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	e005      	b.n	80063f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063f6:	461a      	mov	r2, r3
 80063f8:	2300      	movs	r3, #0
 80063fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006400:	2b01      	cmp	r3, #1
 8006402:	d10d      	bne.n	8006420 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800640c:	2100      	movs	r1, #0
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f968 	bl	80066e4 <USB_SetDevSpeed>
 8006414:	e008      	b.n	8006428 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006416:	2101      	movs	r1, #1
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f963 	bl	80066e4 <USB_SetDevSpeed>
 800641e:	e003      	b.n	8006428 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006420:	2103      	movs	r1, #3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f95e 	bl	80066e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006428:	2110      	movs	r1, #16
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8fa 	bl	8006624 <USB_FlushTxFifo>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f924 	bl	8006688 <USB_FlushRxFifo>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006450:	461a      	mov	r2, r3
 8006452:	2300      	movs	r3, #0
 8006454:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645c:	461a      	mov	r2, r3
 800645e:	2300      	movs	r3, #0
 8006460:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006468:	461a      	mov	r2, r3
 800646a:	2300      	movs	r3, #0
 800646c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800646e:	2300      	movs	r3, #0
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e043      	b.n	80064fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006486:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800648a:	d118      	bne.n	80064be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649e:	461a      	mov	r2, r3
 80064a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	e013      	b.n	80064d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b4:	461a      	mov	r2, r3
 80064b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e008      	b.n	80064d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ca:	461a      	mov	r2, r3
 80064cc:	2300      	movs	r3, #0
 80064ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064dc:	461a      	mov	r2, r3
 80064de:	2300      	movs	r3, #0
 80064e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ee:	461a      	mov	r2, r3
 80064f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3301      	adds	r3, #1
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006500:	461a      	mov	r2, r3
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4293      	cmp	r3, r2
 8006506:	d3b5      	bcc.n	8006474 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e043      	b.n	8006596 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006524:	d118      	bne.n	8006558 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006538:	461a      	mov	r2, r3
 800653a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	e013      	b.n	800656a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654e:	461a      	mov	r2, r3
 8006550:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e008      	b.n	800656a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006564:	461a      	mov	r2, r3
 8006566:	2300      	movs	r3, #0
 8006568:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006588:	461a      	mov	r2, r3
 800658a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800658e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3301      	adds	r3, #1
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800659a:	461a      	mov	r2, r3
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4293      	cmp	r3, r2
 80065a0:	d3b5      	bcc.n	800650e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80065c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f043 0210 	orr.w	r2, r3, #16
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	4b0f      	ldr	r3, [pc, #60]	@ (800661c <USB_DevInit+0x2b4>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	f043 0208 	orr.w	r2, r3, #8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d105      	bne.n	800660c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699a      	ldr	r2, [r3, #24]
 8006604:	4b06      	ldr	r3, [pc, #24]	@ (8006620 <USB_DevInit+0x2b8>)
 8006606:	4313      	orrs	r3, r2
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006618:	b004      	add	sp, #16
 800661a:	4770      	bx	lr
 800661c:	803c3800 	.word	0x803c3800
 8006620:	40000004 	.word	0x40000004

08006624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800663e:	d901      	bls.n	8006644 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e01b      	b.n	800667c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	daf2      	bge.n	8006632 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	019b      	lsls	r3, r3, #6
 8006654:	f043 0220 	orr.w	r2, r3, #32
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006668:	d901      	bls.n	800666e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e006      	b.n	800667c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d0f0      	beq.n	800665c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3301      	adds	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066a0:	d901      	bls.n	80066a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e018      	b.n	80066d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	daf2      	bge.n	8006694 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2210      	movs	r2, #16
 80066b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066c4:	d901      	bls.n	80066ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e006      	b.n	80066d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b10      	cmp	r3, #16
 80066d4:	d0f0      	beq.n	80066b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006704:	4313      	orrs	r3, r2
 8006706:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006730:	f023 0303 	bic.w	r3, r3, #3
 8006734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006744:	f043 0302 	orr.w	r3, r3, #2
 8006748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0301 	and.w	r3, r3, #1
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800678c:	d901      	bls.n	8006792 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e01b      	b.n	80067ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	daf2      	bge.n	8006780 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f043 0201 	orr.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067b6:	d901      	bls.n	80067bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e006      	b.n	80067ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d0f0      	beq.n	80067aa <USB_CoreReset+0x36>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <memset>:
 80067d6:	4402      	add	r2, r0
 80067d8:	4603      	mov	r3, r0
 80067da:	4293      	cmp	r3, r2
 80067dc:	d100      	bne.n	80067e0 <memset+0xa>
 80067de:	4770      	bx	lr
 80067e0:	f803 1b01 	strb.w	r1, [r3], #1
 80067e4:	e7f9      	b.n	80067da <memset+0x4>
	...

080067e8 <__libc_init_array>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006820 <__libc_init_array+0x38>)
 80067ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006824 <__libc_init_array+0x3c>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	2600      	movs	r6, #0
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	d109      	bne.n	800680c <__libc_init_array+0x24>
 80067f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006828 <__libc_init_array+0x40>)
 80067fa:	4c0c      	ldr	r4, [pc, #48]	@ (800682c <__libc_init_array+0x44>)
 80067fc:	f000 f818 	bl	8006830 <_init>
 8006800:	1b64      	subs	r4, r4, r5
 8006802:	10a4      	asrs	r4, r4, #2
 8006804:	2600      	movs	r6, #0
 8006806:	42a6      	cmp	r6, r4
 8006808:	d105      	bne.n	8006816 <__libc_init_array+0x2e>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006810:	4798      	blx	r3
 8006812:	3601      	adds	r6, #1
 8006814:	e7ee      	b.n	80067f4 <__libc_init_array+0xc>
 8006816:	f855 3b04 	ldr.w	r3, [r5], #4
 800681a:	4798      	blx	r3
 800681c:	3601      	adds	r6, #1
 800681e:	e7f2      	b.n	8006806 <__libc_init_array+0x1e>
 8006820:	08006894 	.word	0x08006894
 8006824:	08006894 	.word	0x08006894
 8006828:	08006894 	.word	0x08006894
 800682c:	08006898 	.word	0x08006898

08006830 <_init>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	bf00      	nop
 8006834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006836:	bc08      	pop	{r3}
 8006838:	469e      	mov	lr, r3
 800683a:	4770      	bx	lr

0800683c <_fini>:
 800683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683e:	bf00      	nop
 8006840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006842:	bc08      	pop	{r3}
 8006844:	469e      	mov	lr, r3
 8006846:	4770      	bx	lr
